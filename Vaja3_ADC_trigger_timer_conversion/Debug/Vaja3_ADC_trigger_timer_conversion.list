
Vaja3_ADC_trigger_timer_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e70  08008e70  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e78  08008e78  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e78  08008e78  00018e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e7c  08008e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000090  08008f10  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08008f10  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c83e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d7  00000000  00000000  0003c8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  000409d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  000421e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b25f  00000000  00000000  00043848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001edee  00000000  00000000  0005eaa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2065  00000000  00000000  0007d895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f8fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006860  00000000  00000000  0011f94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000090 	.word	0x20000090
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008e3c 	.word	0x08008e3c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000094 	.word	0x20000094
 80001d0:	08008e3c 	.word	0x08008e3c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd96 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f820 	bl	8000524 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e4:	f000 f88a 	bl	80005fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 fa06 	bl	80008f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ec:	f000 f8f6 	bl	80006dc <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f0:	f000 f922 	bl	8000738 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f4:	f000 f94e 	bl	8000794 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f8:	f000 f97c 	bl	80007f4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004fc:	f008 f856 	bl	80085ac <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000500:	f000 f89a 	bl	8000638 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000504:	f000 f9ac 	bl	8000860 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <main+0x44>)
 800050a:	f000 fe59 	bl	80011c0 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <main+0x48>)
 8000510:	f004 fdce 	bl	80050b0 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000514:	f008 f870 	bl	80085f8 <MX_USB_HOST_Process>
 8000518:	e7fc      	b.n	8000514 <main+0x3c>
 800051a:	bf00      	nop
 800051c:	200000ac 	.word	0x200000ac
 8000520:	20000230 	.word	0x20000230

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f008 fb7c 	bl	8008c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <SystemClock_Config+0xd0>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemClock_Config+0xd4>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <SystemClock_Config+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800059c:	2360      	movs	r3, #96	; 0x60
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80005a0:	2306      	movs	r3, #6
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fed7 	bl	8004360 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b8:	f000 fa90 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2101      	movs	r1, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 f938 	bl	8004850 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e6:	f000 fa79 	bl	8000adc <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000614:	2332      	movs	r3, #50	; 0x32
 8000616:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fb22 	bl	8004c68 <HAL_RCCEx_PeriphCLKConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800062a:	f000 fa57 	bl	8000adc <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800064c:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <MX_ADC1_Init+0xa0>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC1_Init+0x9c>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_ADC1_Init+0x9c>)
 8000658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800065c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0x9c>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC1_Init+0x9c>)
 8000666:	2200      	movs	r2, #0
 8000668:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_ADC1_Init+0x9c>)
 8000674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800067c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_ADC1_Init+0x9c>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800068a:	2201      	movs	r2, #1
 800068c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_ADC1_Init+0x9c>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_ADC1_Init+0x9c>)
 8000698:	2201      	movs	r2, #1
 800069a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800069e:	f000 fd4b 	bl	8001138 <HAL_ADC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80006a8:	f000 fa18 	bl	8000adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80006b4:	2302      	movs	r3, #2
 80006b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_ADC1_Init+0x9c>)
 80006be:	f000 ff6f 	bl	80015a0 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006c8:	f000 fa08 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000ac 	.word	0x200000ac
 80006d8:	40012000 	.word	0x40012000

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C1_Init+0x50>)
 800071a:	f003 f83d 	bl	8003798 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f9da 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000f4 	.word	0x200000f4
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_I2S2_Init+0x54>)
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <MX_I2S2_Init+0x58>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2S2_Init+0x54>)
 8000744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000748:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_I2S2_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2S2_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_I2S2_Init+0x54>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_I2S2_Init+0x54>)
 800075e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000762:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2S2_Init+0x54>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_I2S2_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2S2_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_I2S2_Init+0x54>)
 8000778:	f003 f952 	bl	8003a20 <HAL_I2S_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000782:	f000 f9ab 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000148 	.word	0x20000148
 8000790:	40003800 	.word	0x40003800

08000794 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_I2S3_Init+0x54>)
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <MX_I2S3_Init+0x58>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <MX_I2S3_Init+0x5c>)
 80007be:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007d4:	f003 f924 	bl	8003a20 <HAL_I2S_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007de:	f000 f97d 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000190 	.word	0x20000190
 80007ec:	40003c00 	.word	0x40003c00
 80007f0:	00017700 	.word	0x00017700

080007f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_SPI1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI1_Init+0x64>)
 8000846:	f004 fb5b 	bl	8004f00 <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f944 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200001d8 	.word	0x200001d8
 800085c:	40013000 	.word	0x40013000

08000860 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_TIM2_Init+0x94>)
 800087e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000882:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_TIM2_Init+0x94>)
 8000886:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800088a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_TIM2_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_TIM2_Init+0x94>)
 8000894:	2264      	movs	r2, #100	; 0x64
 8000896:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_TIM2_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a4:	4813      	ldr	r0, [pc, #76]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008a6:	f004 fbb4 	bl	8005012 <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008b0:	f000 f914 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008c2:	f004 fc4f 	bl	8005164 <HAL_TIM_ConfigClockSource>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008cc:	f000 f906 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008d0:	2320      	movs	r3, #32
 80008d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008de:	f004 fe23 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008e8:	f000 f8f8 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000230 	.word	0x20000230

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	4b61      	ldr	r3, [pc, #388]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a60      	ldr	r2, [pc, #384]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000918:	f043 0310 	orr.w	r3, r3, #16
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b5e      	ldr	r3, [pc, #376]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	61bb      	str	r3, [r7, #24]
 8000928:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	4b5a      	ldr	r3, [pc, #360]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a59      	ldr	r2, [pc, #356]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b57      	ldr	r3, [pc, #348]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b53      	ldr	r3, [pc, #332]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a52      	ldr	r2, [pc, #328]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b50      	ldr	r3, [pc, #320]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b4c      	ldr	r3, [pc, #304]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a4b      	ldr	r2, [pc, #300]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b49      	ldr	r3, [pc, #292]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a3d      	ldr	r2, [pc, #244]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <MX_GPIO_Init+0x1a0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2108      	movs	r1, #8
 80009ba:	4838      	ldr	r0, [pc, #224]	; (8000a9c <MX_GPIO_Init+0x1a4>)
 80009bc:	f001 faae 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	4836      	ldr	r0, [pc, #216]	; (8000aa0 <MX_GPIO_Init+0x1a8>)
 80009c6:	f001 faa9 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ca:	2200      	movs	r2, #0
 80009cc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009d0:	4834      	ldr	r0, [pc, #208]	; (8000aa4 <MX_GPIO_Init+0x1ac>)
 80009d2:	f001 faa3 	bl	8001f1c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009d6:	2304      	movs	r3, #4
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	482c      	ldr	r0, [pc, #176]	; (8000a9c <MX_GPIO_Init+0x1a4>)
 80009ea:	f001 f913 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ee:	2308      	movs	r3, #8
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4825      	ldr	r0, [pc, #148]	; (8000a9c <MX_GPIO_Init+0x1a4>)
 8000a06:	f001 f905 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000a0a:	2332      	movs	r3, #50	; 0x32
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481f      	ldr	r0, [pc, #124]	; (8000a9c <MX_GPIO_Init+0x1a4>)
 8000a20:	f001 f8f8 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4819      	ldr	r0, [pc, #100]	; (8000aa0 <MX_GPIO_Init+0x1a8>)
 8000a3c:	f001 f8ea 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a44:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <MX_GPIO_Init+0x1b0>)
 8000a56:	f001 f8dd 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a5a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a5e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_GPIO_Init+0x1ac>)
 8000a74:	f001 f8ce 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <MX_GPIO_Init+0x1ac>)
 8000a8c:	f001 f8c2 	bl	8001c14 <HAL_GPIO_Init>

}
 8000a90:	bf00      	nop
 8000a92:	3730      	adds	r7, #48	; 0x30
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40020000 	.word	0x40020000

08000aac <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)

{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	adcVal = HAL_ADC_GetValue(hadc1);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 fd51 	bl	800155c <HAL_ADC_GetValue>
 8000aba:	4603      	mov	r3, r0
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_ADC_ConvCpltCallback+0x28>)
 8000ac0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000ac8:	f001 fa41 	bl	8001f4e <HAL_GPIO_TogglePin>
	UNUSED(hadc1);

	}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000278 	.word	0x20000278
 8000ad8:	40020c00 	.word	0x40020c00

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b26:	2007      	movs	r0, #7
 8000b28:	f001 f832 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1b      	ldr	r2, [pc, #108]	; (8000bc4 <HAL_ADC_MspInit+0x8c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12f      	bne.n	8000bba <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <HAL_ADC_MspInit+0x90>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_ADC_MspInit+0x90>)
 8000b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_ADC_MspInit+0x90>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_ADC_MspInit+0x90>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <HAL_ADC_MspInit+0x90>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_ADC_MspInit+0x90>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b92:	2302      	movs	r3, #2
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b96:	2303      	movs	r3, #3
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <HAL_ADC_MspInit+0x94>)
 8000ba6:	f001 f835 	bl	8001c14 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2012      	movs	r0, #18
 8000bb0:	f000 fff9 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000bb4:	2012      	movs	r0, #18
 8000bb6:	f001 f812 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40012000 	.word	0x40012000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_I2C_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12c      	bne.n	8000c4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c14:	2312      	movs	r3, #18
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c20:	2304      	movs	r3, #4
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480c      	ldr	r0, [pc, #48]	; (8000c5c <HAL_I2C_MspInit+0x8c>)
 8000c2c:	f000 fff2 	bl	8001c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400

08000c60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	; 0x38
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a51      	ldr	r2, [pc, #324]	; (8000dc4 <HAL_I2S_MspInit+0x164>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d14b      	bne.n	8000d1a <HAL_I2S_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
 8000c86:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a4f      	ldr	r2, [pc, #316]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	623b      	str	r3, [r7, #32]
 8000c9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a48      	ldr	r2, [pc, #288]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a41      	ldr	r2, [pc, #260]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4836      	ldr	r0, [pc, #216]	; (8000dcc <HAL_I2S_MspInit+0x16c>)
 8000cf2:	f000 ff8f 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000cf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d08:	2305      	movs	r3, #5
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	482f      	ldr	r0, [pc, #188]	; (8000dd0 <HAL_I2S_MspInit+0x170>)
 8000d14:	f000 ff7e 	bl	8001c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d18:	e04f      	b.n	8000dba <HAL_I2S_MspInit+0x15a>
  else if(hi2s->Instance==SPI3)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a2d      	ldr	r2, [pc, #180]	; (8000dd4 <HAL_I2S_MspInit+0x174>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d14a      	bne.n	8000dba <HAL_I2S_MspInit+0x15a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	4a26      	ldr	r2, [pc, #152]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d32:	6413      	str	r3, [r2, #64]	; 0x40
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a1f      	ldr	r2, [pc, #124]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_I2S_MspInit+0x168>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d78:	2310      	movs	r3, #16
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d88:	2306      	movs	r3, #6
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <HAL_I2S_MspInit+0x178>)
 8000d94:	f000 ff3e 	bl	8001c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d98:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000daa:	2306      	movs	r3, #6
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_I2S_MspInit+0x16c>)
 8000db6:	f000 ff2d 	bl	8001c14 <HAL_GPIO_Init>
}
 8000dba:	bf00      	nop
 8000dbc:	3738      	adds	r7, #56	; 0x38
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40003800 	.word	0x40003800
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40020400 	.word	0x40020400
 8000dd4:	40003c00 	.word	0x40003c00
 8000dd8:	40020000 	.word	0x40020000

08000ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <HAL_SPI_MspInit+0x84>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d12b      	bne.n	8000e56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000e36:	23e0      	movs	r3, #224	; 0xe0
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e46:	2305      	movs	r3, #5
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <HAL_SPI_MspInit+0x8c>)
 8000e52:	f000 fedf 	bl	8001c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40013000 	.word	0x40013000
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000

08000e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e7c:	d10d      	bne.n	8000e9a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_TIM_Base_MspInit+0x3c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_TIM_Base_MspInit+0x3c>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_TIM_Base_MspInit+0x3c>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef8:	f000 f8da 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <ADC_IRQHandler+0x10>)
 8000f06:	f000 fa19 	bl	800133c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000ac 	.word	0x200000ac

08000f14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <OTG_FS_IRQHandler+0x10>)
 8000f1a:	f001 fa9d 	bl	8002458 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000660 	.word	0x20000660

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f007 fe30 	bl	8008bbc <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20010000 	.word	0x20010000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	2000027c 	.word	0x2000027c
 8000f90:	20000978 	.word	0x20000978

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopFillZerobss+0x12>
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
 8000fbe:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1a>)
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1e>)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:
 8000fc6:	58d4      	ldr	r4, [r2, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:
 8000fcc:	18c4      	adds	r4, r0, r3
 8000fce:	428c      	cmp	r4, r1
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <LoopFillZerobss+0x22>)
 8000fd4:	4c0b      	ldr	r4, [pc, #44]	; (8001004 <LoopFillZerobss+0x26>)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:
 8000fde:	42a2      	cmp	r2, r4
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>
 8000fe2:	f7ff ffd7 	bl	8000f94 <SystemInit>
 8000fe6:	f007 fdef 	bl	8008bc8 <__libc_init_array>
 8000fea:	f7ff fa75 	bl	80004d8 <main>
 8000fee:	4770      	bx	lr
 8000ff0:	20010000 	.word	0x20010000
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000090 	.word	0x20000090
 8000ffc:	08008e80 	.word	0x08008e80
 8001000:	20000090 	.word	0x20000090
 8001004:	20000974 	.word	0x20000974

08001008 <DMA1_Stream0_IRQHandler>:
 8001008:	e7fe      	b.n	8001008 <DMA1_Stream0_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_Init+0x40>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_Init+0x40>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x40>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 fdab 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fd52 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fdc3 	bl	8001bfa <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 fd8b 	bl	8001ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000280 	.word	0x20000280

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000280 	.word	0x20000280

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008

08001138 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e033      	b.n	80011b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fcee 	bl	8000b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	d118      	bne.n	80011a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800117e:	f023 0302 	bic.w	r3, r3, #2
 8001182:	f043 0202 	orr.w	r2, r3, #2
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fb2a 	bl	80017e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f023 0303 	bic.w	r3, r3, #3
 800119e:	f043 0201 	orr.w	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
 80011a6:	e001      	b.n	80011ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Start_IT+0x1a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e0a1      	b.n	800131e <HAL_ADC_Start_IT+0x15e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d018      	beq.n	8001222 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001200:	4b4a      	ldr	r3, [pc, #296]	; (800132c <HAL_ADC_Start_IT+0x16c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <HAL_ADC_Start_IT+0x170>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9a      	lsrs	r2, r3, #18
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001214:	e002      	b.n	800121c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3b01      	subs	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f9      	bne.n	8001216 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b01      	cmp	r3, #1
 800122e:	d169      	bne.n	8001304 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800125a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800126e:	d106      	bne.n	800127e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	f023 0206 	bic.w	r2, r3, #6
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
 800127c:	e002      	b.n	8001284 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800128c:	4b29      	ldr	r3, [pc, #164]	; (8001334 <HAL_ADC_Start_IT+0x174>)
 800128e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001298:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d129      	bne.n	800131c <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	e020      	b.n	800131c <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a16      	ldr	r2, [pc, #88]	; (8001338 <HAL_ADC_Start_IT+0x178>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d11b      	bne.n	800131c <HAL_ADC_Start_IT+0x15c>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d114      	bne.n	800131c <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	e00b      	b.n	800131c <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f043 0210 	orr.w	r2, r3, #16
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001314:	f043 0201 	orr.w	r2, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000000 	.word	0x20000000
 8001330:	431bde83 	.word	0x431bde83
 8001334:	40012300 	.word	0x40012300
 8001338:	40012000 	.word	0x40012000

0800133c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f003 0320 	and.w	r3, r3, #32
 800136a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d049      	beq.n	8001406 <HAL_ADC_IRQHandler+0xca>
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d046      	beq.n	8001406 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 0310 	and.w	r3, r3, #16
 8001380:	2b00      	cmp	r3, #0
 8001382:	d105      	bne.n	8001390 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d12b      	bne.n	80013f6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d127      	bne.n	80013f6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d119      	bne.n	80013f6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0220 	bic.w	r2, r2, #32
 80013d0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d105      	bne.n	80013f6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fb58 	bl	8000aac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f06f 0212 	mvn.w	r2, #18
 8001404:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001414:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d057      	beq.n	80014cc <HAL_ADC_IRQHandler+0x190>
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d054      	beq.n	80014cc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d139      	bne.n	80014bc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001460:	2b00      	cmp	r3, #0
 8001462:	d12b      	bne.n	80014bc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800146e:	2b00      	cmp	r3, #0
 8001470:	d124      	bne.n	80014bc <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11d      	bne.n	80014bc <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001484:	2b00      	cmp	r3, #0
 8001486:	d119      	bne.n	80014bc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001496:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fa8d 	bl	80019dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f06f 020c 	mvn.w	r2, #12
 80014ca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d017      	beq.n	8001512 <HAL_ADC_IRQHandler+0x1d6>
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d014      	beq.n	8001512 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10d      	bne.n	8001512 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f837 	bl	8001576 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f06f 0201 	mvn.w	r2, #1
 8001510:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001520:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d015      	beq.n	8001554 <HAL_ADC_IRQHandler+0x218>
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d012      	beq.n	8001554 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f043 0202 	orr.w	r2, r3, #2
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f06f 0220 	mvn.w	r2, #32
 8001542:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f820 	bl	800158a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f06f 0220 	mvn.w	r2, #32
 8001552:	601a      	str	r2, [r3, #0]
  }
}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x1c>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e105      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x228>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b09      	cmp	r3, #9
 80015ca:	d925      	bls.n	8001618 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68d9      	ldr	r1, [r3, #12]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	3b1e      	subs	r3, #30
 80015e2:	2207      	movs	r2, #7
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43da      	mvns	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	400a      	ands	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68d9      	ldr	r1, [r3, #12]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	4603      	mov	r3, r0
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4403      	add	r3, r0
 800160a:	3b1e      	subs	r3, #30
 800160c:	409a      	lsls	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	e022      	b.n	800165e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6919      	ldr	r1, [r3, #16]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	2207      	movs	r2, #7
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	400a      	ands	r2, r1
 800163a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6919      	ldr	r1, [r3, #16]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4618      	mov	r0, r3
 800164e:	4603      	mov	r3, r0
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4403      	add	r3, r0
 8001654:	409a      	lsls	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b06      	cmp	r3, #6
 8001664:	d824      	bhi.n	80016b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b05      	subs	r3, #5
 8001678:	221f      	movs	r2, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3b05      	subs	r3, #5
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
 80016ae:	e04c      	b.n	800174a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b0c      	cmp	r3, #12
 80016b6:	d824      	bhi.n	8001702 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b23      	subs	r3, #35	; 0x23
 80016ca:	221f      	movs	r2, #31
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43da      	mvns	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	400a      	ands	r2, r1
 80016d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	3b23      	subs	r3, #35	; 0x23
 80016f4:	fa00 f203 	lsl.w	r2, r0, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001700:	e023      	b.n	800174a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	3b41      	subs	r3, #65	; 0x41
 8001714:	221f      	movs	r2, #31
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	400a      	ands	r2, r1
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b41      	subs	r3, #65	; 0x41
 800173e:	fa00 f203 	lsl.w	r2, r0, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_ADC_ConfigChannel+0x234>)
 800174c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <HAL_ADC_ConfigChannel+0x238>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d109      	bne.n	800176c <HAL_ADC_ConfigChannel+0x1cc>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b12      	cmp	r3, #18
 800175e:	d105      	bne.n	800176c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_ADC_ConfigChannel+0x238>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d123      	bne.n	80017be <HAL_ADC_ConfigChannel+0x21e>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b10      	cmp	r3, #16
 800177c:	d003      	beq.n	8001786 <HAL_ADC_ConfigChannel+0x1e6>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b11      	cmp	r3, #17
 8001784:	d11b      	bne.n	80017be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b10      	cmp	r3, #16
 8001798:	d111      	bne.n	80017be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_ADC_ConfigChannel+0x23c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a10      	ldr	r2, [pc, #64]	; (80017e0 <HAL_ADC_ConfigChannel+0x240>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	0c9a      	lsrs	r2, r3, #18
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b0:	e002      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f9      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40012300 	.word	0x40012300
 80017d8:	40012000 	.word	0x40012000
 80017dc:	20000000 	.word	0x20000000
 80017e0:	431bde83 	.word	0x431bde83

080017e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ec:	4b79      	ldr	r3, [pc, #484]	; (80019d4 <ADC_Init+0x1f0>)
 80017ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	431a      	orrs	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001818:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	021a      	lsls	r2, r3, #8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800183c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800185e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6899      	ldr	r1, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <ADC_Init+0x1f4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d022      	beq.n	80018c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800188a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6899      	ldr	r1, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6899      	ldr	r1, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	e00f      	b.n	80018e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0202 	bic.w	r2, r2, #2
 80018f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6899      	ldr	r1, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7e1b      	ldrb	r3, [r3, #24]
 80018fc:	005a      	lsls	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01b      	beq.n	8001948 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800191e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800192e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6859      	ldr	r1, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	3b01      	subs	r3, #1
 800193c:	035a      	lsls	r2, r3, #13
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	e007      	b.n	8001958 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001956:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	3b01      	subs	r3, #1
 8001974:	051a      	lsls	r2, r3, #20
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800198c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6899      	ldr	r1, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800199a:	025a      	lsls	r2, r3, #9
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6899      	ldr	r1, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	029a      	lsls	r2, r3, #10
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	40012300 	.word	0x40012300
 80019d8:	0f000001 	.word	0x0f000001

080019dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	; (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f7ff ff8e 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff29 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff3e 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff8e 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5d 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff31 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa2 	bl	8001b4c <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e159      	b.n	8001ee4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f040 8148 	bne.w	8001ede <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d005      	beq.n	8001c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d130      	bne.n	8001cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 0201 	and.w	r2, r3, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d017      	beq.n	8001d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d123      	bne.n	8001d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	69b9      	ldr	r1, [r7, #24]
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a2 	beq.w	8001ede <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b57      	ldr	r3, [pc, #348]	; (8001efc <HAL_GPIO_Init+0x2e8>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a56      	ldr	r2, [pc, #344]	; (8001efc <HAL_GPIO_Init+0x2e8>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b54      	ldr	r3, [pc, #336]	; (8001efc <HAL_GPIO_Init+0x2e8>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db6:	4a52      	ldr	r2, [pc, #328]	; (8001f00 <HAL_GPIO_Init+0x2ec>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a49      	ldr	r2, [pc, #292]	; (8001f04 <HAL_GPIO_Init+0x2f0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d019      	beq.n	8001e16 <HAL_GPIO_Init+0x202>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a48      	ldr	r2, [pc, #288]	; (8001f08 <HAL_GPIO_Init+0x2f4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0x1fe>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a47      	ldr	r2, [pc, #284]	; (8001f0c <HAL_GPIO_Init+0x2f8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <HAL_GPIO_Init+0x1fa>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a46      	ldr	r2, [pc, #280]	; (8001f10 <HAL_GPIO_Init+0x2fc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x1f6>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_GPIO_Init+0x1f2>
 8001e02:	2304      	movs	r3, #4
 8001e04:	e008      	b.n	8001e18 <HAL_GPIO_Init+0x204>
 8001e06:	2307      	movs	r3, #7
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x204>
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e004      	b.n	8001e18 <HAL_GPIO_Init+0x204>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_Init+0x204>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x204>
 8001e16:	2300      	movs	r3, #0
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	f002 0203 	and.w	r2, r2, #3
 8001e1e:	0092      	lsls	r2, r2, #2
 8001e20:	4093      	lsls	r3, r2
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e28:	4935      	ldr	r1, [pc, #212]	; (8001f00 <HAL_GPIO_Init+0x2ec>)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <HAL_GPIO_Init+0x304>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5a:	4a2f      	ldr	r2, [pc, #188]	; (8001f18 <HAL_GPIO_Init+0x304>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_GPIO_Init+0x304>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e84:	4a24      	ldr	r2, [pc, #144]	; (8001f18 <HAL_GPIO_Init+0x304>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8a:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <HAL_GPIO_Init+0x304>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eae:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <HAL_GPIO_Init+0x304>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb4:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_GPIO_Init+0x304>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed8:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <HAL_GPIO_Init+0x304>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b0f      	cmp	r3, #15
 8001ee8:	f67f aea2 	bls.w	8001c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40013800 	.word	0x40013800
 8001f04:	40020000 	.word	0x40020000
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	40020c00 	.word	0x40020c00
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40013c00 	.word	0x40013c00

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f38:	e003      	b.n	8001f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3a:	887b      	ldrh	r3, [r7, #2]
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	619a      	str	r2, [r3, #24]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f60:	887a      	ldrh	r2, [r7, #2]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	041a      	lsls	r2, r3, #16
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	887b      	ldrh	r3, [r7, #2]
 8001f6e:	400b      	ands	r3, r1
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f84:	b08f      	sub	sp, #60	; 0x3c
 8001f86:	af0a      	add	r7, sp, #40	; 0x28
 8001f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e054      	b.n	800203e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f006 fb5a 	bl	8008668 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fb88 	bl	80056e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	687e      	ldr	r6, [r7, #4]
 8001fe0:	466d      	mov	r5, sp
 8001fe2:	f106 0410 	add.w	r4, r6, #16
 8001fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ff6:	1d33      	adds	r3, r6, #4
 8001ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ffa:	6838      	ldr	r0, [r7, #0]
 8001ffc:	f003 fb02 	bl	8005604 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	4618      	mov	r0, r3
 8002008:	f003 fb7f 	bl	800570a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	687e      	ldr	r6, [r7, #4]
 8002014:	466d      	mov	r5, sp
 8002016:	f106 0410 	add.w	r4, r6, #16
 800201a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002022:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002026:	e885 0003 	stmia.w	r5, {r0, r1}
 800202a:	1d33      	adds	r3, r6, #4
 800202c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202e:	6838      	ldr	r0, [r7, #0]
 8002030:	f003 fd08 	bl	8005a44 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002046 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002046:	b590      	push	{r4, r7, lr}
 8002048:	b089      	sub	sp, #36	; 0x24
 800204a:	af04      	add	r7, sp, #16
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	4608      	mov	r0, r1
 8002050:	4611      	mov	r1, r2
 8002052:	461a      	mov	r2, r3
 8002054:	4603      	mov	r3, r0
 8002056:	70fb      	strb	r3, [r7, #3]
 8002058:	460b      	mov	r3, r1
 800205a:	70bb      	strb	r3, [r7, #2]
 800205c:	4613      	mov	r3, r2
 800205e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_HCD_HC_Init+0x28>
 800206a:	2302      	movs	r3, #2
 800206c:	e076      	b.n	800215c <HAL_HCD_HC_Init+0x116>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	333d      	adds	r3, #61	; 0x3d
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	3338      	adds	r3, #56	; 0x38
 8002096:	787a      	ldrb	r2, [r7, #1]
 8002098:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3340      	adds	r3, #64	; 0x40
 80020a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020aa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3339      	adds	r3, #57	; 0x39
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	212c      	movs	r1, #44	; 0x2c
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	333f      	adds	r3, #63	; 0x3f
 80020cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	78ba      	ldrb	r2, [r7, #2]
 80020d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020da:	b2d0      	uxtb	r0, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	333a      	adds	r3, #58	; 0x3a
 80020e8:	4602      	mov	r2, r0
 80020ea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80020ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da09      	bge.n	8002108 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	333b      	adds	r3, #59	; 0x3b
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e008      	b.n	800211a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	333b      	adds	r3, #59	; 0x3b
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	333c      	adds	r3, #60	; 0x3c
 8002128:	f897 2020 	ldrb.w	r2, [r7, #32]
 800212c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	787c      	ldrb	r4, [r7, #1]
 8002134:	78ba      	ldrb	r2, [r7, #2]
 8002136:	78f9      	ldrb	r1, [r7, #3]
 8002138:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800213a:	9302      	str	r3, [sp, #8]
 800213c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	4623      	mov	r3, r4
 800214a:	f003 fe01 	bl	8005d50 <USB_HC_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800215a:	7bfb      	ldrb	r3, [r7, #15]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}

08002164 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_HCD_HC_Halt+0x1e>
 800217e:	2302      	movs	r3, #2
 8002180:	e00f      	b.n	80021a2 <HAL_HCD_HC_Halt+0x3e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f004 f851 	bl	800623a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	4608      	mov	r0, r1
 80021b6:	4611      	mov	r1, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	70fb      	strb	r3, [r7, #3]
 80021be:	460b      	mov	r3, r1
 80021c0:	70bb      	strb	r3, [r7, #2]
 80021c2:	4613      	mov	r3, r2
 80021c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	333b      	adds	r3, #59	; 0x3b
 80021d4:	78ba      	ldrb	r2, [r7, #2]
 80021d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	333f      	adds	r3, #63	; 0x3f
 80021e6:	787a      	ldrb	r2, [r7, #1]
 80021e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021ea:	7c3b      	ldrb	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d112      	bne.n	8002216 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3342      	adds	r3, #66	; 0x42
 80021fe:	2203      	movs	r2, #3
 8002200:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	333d      	adds	r3, #61	; 0x3d
 8002210:	7f3a      	ldrb	r2, [r7, #28]
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e008      	b.n	8002228 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	3342      	adds	r3, #66	; 0x42
 8002224:	2202      	movs	r2, #2
 8002226:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	2b03      	cmp	r3, #3
 800222c:	f200 80c6 	bhi.w	80023bc <HAL_HCD_HC_SubmitRequest+0x210>
 8002230:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002236:	bf00      	nop
 8002238:	08002249 	.word	0x08002249
 800223c:	080023a9 	.word	0x080023a9
 8002240:	080022ad 	.word	0x080022ad
 8002244:	0800232b 	.word	0x0800232b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002248:	7c3b      	ldrb	r3, [r7, #16]
 800224a:	2b01      	cmp	r3, #1
 800224c:	f040 80b8 	bne.w	80023c0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002250:	78bb      	ldrb	r3, [r7, #2]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 80b4 	bne.w	80023c0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002258:	8b3b      	ldrh	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	3355      	adds	r3, #85	; 0x55
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	3355      	adds	r3, #85	; 0x55
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3342      	adds	r3, #66	; 0x42
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002296:	e093      	b.n	80023c0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3342      	adds	r3, #66	; 0x42
 80022a6:	2202      	movs	r2, #2
 80022a8:	701a      	strb	r2, [r3, #0]
      break;
 80022aa:	e089      	b.n	80023c0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022ac:	78bb      	ldrb	r3, [r7, #2]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d11d      	bne.n	80022ee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3355      	adds	r3, #85	; 0x55
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3342      	adds	r3, #66	; 0x42
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022d8:	e073      	b.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3342      	adds	r3, #66	; 0x42
 80022e8:	2202      	movs	r2, #2
 80022ea:	701a      	strb	r2, [r3, #0]
      break;
 80022ec:	e069      	b.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	3354      	adds	r3, #84	; 0x54
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	3342      	adds	r3, #66	; 0x42
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
      break;
 8002314:	e055      	b.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	3342      	adds	r3, #66	; 0x42
 8002324:	2202      	movs	r2, #2
 8002326:	701a      	strb	r2, [r3, #0]
      break;
 8002328:	e04b      	b.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800232a:	78bb      	ldrb	r3, [r7, #2]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d11d      	bne.n	800236c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3355      	adds	r3, #85	; 0x55
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3342      	adds	r3, #66	; 0x42
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002356:	e034      	b.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3342      	adds	r3, #66	; 0x42
 8002366:	2202      	movs	r2, #2
 8002368:	701a      	strb	r2, [r3, #0]
      break;
 800236a:	e02a      	b.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3354      	adds	r3, #84	; 0x54
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3342      	adds	r3, #66	; 0x42
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
      break;
 8002392:	e016      	b.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3342      	adds	r3, #66	; 0x42
 80023a2:	2202      	movs	r2, #2
 80023a4:	701a      	strb	r2, [r3, #0]
      break;
 80023a6:	e00c      	b.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3342      	adds	r3, #66	; 0x42
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
      break;
 80023ba:	e002      	b.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80023bc:	bf00      	nop
 80023be:	e000      	b.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80023c0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	3344      	adds	r3, #68	; 0x44
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	8b3a      	ldrh	r2, [r7, #24]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	202c      	movs	r0, #44	; 0x2c
 80023dc:	fb00 f303 	mul.w	r3, r0, r3
 80023e0:	440b      	add	r3, r1
 80023e2:	334c      	adds	r3, #76	; 0x4c
 80023e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3360      	adds	r3, #96	; 0x60
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3350      	adds	r3, #80	; 0x50
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3339      	adds	r3, #57	; 0x39
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3361      	adds	r3, #97	; 0x61
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	222c      	movs	r2, #44	; 0x2c
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	3338      	adds	r3, #56	; 0x38
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	18d1      	adds	r1, r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	f003 fda4 	bl	8005f94 <USB_HC_StartXfer>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop

08002458 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f003 faa5 	bl	80059be <USB_GetMode>
 8002474:	4603      	mov	r3, r0
 8002476:	2b01      	cmp	r3, #1
 8002478:	f040 80f6 	bne.w	8002668 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f003 fa89 	bl	8005998 <USB_ReadInterrupts>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80ec 	beq.w	8002666 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f003 fa80 	bl	8005998 <USB_ReadInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024a2:	d104      	bne.n	80024ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fa70 	bl	8005998 <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c2:	d104      	bne.n	80024ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 fa60 	bl	8005998 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024e2:	d104      	bne.n	80024ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fa50 	bl	8005998 <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d103      	bne.n	800250a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2202      	movs	r2, #2
 8002508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f003 fa42 	bl	8005998 <USB_ReadInterrupts>
 8002514:	4603      	mov	r3, r0
 8002516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800251a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800251e:	d11c      	bne.n	800255a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002528:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800253a:	2110      	movs	r1, #16
 800253c:	6938      	ldr	r0, [r7, #16]
 800253e:	f003 f931 	bl	80057a4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002542:	6938      	ldr	r0, [r7, #16]
 8002544:	f003 f962 	bl	800580c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f003 fb38 	bl	8005bc4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f006 f905 	bl	8008764 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fa1a 	bl	8005998 <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800256e:	d102      	bne.n	8002576 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f001 f89e 	bl	80036b2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f003 fa0c 	bl	8005998 <USB_ReadInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b08      	cmp	r3, #8
 8002588:	d106      	bne.n	8002598 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f006 f8ce 	bl	800872c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2208      	movs	r2, #8
 8002596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f003 f9fb 	bl	8005998 <USB_ReadInterrupts>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b10      	cmp	r3, #16
 80025aa:	d101      	bne.n	80025b0 <HAL_HCD_IRQHandler+0x158>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_HCD_IRQHandler+0x15a>
 80025b0:	2300      	movs	r3, #0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d012      	beq.n	80025dc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0210 	bic.w	r2, r2, #16
 80025c4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 ffa1 	bl	800350e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0210 	orr.w	r2, r2, #16
 80025da:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 f9d9 	bl	8005998 <USB_ReadInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025f0:	d13a      	bne.n	8002668 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 fe0e 	bl	8006218 <USB_HC_ReadInterrupt>
 80025fc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e025      	b.n	8002650 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d018      	beq.n	800264a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800262e:	d106      	bne.n	800263e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4619      	mov	r1, r3
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f8ab 	bl	8002792 <HCD_HC_IN_IRQHandler>
 800263c:	e005      	b.n	800264a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fbf9 	bl	8002e3c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	429a      	cmp	r2, r3
 8002658:	d3d4      	bcc.n	8002604 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002662:	615a      	str	r2, [r3, #20]
 8002664:	e000      	b.n	8002668 <HAL_HCD_IRQHandler+0x210>
      return;
 8002666:	bf00      	nop
    }
  }
}
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_HCD_Start+0x16>
 8002680:	2302      	movs	r3, #2
 8002682:	e013      	b.n	80026ac <HAL_HCD_Start+0x3e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2101      	movs	r1, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f003 fafa 	bl	8005c8c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f003 f812 	bl	80056c6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_HCD_Stop+0x16>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e00d      	b.n	80026e6 <HAL_HCD_Stop+0x32>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fee8 	bl	80064ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f003 fa9c 	bl	8005c38 <USB_ResetPort>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	3360      	adds	r3, #96	; 0x60
 8002724:	781b      	ldrb	r3, [r3, #0]
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3350      	adds	r3, #80	; 0x50
 800274c:	681b      	ldr	r3, [r3, #0]
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fae0 	bl	8005d2c <USB_GetCurrentFrame>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fabb 	bl	8005cfe <USB_GetHostSpeed>
 8002788:	4603      	mov	r3, r0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d11a      	bne.n	80027f8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	461a      	mov	r2, r3
 80027d0:	2304      	movs	r3, #4
 80027d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3361      	adds	r3, #97	; 0x61
 80027e2:	2206      	movs	r2, #6
 80027e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 fd22 	bl	800623a <USB_HC_Halt>
 80027f6:	e0af      	b.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280e:	d11b      	bne.n	8002848 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002822:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3361      	adds	r3, #97	; 0x61
 8002832:	2207      	movs	r2, #7
 8002834:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fcfa 	bl	800623a <USB_HC_Halt>
 8002846:	e087      	b.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b20      	cmp	r3, #32
 800285c:	d109      	bne.n	8002872 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	461a      	mov	r2, r3
 800286c:	2320      	movs	r3, #32
 800286e:	6093      	str	r3, [r2, #8]
 8002870:	e072      	b.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b08      	cmp	r3, #8
 8002886:	d11a      	bne.n	80028be <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	2308      	movs	r3, #8
 8002898:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3361      	adds	r3, #97	; 0x61
 80028a8:	2205      	movs	r2, #5
 80028aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 fcbf 	bl	800623a <USB_HC_Halt>
 80028bc:	e04c      	b.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d4:	d11b      	bne.n	800290e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	461a      	mov	r2, r3
 80028e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3361      	adds	r3, #97	; 0x61
 80028f8:	2208      	movs	r2, #8
 80028fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f003 fc97 	bl	800623a <USB_HC_Halt>
 800290c:	e024      	b.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b80      	cmp	r3, #128	; 0x80
 8002922:	d119      	bne.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	461a      	mov	r2, r3
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	3361      	adds	r3, #97	; 0x61
 8002944:	2206      	movs	r2, #6
 8002946:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f003 fc71 	bl	800623a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800296e:	d112      	bne.n	8002996 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f003 fc5d 	bl	800623a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	461a      	mov	r2, r3
 800298e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002992:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002994:	e24e      	b.n	8002e34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	f040 80df 	bne.w	8002b6c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d019      	beq.n	80029ea <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	3348      	adds	r3, #72	; 0x48
 80029c4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	0159      	lsls	r1, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	440b      	add	r3, r1
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029d8:	1ad2      	subs	r2, r2, r3
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	202c      	movs	r0, #44	; 0x2c
 80029e0:	fb00 f303 	mul.w	r3, r0, r3
 80029e4:	440b      	add	r3, r1
 80029e6:	3350      	adds	r3, #80	; 0x50
 80029e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3361      	adds	r3, #97	; 0x61
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	335c      	adds	r3, #92	; 0x5c
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	333f      	adds	r3, #63	; 0x3f
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	333f      	adds	r3, #63	; 0x3f
 8002a42:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d111      	bne.n	8002a6c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 fbf1 	bl	800623a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	2310      	movs	r3, #16
 8002a68:	6093      	str	r3, [r2, #8]
 8002a6a:	e03a      	b.n	8002ae2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	333f      	adds	r3, #63	; 0x3f
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d009      	beq.n	8002a94 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	333f      	adds	r3, #63	; 0x3f
 8002a8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d126      	bne.n	8002ae2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	0151      	lsls	r1, r2, #5
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	440a      	add	r2, r1
 8002aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ab2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3360      	adds	r3, #96	; 0x60
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	b2d9      	uxtb	r1, r3
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	202c      	movs	r0, #44	; 0x2c
 8002ad0:	fb00 f303 	mul.w	r3, r0, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3360      	adds	r3, #96	; 0x60
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f005 fe4f 	bl	8008780 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d12b      	bne.n	8002b42 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3348      	adds	r3, #72	; 0x48
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	202c      	movs	r0, #44	; 0x2c
 8002b00:	fb00 f202 	mul.w	r2, r0, r2
 8002b04:	440a      	add	r2, r1
 8002b06:	3240      	adds	r2, #64	; 0x40
 8002b08:	8812      	ldrh	r2, [r2, #0]
 8002b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 818e 	beq.w	8002e34 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3354      	adds	r3, #84	; 0x54
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	f083 0301 	eor.w	r3, r3, #1
 8002b2c:	b2d8      	uxtb	r0, r3
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3354      	adds	r3, #84	; 0x54
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	701a      	strb	r2, [r3, #0]
}
 8002b40:	e178      	b.n	8002e34 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3354      	adds	r3, #84	; 0x54
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	f083 0301 	eor.w	r3, r3, #1
 8002b56:	b2d8      	uxtb	r0, r3
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3354      	adds	r3, #84	; 0x54
 8002b66:	4602      	mov	r2, r0
 8002b68:	701a      	strb	r2, [r3, #0]
}
 8002b6a:	e163      	b.n	8002e34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	f040 80f6 	bne.w	8002d70 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3361      	adds	r3, #97	; 0x61
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d109      	bne.n	8002bac <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3360      	adds	r3, #96	; 0x60
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	e0c9      	b.n	8002d40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3361      	adds	r3, #97	; 0x61
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d109      	bne.n	8002bd4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3360      	adds	r3, #96	; 0x60
 8002bce:	2205      	movs	r2, #5
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e0b5      	b.n	8002d40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3361      	adds	r3, #97	; 0x61
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b06      	cmp	r3, #6
 8002be6:	d009      	beq.n	8002bfc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3361      	adds	r3, #97	; 0x61
 8002bf6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d150      	bne.n	8002c9e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	335c      	adds	r3, #92	; 0x5c
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	202c      	movs	r0, #44	; 0x2c
 8002c14:	fb00 f303 	mul.w	r3, r0, r3
 8002c18:	440b      	add	r3, r1
 8002c1a:	335c      	adds	r3, #92	; 0x5c
 8002c1c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	335c      	adds	r3, #92	; 0x5c
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d912      	bls.n	8002c58 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	335c      	adds	r3, #92	; 0x5c
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3360      	adds	r3, #96	; 0x60
 8002c52:	2204      	movs	r2, #4
 8002c54:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c56:	e073      	b.n	8002d40 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3360      	adds	r3, #96	; 0x60
 8002c66:	2202      	movs	r2, #2
 8002c68:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c80:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c88:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c9c:	e050      	b.n	8002d40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3361      	adds	r3, #97	; 0x61
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d122      	bne.n	8002cf8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3360      	adds	r3, #96	; 0x60
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cda:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ce2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e023      	b.n	8002d40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3361      	adds	r3, #97	; 0x61
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b07      	cmp	r3, #7
 8002d0a:	d119      	bne.n	8002d40 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	335c      	adds	r3, #92	; 0x5c
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	202c      	movs	r0, #44	; 0x2c
 8002d24:	fb00 f303 	mul.w	r3, r0, r3
 8002d28:	440b      	add	r3, r1
 8002d2a:	335c      	adds	r3, #92	; 0x5c
 8002d2c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3360      	adds	r3, #96	; 0x60
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2302      	movs	r3, #2
 8002d50:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	b2d9      	uxtb	r1, r3
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	202c      	movs	r0, #44	; 0x2c
 8002d5c:	fb00 f303 	mul.w	r3, r0, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3360      	adds	r3, #96	; 0x60
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f005 fd09 	bl	8008780 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d6e:	e061      	b.n	8002e34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d156      	bne.n	8002e34 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	333f      	adds	r3, #63	; 0x3f
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d111      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	335c      	adds	r3, #92	; 0x5c
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 fa3f 	bl	800623a <USB_HC_Halt>
 8002dbc:	e031      	b.n	8002e22 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	333f      	adds	r3, #63	; 0x3f
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	333f      	adds	r3, #63	; 0x3f
 8002de0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d11d      	bne.n	8002e22 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	335c      	adds	r3, #92	; 0x5c
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d110      	bne.n	8002e22 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3361      	adds	r3, #97	; 0x61
 8002e0e:	2203      	movs	r2, #3
 8002e10:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fa0c 	bl	800623a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2310      	movs	r3, #16
 8002e32:	6093      	str	r3, [r2, #8]
}
 8002e34:	bf00      	nop
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d11a      	bne.n	8002ea2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3361      	adds	r3, #97	; 0x61
 8002e8c:	2206      	movs	r2, #6
 8002e8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 f9cd 	bl	800623a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002ea0:	e331      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d12e      	bne.n	8002f16 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	333d      	adds	r3, #61	; 0x3d
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	f040 8313 	bne.w	8003506 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	333d      	adds	r3, #61	; 0x3d
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3360      	adds	r3, #96	; 0x60
 8002f00:	2202      	movs	r2, #2
 8002f02:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 f993 	bl	800623a <USB_HC_Halt>
}
 8002f14:	e2f7      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2c:	d112      	bne.n	8002f54 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 f974 	bl	800623a <USB_HC_Halt>
}
 8002f52:	e2d8      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d140      	bne.n	8002fec <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	212c      	movs	r1, #44	; 0x2c
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	335c      	adds	r3, #92	; 0x5c
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d111      	bne.n	8002fb6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	333d      	adds	r3, #61	; 0x3d
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2340      	movs	r3, #64	; 0x40
 8002fb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3361      	adds	r3, #97	; 0x61
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f003 f928 	bl	800623a <USB_HC_Halt>
}
 8002fea:	e28c      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffe:	2b40      	cmp	r3, #64	; 0x40
 8003000:	d12c      	bne.n	800305c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	3361      	adds	r3, #97	; 0x61
 8003010:	2204      	movs	r2, #4
 8003012:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	333d      	adds	r3, #61	; 0x3d
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	335c      	adds	r3, #92	; 0x5c
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f003 f8f9 	bl	800623a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2340      	movs	r3, #64	; 0x40
 8003058:	6093      	str	r3, [r2, #8]
}
 800305a:	e254      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b08      	cmp	r3, #8
 8003070:	d11a      	bne.n	80030a8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	2308      	movs	r3, #8
 8003082:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	3361      	adds	r3, #97	; 0x61
 8003092:	2205      	movs	r2, #5
 8003094:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 f8ca 	bl	800623a <USB_HC_Halt>
}
 80030a6:	e22e      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d140      	bne.n	8003140 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	335c      	adds	r3, #92	; 0x5c
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3361      	adds	r3, #97	; 0x61
 80030de:	2203      	movs	r2, #3
 80030e0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	333d      	adds	r3, #61	; 0x3d
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d112      	bne.n	800311c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	212c      	movs	r1, #44	; 0x2c
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	4413      	add	r3, r2
 8003102:	333c      	adds	r3, #60	; 0x3c
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d108      	bne.n	800311c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	333d      	adds	r3, #61	; 0x3d
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f003 f887 	bl	800623a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	461a      	mov	r2, r3
 800313a:	2310      	movs	r3, #16
 800313c:	6093      	str	r3, [r2, #8]
}
 800313e:	e1e2      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d164      	bne.n	8003220 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d111      	bne.n	8003182 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3361      	adds	r3, #97	; 0x61
 800316c:	2206      	movs	r2, #6
 800316e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f003 f85d 	bl	800623a <USB_HC_Halt>
 8003180:	e044      	b.n	800320c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	335c      	adds	r3, #92	; 0x5c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	202c      	movs	r0, #44	; 0x2c
 800319a:	fb00 f303 	mul.w	r3, r0, r3
 800319e:	440b      	add	r3, r1
 80031a0:	335c      	adds	r3, #92	; 0x5c
 80031a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	335c      	adds	r3, #92	; 0x5c
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d920      	bls.n	80031fa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	335c      	adds	r3, #92	; 0x5c
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3360      	adds	r3, #96	; 0x60
 80031d8:	2204      	movs	r2, #4
 80031da:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	b2d9      	uxtb	r1, r3
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	202c      	movs	r0, #44	; 0x2c
 80031e6:	fb00 f303 	mul.w	r3, r0, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3360      	adds	r3, #96	; 0x60
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f005 fac4 	bl	8008780 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031f8:	e008      	b.n	800320c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3360      	adds	r3, #96	; 0x60
 8003208:	2202      	movs	r2, #2
 800320a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	6093      	str	r3, [r2, #8]
}
 800321e:	e172      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d11b      	bne.n	8003270 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3361      	adds	r3, #97	; 0x61
 8003246:	2208      	movs	r2, #8
 8003248:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f002 fff0 	bl	800623a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003266:	461a      	mov	r2, r3
 8003268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800326c:	6093      	str	r3, [r2, #8]
}
 800326e:	e14a      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b02      	cmp	r3, #2
 8003284:	f040 813f 	bne.w	8003506 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	3361      	adds	r3, #97	; 0x61
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d17d      	bne.n	8003398 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3360      	adds	r3, #96	; 0x60
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	333f      	adds	r3, #63	; 0x3f
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d00a      	beq.n	80032d8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	333f      	adds	r3, #63	; 0x3f
 80032d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	f040 8100 	bne.w	80034d8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d113      	bne.n	8003308 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3355      	adds	r3, #85	; 0x55
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	f083 0301 	eor.w	r3, r3, #1
 80032f4:	b2d8      	uxtb	r0, r3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	3355      	adds	r3, #85	; 0x55
 8003304:	4602      	mov	r2, r0
 8003306:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b01      	cmp	r3, #1
 800330e:	f040 80e3 	bne.w	80034d8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	212c      	movs	r1, #44	; 0x2c
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	334c      	adds	r3, #76	; 0x4c
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80d8 	beq.w	80034d8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	334c      	adds	r3, #76	; 0x4c
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	202c      	movs	r0, #44	; 0x2c
 800333e:	fb00 f202 	mul.w	r2, r0, r2
 8003342:	440a      	add	r2, r1
 8003344:	3240      	adds	r2, #64	; 0x40
 8003346:	8812      	ldrh	r2, [r2, #0]
 8003348:	4413      	add	r3, r2
 800334a:	3b01      	subs	r3, #1
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	202c      	movs	r0, #44	; 0x2c
 8003352:	fb00 f202 	mul.w	r2, r0, r2
 8003356:	440a      	add	r2, r1
 8003358:	3240      	adds	r2, #64	; 0x40
 800335a:	8812      	ldrh	r2, [r2, #0]
 800335c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80b5 	beq.w	80034d8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	3355      	adds	r3, #85	; 0x55
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	f083 0301 	eor.w	r3, r3, #1
 8003382:	b2d8      	uxtb	r0, r3
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3355      	adds	r3, #85	; 0x55
 8003392:	4602      	mov	r2, r0
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	e09f      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	3361      	adds	r3, #97	; 0x61
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d109      	bne.n	80033c0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3360      	adds	r3, #96	; 0x60
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	e08b      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	212c      	movs	r1, #44	; 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	3361      	adds	r3, #97	; 0x61
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d109      	bne.n	80033e8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3360      	adds	r3, #96	; 0x60
 80033e2:	2202      	movs	r2, #2
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	e077      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	212c      	movs	r1, #44	; 0x2c
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3361      	adds	r3, #97	; 0x61
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d109      	bne.n	8003410 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3360      	adds	r3, #96	; 0x60
 800340a:	2205      	movs	r2, #5
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	e063      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	3361      	adds	r3, #97	; 0x61
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b06      	cmp	r3, #6
 8003422:	d009      	beq.n	8003438 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3361      	adds	r3, #97	; 0x61
 8003432:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003434:	2b08      	cmp	r3, #8
 8003436:	d14f      	bne.n	80034d8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	212c      	movs	r1, #44	; 0x2c
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	335c      	adds	r3, #92	; 0x5c
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	202c      	movs	r0, #44	; 0x2c
 8003450:	fb00 f303 	mul.w	r3, r0, r3
 8003454:	440b      	add	r3, r1
 8003456:	335c      	adds	r3, #92	; 0x5c
 8003458:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	335c      	adds	r3, #92	; 0x5c
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d912      	bls.n	8003494 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	335c      	adds	r3, #92	; 0x5c
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3360      	adds	r3, #96	; 0x60
 800348e:	2204      	movs	r2, #4
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e021      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3360      	adds	r3, #96	; 0x60
 80034a2:	2202      	movs	r2, #2
 80034a4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034bc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034c4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d2:	461a      	mov	r2, r3
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e4:	461a      	mov	r2, r3
 80034e6:	2302      	movs	r3, #2
 80034e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	b2d9      	uxtb	r1, r3
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	202c      	movs	r0, #44	; 0x2c
 80034f4:	fb00 f303 	mul.w	r3, r0, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	3360      	adds	r3, #96	; 0x60
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f005 f93d 	bl	8008780 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003506:	bf00      	nop
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b08a      	sub	sp, #40	; 0x28
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	0c5b      	lsrs	r3, r3, #17
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003542:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d004      	beq.n	8003554 <HCD_RXQLVL_IRQHandler+0x46>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b05      	cmp	r3, #5
 800354e:	f000 80a9 	beq.w	80036a4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003552:	e0aa      	b.n	80036aa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80a6 	beq.w	80036a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3344      	adds	r3, #68	; 0x44
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 809b 	beq.w	80036a8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	212c      	movs	r1, #44	; 0x2c
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	4413      	add	r3, r2
 800357e:	3350      	adds	r3, #80	; 0x50
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	441a      	add	r2, r3
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	202c      	movs	r0, #44	; 0x2c
 800358c:	fb00 f303 	mul.w	r3, r0, r3
 8003590:	440b      	add	r3, r1
 8003592:	334c      	adds	r3, #76	; 0x4c
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d87a      	bhi.n	8003690 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	3344      	adds	r3, #68	; 0x44
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	b292      	uxth	r2, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	f002 f998 	bl	80058e8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	3344      	adds	r3, #68	; 0x44
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	441a      	add	r2, r3
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	202c      	movs	r0, #44	; 0x2c
 80035d2:	fb00 f303 	mul.w	r3, r0, r3
 80035d6:	440b      	add	r3, r1
 80035d8:	3344      	adds	r3, #68	; 0x44
 80035da:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3350      	adds	r3, #80	; 0x50
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	441a      	add	r2, r3
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	202c      	movs	r0, #44	; 0x2c
 80035f6:	fb00 f303 	mul.w	r3, r0, r3
 80035fa:	440b      	add	r3, r1
 80035fc:	3350      	adds	r3, #80	; 0x50
 80035fe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	0cdb      	lsrs	r3, r3, #19
 8003610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003614:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	212c      	movs	r1, #44	; 0x2c
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	4413      	add	r3, r2
 8003622:	3340      	adds	r3, #64	; 0x40
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4293      	cmp	r3, r2
 800362c:	d13c      	bne.n	80036a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d039      	beq.n	80036a8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800364a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003652:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	4413      	add	r3, r2
 800365c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3354      	adds	r3, #84	; 0x54
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	f083 0301 	eor.w	r3, r3, #1
 800367a:	b2d8      	uxtb	r0, r3
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3354      	adds	r3, #84	; 0x54
 800368a:	4602      	mov	r2, r0
 800368c:	701a      	strb	r2, [r3, #0]
      break;
 800368e:	e00b      	b.n	80036a8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3360      	adds	r3, #96	; 0x60
 800369e:	2204      	movs	r2, #4
 80036a0:	701a      	strb	r2, [r3, #0]
      break;
 80036a2:	e001      	b.n	80036a8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80036a4:	bf00      	nop
 80036a6:	e000      	b.n	80036aa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80036a8:	bf00      	nop
  }
}
 80036aa:	bf00      	nop
 80036ac:	3728      	adds	r7, #40	; 0x28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b086      	sub	sp, #24
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80036de:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d10b      	bne.n	8003702 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d102      	bne.n	80036fa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f005 f827 	bl	8008748 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b08      	cmp	r3, #8
 800370a:	d132      	bne.n	8003772 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f043 0308 	orr.w	r3, r3, #8
 8003712:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d126      	bne.n	800376c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d113      	bne.n	800374e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800372c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003730:	d106      	bne.n	8003740 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2102      	movs	r1, #2
 8003738:	4618      	mov	r0, r3
 800373a:	f002 fa43 	bl	8005bc4 <USB_InitFSLSPClkSel>
 800373e:	e011      	b.n	8003764 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2101      	movs	r1, #1
 8003746:	4618      	mov	r0, r3
 8003748:	f002 fa3c 	bl	8005bc4 <USB_InitFSLSPClkSel>
 800374c:	e00a      	b.n	8003764 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d106      	bne.n	8003764 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800375c:	461a      	mov	r2, r3
 800375e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003762:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f005 f819 	bl	800879c <HAL_HCD_PortEnabled_Callback>
 800376a:	e002      	b.n	8003772 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f005 f823 	bl	80087b8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b20      	cmp	r3, #32
 800377a:	d103      	bne.n	8003784 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f043 0320 	orr.w	r3, r3, #32
 8003782:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800378a:	461a      	mov	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	6013      	str	r3, [r2, #0]
}
 8003790:	bf00      	nop
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e12b      	b.n	8003a02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fa06 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037fc:	f001 fa20 	bl	8004c40 <HAL_RCC_GetPCLK1Freq>
 8003800:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4a81      	ldr	r2, [pc, #516]	; (8003a0c <HAL_I2C_Init+0x274>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d807      	bhi.n	800381c <HAL_I2C_Init+0x84>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a80      	ldr	r2, [pc, #512]	; (8003a10 <HAL_I2C_Init+0x278>)
 8003810:	4293      	cmp	r3, r2
 8003812:	bf94      	ite	ls
 8003814:	2301      	movls	r3, #1
 8003816:	2300      	movhi	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e006      	b.n	800382a <HAL_I2C_Init+0x92>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a7d      	ldr	r2, [pc, #500]	; (8003a14 <HAL_I2C_Init+0x27c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	bf94      	ite	ls
 8003824:	2301      	movls	r3, #1
 8003826:	2300      	movhi	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0e7      	b.n	8003a02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a78      	ldr	r2, [pc, #480]	; (8003a18 <HAL_I2C_Init+0x280>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0c9b      	lsrs	r3, r3, #18
 800383c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a6a      	ldr	r2, [pc, #424]	; (8003a0c <HAL_I2C_Init+0x274>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d802      	bhi.n	800386c <HAL_I2C_Init+0xd4>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3301      	adds	r3, #1
 800386a:	e009      	b.n	8003880 <HAL_I2C_Init+0xe8>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	4a69      	ldr	r2, [pc, #420]	; (8003a1c <HAL_I2C_Init+0x284>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	099b      	lsrs	r3, r3, #6
 800387e:	3301      	adds	r3, #1
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	430b      	orrs	r3, r1
 8003886:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003892:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	495c      	ldr	r1, [pc, #368]	; (8003a0c <HAL_I2C_Init+0x274>)
 800389c:	428b      	cmp	r3, r1
 800389e:	d819      	bhi.n	80038d4 <HAL_I2C_Init+0x13c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e59      	subs	r1, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ae:	1c59      	adds	r1, r3, #1
 80038b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038b4:	400b      	ands	r3, r1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_I2C_Init+0x138>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1e59      	subs	r1, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ce:	e051      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 80038d0:	2304      	movs	r3, #4
 80038d2:	e04f      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d111      	bne.n	8003900 <HAL_I2C_Init+0x168>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	440b      	add	r3, r1
 80038ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e012      	b.n	8003926 <HAL_I2C_Init+0x18e>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Init+0x196>
 800392a:	2301      	movs	r3, #1
 800392c:	e022      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10e      	bne.n	8003954 <HAL_I2C_Init+0x1bc>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1e58      	subs	r0, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	460b      	mov	r3, r1
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	440b      	add	r3, r1
 8003944:	fbb0 f3f3 	udiv	r3, r0, r3
 8003948:	3301      	adds	r3, #1
 800394a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003952:	e00f      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e58      	subs	r0, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	0099      	lsls	r1, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	6809      	ldr	r1, [r1, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6911      	ldr	r1, [r2, #16]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	000186a0 	.word	0x000186a0
 8003a10:	001e847f 	.word	0x001e847f
 8003a14:	003d08ff 	.word	0x003d08ff
 8003a18:	431bde83 	.word	0x431bde83
 8003a1c:	10624dd3 	.word	0x10624dd3

08003a20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e128      	b.n	8003c84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a90      	ldr	r2, [pc, #576]	; (8003c8c <HAL_I2S_Init+0x26c>)
 8003a4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7fd f907 	bl	8000c60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a68:	f023 030f 	bic.w	r3, r3, #15
 8003a6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2202      	movs	r2, #2
 8003a74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d060      	beq.n	8003b40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a86:	2310      	movs	r3, #16
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	e001      	b.n	8003a90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a8c:	2320      	movs	r3, #32
 8003a8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d802      	bhi.n	8003a9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f001 f9d0 	bl	8004e44 <HAL_RCCEx_GetPeriphCLKFreq>
 8003aa4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aae:	d125      	bne.n	8003afc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d010      	beq.n	8003ada <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	461a      	mov	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	3305      	adds	r3, #5
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	e01f      	b.n	8003b1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	3305      	adds	r3, #5
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	e00e      	b.n	8003b1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	3305      	adds	r3, #5
 8003b18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4a5c      	ldr	r2, [pc, #368]	; (8003c90 <HAL_I2S_Init+0x270>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	08db      	lsrs	r3, r3, #3
 8003b24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e003      	b.n	8003b48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b40:	2302      	movs	r3, #2
 8003b42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d902      	bls.n	8003b54 <HAL_I2S_Init+0x134>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2bff      	cmp	r3, #255	; 0xff
 8003b52:	d907      	bls.n	8003b64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f043 0210 	orr.w	r2, r3, #16
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e08f      	b.n	8003c84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	ea42 0103 	orr.w	r1, r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b82:	f023 030f 	bic.w	r3, r3, #15
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6851      	ldr	r1, [r2, #4]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6892      	ldr	r2, [r2, #8]
 8003b8e:	4311      	orrs	r1, r2
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68d2      	ldr	r2, [r2, #12]
 8003b94:	4311      	orrs	r1, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6992      	ldr	r2, [r2, #24]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d161      	bne.n	8003c74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <HAL_I2S_Init+0x274>)
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a37      	ldr	r2, [pc, #220]	; (8003c98 <HAL_I2S_Init+0x278>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_I2S_Init+0x1a4>
 8003bc0:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <HAL_I2S_Init+0x27c>)
 8003bc2:	e001      	b.n	8003bc8 <HAL_I2S_Init+0x1a8>
 8003bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	4932      	ldr	r1, [pc, #200]	; (8003c98 <HAL_I2S_Init+0x278>)
 8003bd0:	428a      	cmp	r2, r1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_I2S_Init+0x1b8>
 8003bd4:	4a31      	ldr	r2, [pc, #196]	; (8003c9c <HAL_I2S_Init+0x27c>)
 8003bd6:	e001      	b.n	8003bdc <HAL_I2S_Init+0x1bc>
 8003bd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003bdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003be0:	f023 030f 	bic.w	r3, r3, #15
 8003be4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2b      	ldr	r2, [pc, #172]	; (8003c98 <HAL_I2S_Init+0x278>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_I2S_Init+0x1d4>
 8003bf0:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <HAL_I2S_Init+0x27c>)
 8003bf2:	e001      	b.n	8003bf8 <HAL_I2S_Init+0x1d8>
 8003bf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a25      	ldr	r2, [pc, #148]	; (8003c98 <HAL_I2S_Init+0x278>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <HAL_I2S_Init+0x1ea>
 8003c06:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <HAL_I2S_Init+0x27c>)
 8003c08:	e001      	b.n	8003c0e <HAL_I2S_Init+0x1ee>
 8003c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1a:	d003      	beq.n	8003c24 <HAL_I2S_Init+0x204>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d103      	bne.n	8003c2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	e001      	b.n	8003c30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	897b      	ldrh	r3, [r7, #10]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a0d      	ldr	r2, [pc, #52]	; (8003c98 <HAL_I2S_Init+0x278>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <HAL_I2S_Init+0x24c>
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <HAL_I2S_Init+0x27c>)
 8003c6a:	e001      	b.n	8003c70 <HAL_I2S_Init+0x250>
 8003c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c70:	897a      	ldrh	r2, [r7, #10]
 8003c72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	08003d97 	.word	0x08003d97
 8003c90:	cccccccd 	.word	0xcccccccd
 8003c94:	08003ead 	.word	0x08003ead
 8003c98:	40003800 	.word	0x40003800
 8003c9c:	40003400 	.word	0x40003400

08003ca0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	881a      	ldrh	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	1c9a      	adds	r2, r3, #2
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10e      	bne.n	8003d30 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d20:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ffb8 	bl	8003ca0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	1c9a      	adds	r2, r3, #2
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10e      	bne.n	8003d8e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff93 	bl	8003cb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d13a      	bne.n	8003e28 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d109      	bne.n	8003dd0 <I2S_IRQHandler+0x3a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d102      	bne.n	8003dd0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ffb4 	bl	8003d38 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d126      	bne.n	8003e28 <I2S_IRQHandler+0x92>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d11f      	bne.n	8003e28 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003df6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003df8:	2300      	movs	r3, #0
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	f043 0202 	orr.w	r2, r3, #2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ff50 	bl	8003cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d136      	bne.n	8003ea2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d109      	bne.n	8003e52 <I2S_IRQHandler+0xbc>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d102      	bne.n	8003e52 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff45 	bl	8003cdc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d122      	bne.n	8003ea2 <I2S_IRQHandler+0x10c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d11b      	bne.n	8003ea2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e78:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	f043 0204 	orr.w	r2, r3, #4
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff13 	bl	8003cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a92      	ldr	r2, [pc, #584]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ec6:	4b92      	ldr	r3, [pc, #584]	; (8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec8:	e001      	b.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a8b      	ldr	r2, [pc, #556]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d101      	bne.n	8003ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ee4:	4b8a      	ldr	r3, [pc, #552]	; (8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ee6:	e001      	b.n	8003eec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef8:	d004      	beq.n	8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f040 8099 	bne.w	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d107      	bne.n	8003f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f925 	bl	8004168 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d107      	bne.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f9c8 	bl	80042c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d13a      	bne.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d035      	beq.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a6e      	ldr	r2, [pc, #440]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d101      	bne.n	8003f5a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f56:	4b6e      	ldr	r3, [pc, #440]	; (8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f58:	e001      	b.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4969      	ldr	r1, [pc, #420]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f66:	428b      	cmp	r3, r1
 8003f68:	d101      	bne.n	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f6a:	4b69      	ldr	r3, [pc, #420]	; (8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f6c:	e001      	b.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f76:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f043 0202 	orr.w	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fe88 	bl	8003cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	f040 80c3 	bne.w	800414a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80bd 	beq.w	800414a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fde:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a49      	ldr	r2, [pc, #292]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fea:	4b49      	ldr	r3, [pc, #292]	; (8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fec:	e001      	b.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4944      	ldr	r1, [pc, #272]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ffa:	428b      	cmp	r3, r1
 8003ffc:	d101      	bne.n	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ffe:	4b44      	ldr	r3, [pc, #272]	; (8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004000:	e001      	b.n	8004006 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004006:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800400a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800400c:	2300      	movs	r3, #0
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f043 0204 	orr.w	r2, r3, #4
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fe4a 	bl	8003cc8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004034:	e089      	b.n	800414a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b02      	cmp	r3, #2
 800403e:	d107      	bne.n	8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8be 	bl	80041cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b01      	cmp	r3, #1
 8004058:	d107      	bne.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f8fd 	bl	8004264 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d12f      	bne.n	80040d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02a      	beq.n	80040d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800408c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1e      	ldr	r2, [pc, #120]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d101      	bne.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004098:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800409a:	e001      	b.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800409c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4919      	ldr	r1, [pc, #100]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a8:	428b      	cmp	r3, r1
 80040aa:	d101      	bne.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040ac:	4b18      	ldr	r3, [pc, #96]	; (8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ae:	e001      	b.n	80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	f043 0202 	orr.w	r2, r3, #2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fdfa 	bl	8003cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d136      	bne.n	800414c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d031      	beq.n	800414c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a07      	ldr	r2, [pc, #28]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040f2:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040f4:	e001      	b.n	80040fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4902      	ldr	r1, [pc, #8]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004102:	428b      	cmp	r3, r1
 8004104:	d106      	bne.n	8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004106:	4b02      	ldr	r3, [pc, #8]	; (8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004108:	e006      	b.n	8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800410a:	bf00      	nop
 800410c:	40003800 	.word	0x40003800
 8004110:	40003400 	.word	0x40003400
 8004114:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004118:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800411c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800412c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	f043 0204 	orr.w	r2, r3, #4
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff fdc0 	bl	8003cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004148:	e000      	b.n	800414c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800414a:	bf00      	nop
}
 800414c:	bf00      	nop
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	1c99      	adds	r1, r3, #2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6251      	str	r1, [r2, #36]	; 0x24
 800417a:	881a      	ldrh	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d113      	bne.n	80041c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ffc9 	bl	8004154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	1c99      	adds	r1, r3, #2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6251      	str	r1, [r2, #36]	; 0x24
 80041de:	8819      	ldrh	r1, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <I2SEx_TxISR_I2SExt+0x90>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <I2SEx_TxISR_I2SExt+0x22>
 80041ea:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <I2SEx_TxISR_I2SExt+0x94>)
 80041ec:	e001      	b.n	80041f2 <I2SEx_TxISR_I2SExt+0x26>
 80041ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041f2:	460a      	mov	r2, r1
 80041f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d121      	bne.n	8004252 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <I2SEx_TxISR_I2SExt+0x90>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <I2SEx_TxISR_I2SExt+0x50>
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <I2SEx_TxISR_I2SExt+0x94>)
 800421a:	e001      	b.n	8004220 <I2SEx_TxISR_I2SExt+0x54>
 800421c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	490d      	ldr	r1, [pc, #52]	; (800425c <I2SEx_TxISR_I2SExt+0x90>)
 8004228:	428b      	cmp	r3, r1
 800422a:	d101      	bne.n	8004230 <I2SEx_TxISR_I2SExt+0x64>
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <I2SEx_TxISR_I2SExt+0x94>)
 800422e:	e001      	b.n	8004234 <I2SEx_TxISR_I2SExt+0x68>
 8004230:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004234:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004238:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d106      	bne.n	8004252 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff81 	bl	8004154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40003800 	.word	0x40003800
 8004260:	40003400 	.word	0x40003400

08004264 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68d8      	ldr	r0, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	1c99      	adds	r1, r3, #2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800427c:	b282      	uxth	r2, r0
 800427e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d113      	bne.n	80042c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff ff4a 	bl	8004154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a20      	ldr	r2, [pc, #128]	; (8004358 <I2SEx_RxISR_I2SExt+0x90>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <I2SEx_RxISR_I2SExt+0x16>
 80042da:	4b20      	ldr	r3, [pc, #128]	; (800435c <I2SEx_RxISR_I2SExt+0x94>)
 80042dc:	e001      	b.n	80042e2 <I2SEx_RxISR_I2SExt+0x1a>
 80042de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042e2:	68d8      	ldr	r0, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	1c99      	adds	r1, r3, #2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80042ee:	b282      	uxth	r2, r0
 80042f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d121      	bne.n	800434e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a12      	ldr	r2, [pc, #72]	; (8004358 <I2SEx_RxISR_I2SExt+0x90>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d101      	bne.n	8004318 <I2SEx_RxISR_I2SExt+0x50>
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <I2SEx_RxISR_I2SExt+0x94>)
 8004316:	e001      	b.n	800431c <I2SEx_RxISR_I2SExt+0x54>
 8004318:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	490d      	ldr	r1, [pc, #52]	; (8004358 <I2SEx_RxISR_I2SExt+0x90>)
 8004324:	428b      	cmp	r3, r1
 8004326:	d101      	bne.n	800432c <I2SEx_RxISR_I2SExt+0x64>
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <I2SEx_RxISR_I2SExt+0x94>)
 800432a:	e001      	b.n	8004330 <I2SEx_RxISR_I2SExt+0x68>
 800432c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004330:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004334:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d106      	bne.n	800434e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ff03 	bl	8004154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40003800 	.word	0x40003800
 800435c:	40003400 	.word	0x40003400

08004360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e267      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d075      	beq.n	800446a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437e:	4b88      	ldr	r3, [pc, #544]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b04      	cmp	r3, #4
 8004388:	d00c      	beq.n	80043a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438a:	4b85      	ldr	r3, [pc, #532]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004392:	2b08      	cmp	r3, #8
 8004394:	d112      	bne.n	80043bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004396:	4b82      	ldr	r3, [pc, #520]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a2:	d10b      	bne.n	80043bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	4b7e      	ldr	r3, [pc, #504]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d05b      	beq.n	8004468 <HAL_RCC_OscConfig+0x108>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d157      	bne.n	8004468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e242      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c4:	d106      	bne.n	80043d4 <HAL_RCC_OscConfig+0x74>
 80043c6:	4b76      	ldr	r3, [pc, #472]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a75      	ldr	r2, [pc, #468]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e01d      	b.n	8004410 <HAL_RCC_OscConfig+0xb0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x98>
 80043de:	4b70      	ldr	r3, [pc, #448]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6f      	ldr	r2, [pc, #444]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4b6d      	ldr	r3, [pc, #436]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a6c      	ldr	r2, [pc, #432]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e00b      	b.n	8004410 <HAL_RCC_OscConfig+0xb0>
 80043f8:	4b69      	ldr	r3, [pc, #420]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a68      	ldr	r2, [pc, #416]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	4b66      	ldr	r3, [pc, #408]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a65      	ldr	r2, [pc, #404]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 800440a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d013      	beq.n	8004440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fc fe5e 	bl	80010d8 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004420:	f7fc fe5a 	bl	80010d8 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	; 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e207      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	4b5b      	ldr	r3, [pc, #364]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0xc0>
 800443e:	e014      	b.n	800446a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fc fe4a 	bl	80010d8 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004448:	f7fc fe46 	bl	80010d8 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	; 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e1f3      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445a:	4b51      	ldr	r3, [pc, #324]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0xe8>
 8004466:	e000      	b.n	800446a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d063      	beq.n	800453e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004476:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800448a:	2b08      	cmp	r3, #8
 800448c:	d11c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448e:	4b44      	ldr	r3, [pc, #272]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d116      	bne.n	80044c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449a:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_RCC_OscConfig+0x152>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d001      	beq.n	80044b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e1c7      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b2:	4b3b      	ldr	r3, [pc, #236]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4937      	ldr	r1, [pc, #220]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c6:	e03a      	b.n	800453e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d020      	beq.n	8004512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d0:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <HAL_RCC_OscConfig+0x244>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fc fdff 	bl	80010d8 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044de:	f7fc fdfb 	bl	80010d8 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e1a8      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f0:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fc:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4925      	ldr	r1, [pc, #148]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]
 8004510:	e015      	b.n	800453e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <HAL_RCC_OscConfig+0x244>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fc fdde 	bl	80010d8 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004520:	f7fc fdda 	bl	80010d8 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e187      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004532:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d036      	beq.n	80045b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d016      	beq.n	8004580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004552:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <HAL_RCC_OscConfig+0x248>)
 8004554:	2201      	movs	r2, #1
 8004556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fc fdbe 	bl	80010d8 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004560:	f7fc fdba 	bl	80010d8 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e167      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004572:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x200>
 800457e:	e01b      	b.n	80045b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004580:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <HAL_RCC_OscConfig+0x248>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004586:	f7fc fda7 	bl	80010d8 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800458c:	e00e      	b.n	80045ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800458e:	f7fc fda3 	bl	80010d8 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d907      	bls.n	80045ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e150      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
 80045a0:	40023800 	.word	0x40023800
 80045a4:	42470000 	.word	0x42470000
 80045a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ac:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ea      	bne.n	800458e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8097 	beq.w	80046f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ca:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	4b7d      	ldr	r3, [pc, #500]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	4a7c      	ldr	r2, [pc, #496]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6413      	str	r3, [r2, #64]	; 0x40
 80045e6:	4b7a      	ldr	r3, [pc, #488]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f2:	2301      	movs	r3, #1
 80045f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	4b77      	ldr	r3, [pc, #476]	; (80047d4 <HAL_RCC_OscConfig+0x474>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d118      	bne.n	8004634 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004602:	4b74      	ldr	r3, [pc, #464]	; (80047d4 <HAL_RCC_OscConfig+0x474>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a73      	ldr	r2, [pc, #460]	; (80047d4 <HAL_RCC_OscConfig+0x474>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fc fd63 	bl	80010d8 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fc fd5f 	bl	80010d8 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e10c      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <HAL_RCC_OscConfig+0x474>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d106      	bne.n	800464a <HAL_RCC_OscConfig+0x2ea>
 800463c:	4b64      	ldr	r3, [pc, #400]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	4a63      	ldr	r2, [pc, #396]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6713      	str	r3, [r2, #112]	; 0x70
 8004648:	e01c      	b.n	8004684 <HAL_RCC_OscConfig+0x324>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b05      	cmp	r3, #5
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x30c>
 8004652:	4b5f      	ldr	r3, [pc, #380]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	4a5e      	ldr	r2, [pc, #376]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	6713      	str	r3, [r2, #112]	; 0x70
 800465e:	4b5c      	ldr	r3, [pc, #368]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	4a5b      	ldr	r2, [pc, #364]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6713      	str	r3, [r2, #112]	; 0x70
 800466a:	e00b      	b.n	8004684 <HAL_RCC_OscConfig+0x324>
 800466c:	4b58      	ldr	r3, [pc, #352]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	4a57      	ldr	r2, [pc, #348]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	6713      	str	r3, [r2, #112]	; 0x70
 8004678:	4b55      	ldr	r3, [pc, #340]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4a54      	ldr	r2, [pc, #336]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 800467e:	f023 0304 	bic.w	r3, r3, #4
 8004682:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d015      	beq.n	80046b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468c:	f7fc fd24 	bl	80010d8 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004692:	e00a      	b.n	80046aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f7fc fd20 	bl	80010d8 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0cb      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046aa:	4b49      	ldr	r3, [pc, #292]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ee      	beq.n	8004694 <HAL_RCC_OscConfig+0x334>
 80046b6:	e014      	b.n	80046e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b8:	f7fc fd0e 	bl	80010d8 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c0:	f7fc fd0a 	bl	80010d8 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e0b5      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d6:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1ee      	bne.n	80046c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d105      	bne.n	80046f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e8:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	4a38      	ldr	r2, [pc, #224]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a1 	beq.w	8004840 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046fe:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b08      	cmp	r3, #8
 8004708:	d05c      	beq.n	80047c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d141      	bne.n	8004796 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004712:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <HAL_RCC_OscConfig+0x478>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fc fcde 	bl	80010d8 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004720:	f7fc fcda 	bl	80010d8 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e087      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	019b      	lsls	r3, r3, #6
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	3b01      	subs	r3, #1
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	491b      	ldr	r1, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_RCC_OscConfig+0x478>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476e:	f7fc fcb3 	bl	80010d8 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004776:	f7fc fcaf 	bl	80010d8 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e05c      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004788:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x416>
 8004794:	e054      	b.n	8004840 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004796:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <HAL_RCC_OscConfig+0x478>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fc fc9c 	bl	80010d8 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fc fc98 	bl	80010d8 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e045      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x444>
 80047c2:	e03d      	b.n	8004840 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e038      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40007000 	.word	0x40007000
 80047d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCC_OscConfig+0x4ec>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d028      	beq.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d121      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d11a      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004814:	4293      	cmp	r3, r2
 8004816:	d111      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d107      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800

08004850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0cc      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004864:	4b68      	ldr	r3, [pc, #416]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d90c      	bls.n	800488c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b65      	ldr	r3, [pc, #404]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b63      	ldr	r3, [pc, #396]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0b8      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a4:	4b59      	ldr	r3, [pc, #356]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a58      	ldr	r2, [pc, #352]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048bc:	4b53      	ldr	r3, [pc, #332]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a52      	ldr	r2, [pc, #328]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c8:	4b50      	ldr	r3, [pc, #320]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	494d      	ldr	r1, [pc, #308]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d044      	beq.n	8004970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d107      	bne.n	80048fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b47      	ldr	r3, [pc, #284]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d119      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e07f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d003      	beq.n	800490e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490a:	2b03      	cmp	r3, #3
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490e:	4b3f      	ldr	r3, [pc, #252]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e06f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491e:	4b3b      	ldr	r3, [pc, #236]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e067      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492e:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f023 0203 	bic.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4934      	ldr	r1, [pc, #208]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	4313      	orrs	r3, r2
 800493e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004940:	f7fc fbca 	bl	80010d8 <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	e00a      	b.n	800495e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004948:	f7fc fbc6 	bl	80010d8 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e04f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 020c 	and.w	r2, r3, #12
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	429a      	cmp	r2, r3
 800496e:	d1eb      	bne.n	8004948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004970:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d20c      	bcs.n	8004998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e032      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4916      	ldr	r1, [pc, #88]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	490e      	ldr	r1, [pc, #56]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049d6:	f000 f821 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	490a      	ldr	r1, [pc, #40]	; (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 80049e8:	5ccb      	ldrb	r3, [r1, r3]
 80049ea:	fa22 f303 	lsr.w	r3, r2, r3
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fc fb2a 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40023c00 	.word	0x40023c00
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	08008e58 	.word	0x08008e58
 8004a14:	20000000 	.word	0x20000000
 8004a18:	20000004 	.word	0x20000004

08004a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a20:	b094      	sub	sp, #80	; 0x50
 8004a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	647b      	str	r3, [r7, #68]	; 0x44
 8004a28:	2300      	movs	r3, #0
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a34:	4b79      	ldr	r3, [pc, #484]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 030c 	and.w	r3, r3, #12
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x40>
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	f200 80e1 	bhi.w	8004c08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x34>
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a4e:	e0db      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b73      	ldr	r3, [pc, #460]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a54:	e0db      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a56:	4b73      	ldr	r3, [pc, #460]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a5a:	e0d8      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a5c:	4b6f      	ldr	r3, [pc, #444]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a66:	4b6d      	ldr	r3, [pc, #436]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d063      	beq.n	8004b3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a72:	4b6a      	ldr	r3, [pc, #424]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	2200      	movs	r2, #0
 8004a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a84:	633b      	str	r3, [r7, #48]	; 0x30
 8004a86:	2300      	movs	r3, #0
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a8e:	4622      	mov	r2, r4
 8004a90:	462b      	mov	r3, r5
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	0159      	lsls	r1, r3, #5
 8004a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa0:	0150      	lsls	r0, r2, #5
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	1a51      	subs	r1, r2, r1
 8004aaa:	6139      	str	r1, [r7, #16]
 8004aac:	4629      	mov	r1, r5
 8004aae:	eb63 0301 	sbc.w	r3, r3, r1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	018b      	lsls	r3, r1, #6
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aca:	4651      	mov	r1, sl
 8004acc:	018a      	lsls	r2, r1, #6
 8004ace:	4651      	mov	r1, sl
 8004ad0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	eb63 0901 	sbc.w	r9, r3, r1
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aee:	4690      	mov	r8, r2
 8004af0:	4699      	mov	r9, r3
 8004af2:	4623      	mov	r3, r4
 8004af4:	eb18 0303 	adds.w	r3, r8, r3
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	462b      	mov	r3, r5
 8004afc:	eb49 0303 	adc.w	r3, r9, r3
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b0e:	4629      	mov	r1, r5
 8004b10:	024b      	lsls	r3, r1, #9
 8004b12:	4621      	mov	r1, r4
 8004b14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b18:	4621      	mov	r1, r4
 8004b1a:	024a      	lsls	r2, r1, #9
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b22:	2200      	movs	r2, #0
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b2c:	f7fb fb52 	bl	80001d4 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4613      	mov	r3, r2
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	e058      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3a:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	099b      	lsrs	r3, r3, #6
 8004b40:	2200      	movs	r2, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	4611      	mov	r1, r2
 8004b46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	f04f 0000 	mov.w	r0, #0
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	0159      	lsls	r1, r3, #5
 8004b62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b66:	0150      	lsls	r0, r2, #5
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4641      	mov	r1, r8
 8004b6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b72:	4649      	mov	r1, r9
 8004b74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b90:	eb63 050b 	sbc.w	r5, r3, fp
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	00eb      	lsls	r3, r5, #3
 8004b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba2:	00e2      	lsls	r2, r4, #3
 8004ba4:	4614      	mov	r4, r2
 8004ba6:	461d      	mov	r5, r3
 8004ba8:	4643      	mov	r3, r8
 8004baa:	18e3      	adds	r3, r4, r3
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	464b      	mov	r3, r9
 8004bb0:	eb45 0303 	adc.w	r3, r5, r3
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	028b      	lsls	r3, r1, #10
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bcc:	4621      	mov	r1, r4
 8004bce:	028a      	lsls	r2, r1, #10
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	61fa      	str	r2, [r7, #28]
 8004bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be0:	f7fb faf8 	bl	80001d4 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4613      	mov	r3, r2
 8004bea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c06:	e002      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3750      	adds	r7, #80	; 0x50
 8004c14:	46bd      	mov	sp, r7
 8004c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	00f42400 	.word	0x00f42400
 8004c24:	007a1200 	.word	0x007a1200

08004c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20000000 	.word	0x20000000

08004c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c44:	f7ff fff0 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	0a9b      	lsrs	r3, r3, #10
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	4903      	ldr	r1, [pc, #12]	; (8004c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c56:	5ccb      	ldrb	r3, [r1, r3]
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40023800 	.word	0x40023800
 8004c64:	08008e68 	.word	0x08008e68

08004c68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d035      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c90:	4b67      	ldr	r3, [pc, #412]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c96:	f7fc fa1f 	bl	80010d8 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c9e:	f7fc fa1b 	bl	80010d8 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e0ba      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cb0:	4b60      	ldr	r3, [pc, #384]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f0      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	019a      	lsls	r2, r3, #6
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	071b      	lsls	r3, r3, #28
 8004cc8:	495a      	ldr	r1, [pc, #360]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cd0:	4b57      	ldr	r3, [pc, #348]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd6:	f7fc f9ff 	bl	80010d8 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cde:	f7fc f9fb 	bl	80010d8 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e09a      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf0:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8083 	beq.w	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	4b49      	ldr	r3, [pc, #292]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	4a48      	ldr	r2, [pc, #288]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d18:	6413      	str	r3, [r2, #64]	; 0x40
 8004d1a:	4b46      	ldr	r3, [pc, #280]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d26:	4b44      	ldr	r3, [pc, #272]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a43      	ldr	r2, [pc, #268]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d32:	f7fc f9d1 	bl	80010d8 <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d3a:	f7fc f9cd 	bl	80010d8 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e06c      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d4c:	4b3a      	ldr	r3, [pc, #232]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d58:	4b36      	ldr	r3, [pc, #216]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d02f      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d028      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d76:	4b2f      	ldr	r3, [pc, #188]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d80:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d86:	4b2d      	ldr	r3, [pc, #180]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d8c:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d92:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d114      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fc f99b 	bl	80010d8 <HAL_GetTick>
 8004da2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fc f997 	bl	80010d8 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e034      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ee      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd4:	d10d      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dd6:	4b17      	ldr	r3, [pc, #92]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dea:	4912      	ldr	r1, [pc, #72]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	608b      	str	r3, [r1, #8]
 8004df0:	e005      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	4a0f      	ldr	r2, [pc, #60]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004df8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dfc:	6093      	str	r3, [r2, #8]
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0a:	490a      	ldr	r1, [pc, #40]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	7c1a      	ldrb	r2, [r3, #16]
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e22:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	42470068 	.word	0x42470068
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40007000 	.word	0x40007000
 8004e3c:	42470e40 	.word	0x42470e40
 8004e40:	424711e0 	.word	0x424711e0

08004e44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d13e      	bne.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e62:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d12f      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e78:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e7a:	617b      	str	r3, [r7, #20]
          break;
 8004e7c:	e02f      	b.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e8a:	d108      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e8c:	4b18      	ldr	r3, [pc, #96]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e94:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	e007      	b.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e9e:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea6:	4a15      	ldr	r2, [pc, #84]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eac:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004eae:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb4:	099b      	lsrs	r3, r3, #6
 8004eb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	fb02 f303 	mul.w	r3, r2, r3
 8004ec0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec8:	0f1b      	lsrs	r3, r3, #28
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	617b      	str	r3, [r7, #20]
          break;
 8004ed6:	e002      	b.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
          break;
 8004edc:	bf00      	nop
        }
      }
      break;
 8004ede:	bf00      	nop
    }
  }
  return frequency;
 8004ee0:	697b      	ldr	r3, [r7, #20]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	00bb8000 	.word	0x00bb8000
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	00f42400 	.word	0x00f42400

08004f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e07b      	b.n	800500a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d108      	bne.n	8004f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f22:	d009      	beq.n	8004f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	61da      	str	r2, [r3, #28]
 8004f2a:	e005      	b.n	8004f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fb ff42 	bl	8000ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	ea42 0103 	orr.w	r1, r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	0c1b      	lsrs	r3, r3, #16
 8004fd6:	f003 0104 	and.w	r1, r3, #4
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0210 	and.w	r2, r3, #16
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e041      	b.n	80050a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d106      	bne.n	800503e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fb ff17 	bl	8000e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3304      	adds	r3, #4
 800504e:	4619      	mov	r1, r3
 8005050:	4610      	mov	r0, r2
 8005052:	f000 f94f 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d001      	beq.n	80050c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e03c      	b.n	8005142 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <HAL_TIM_Base_Start+0xa0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d018      	beq.n	800510c <HAL_TIM_Base_Start+0x5c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e2:	d013      	beq.n	800510c <HAL_TIM_Base_Start+0x5c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1a      	ldr	r2, [pc, #104]	; (8005154 <HAL_TIM_Base_Start+0xa4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00e      	beq.n	800510c <HAL_TIM_Base_Start+0x5c>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a19      	ldr	r2, [pc, #100]	; (8005158 <HAL_TIM_Base_Start+0xa8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d009      	beq.n	800510c <HAL_TIM_Base_Start+0x5c>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a17      	ldr	r2, [pc, #92]	; (800515c <HAL_TIM_Base_Start+0xac>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d004      	beq.n	800510c <HAL_TIM_Base_Start+0x5c>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a16      	ldr	r2, [pc, #88]	; (8005160 <HAL_TIM_Base_Start+0xb0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d111      	bne.n	8005130 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b06      	cmp	r3, #6
 800511c:	d010      	beq.n	8005140 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0201 	orr.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	e007      	b.n	8005140 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40010000 	.word	0x40010000
 8005154:	40000400 	.word	0x40000400
 8005158:	40000800 	.word	0x40000800
 800515c:	40000c00 	.word	0x40000c00
 8005160:	40014000 	.word	0x40014000

08005164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_TIM_ConfigClockSource+0x1c>
 800517c:	2302      	movs	r3, #2
 800517e:	e0b4      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x186>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800519e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b8:	d03e      	beq.n	8005238 <HAL_TIM_ConfigClockSource+0xd4>
 80051ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051be:	f200 8087 	bhi.w	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c6:	f000 8086 	beq.w	80052d6 <HAL_TIM_ConfigClockSource+0x172>
 80051ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ce:	d87f      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051d0:	2b70      	cmp	r3, #112	; 0x70
 80051d2:	d01a      	beq.n	800520a <HAL_TIM_ConfigClockSource+0xa6>
 80051d4:	2b70      	cmp	r3, #112	; 0x70
 80051d6:	d87b      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051d8:	2b60      	cmp	r3, #96	; 0x60
 80051da:	d050      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x11a>
 80051dc:	2b60      	cmp	r3, #96	; 0x60
 80051de:	d877      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e0:	2b50      	cmp	r3, #80	; 0x50
 80051e2:	d03c      	beq.n	800525e <HAL_TIM_ConfigClockSource+0xfa>
 80051e4:	2b50      	cmp	r3, #80	; 0x50
 80051e6:	d873      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e8:	2b40      	cmp	r3, #64	; 0x40
 80051ea:	d058      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x13a>
 80051ec:	2b40      	cmp	r3, #64	; 0x40
 80051ee:	d86f      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f0:	2b30      	cmp	r3, #48	; 0x30
 80051f2:	d064      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 80051f4:	2b30      	cmp	r3, #48	; 0x30
 80051f6:	d86b      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d060      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d867      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d05c      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 8005204:	2b10      	cmp	r3, #16
 8005206:	d05a      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 8005208:	e062      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6899      	ldr	r1, [r3, #8]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f000 f965 	bl	80054e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800522c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	609a      	str	r2, [r3, #8]
      break;
 8005236:	e04f      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6899      	ldr	r1, [r3, #8]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f000 f94e 	bl	80054e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800525a:	609a      	str	r2, [r3, #8]
      break;
 800525c:	e03c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6859      	ldr	r1, [r3, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	461a      	mov	r2, r3
 800526c:	f000 f8c2 	bl	80053f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2150      	movs	r1, #80	; 0x50
 8005276:	4618      	mov	r0, r3
 8005278:	f000 f91b 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 800527c:	e02c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6859      	ldr	r1, [r3, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	461a      	mov	r2, r3
 800528c:	f000 f8e1 	bl	8005452 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2160      	movs	r1, #96	; 0x60
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f90b 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 800529c:	e01c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f000 f8a2 	bl	80053f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2140      	movs	r1, #64	; 0x40
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 f8fb 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 80052bc:	e00c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f000 f8f2 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 80052ce:	e003      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      break;
 80052d4:	e000      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a34      	ldr	r2, [pc, #208]	; (80053d8 <TIM_Base_SetConfig+0xe4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00f      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005312:	d00b      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a31      	ldr	r2, [pc, #196]	; (80053dc <TIM_Base_SetConfig+0xe8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a30      	ldr	r2, [pc, #192]	; (80053e0 <TIM_Base_SetConfig+0xec>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <TIM_Base_SetConfig+0xf0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d108      	bne.n	800533e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <TIM_Base_SetConfig+0xe4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01b      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d017      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <TIM_Base_SetConfig+0xe8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a21      	ldr	r2, [pc, #132]	; (80053e0 <TIM_Base_SetConfig+0xec>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a20      	ldr	r2, [pc, #128]	; (80053e4 <TIM_Base_SetConfig+0xf0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1f      	ldr	r2, [pc, #124]	; (80053e8 <TIM_Base_SetConfig+0xf4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1e      	ldr	r2, [pc, #120]	; (80053ec <TIM_Base_SetConfig+0xf8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1d      	ldr	r2, [pc, #116]	; (80053f0 <TIM_Base_SetConfig+0xfc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d108      	bne.n	8005390 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a08      	ldr	r2, [pc, #32]	; (80053d8 <TIM_Base_SetConfig+0xe4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d103      	bne.n	80053c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	615a      	str	r2, [r3, #20]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800

080053f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800541e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 030a 	bic.w	r3, r3, #10
 8005430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005452:	b480      	push	{r7}
 8005454:	b087      	sub	sp, #28
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f023 0210 	bic.w	r2, r3, #16
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800547c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	031b      	lsls	r3, r3, #12
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800548e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f043 0307 	orr.w	r3, r3, #7
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	021a      	lsls	r2, r3, #8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	431a      	orrs	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4313      	orrs	r3, r2
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	609a      	str	r2, [r3, #8]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800553c:	2302      	movs	r3, #2
 800553e:	e050      	b.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1c      	ldr	r2, [pc, #112]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d018      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d013      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00e      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d009      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a15      	ldr	r2, [pc, #84]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d004      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a13      	ldr	r2, [pc, #76]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d10c      	bne.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40010000 	.word	0x40010000
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40000800 	.word	0x40000800
 80055fc:	40000c00 	.word	0x40000c00
 8005600:	40014000 	.word	0x40014000

08005604 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005604:	b084      	sub	sp, #16
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	f107 001c 	add.w	r0, r7, #28
 8005612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2b01      	cmp	r3, #1
 800561a:	d122      	bne.n	8005662 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005646:	2b01      	cmp	r3, #1
 8005648:	d105      	bne.n	8005656 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f9c0 	bl	80059dc <USB_CoreReset>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
 8005660:	e01a      	b.n	8005698 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9b4 	bl	80059dc <USB_CoreReset>
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
 800568a:	e005      	b.n	8005698 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	2b01      	cmp	r3, #1
 800569c:	d10b      	bne.n	80056b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f043 0206 	orr.w	r2, r3, #6
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056c2:	b004      	add	sp, #16
 80056c4:	4770      	bx	lr

080056c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f043 0201 	orr.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f023 0201 	bic.w	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d115      	bne.n	8005758 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005738:	2001      	movs	r0, #1
 800573a:	f7fb fcd9 	bl	80010f0 <HAL_Delay>
      ms++;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f93a 	bl	80059be <USB_GetMode>
 800574a:	4603      	mov	r3, r0
 800574c:	2b01      	cmp	r3, #1
 800574e:	d01e      	beq.n	800578e <USB_SetCurrentMode+0x84>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b31      	cmp	r3, #49	; 0x31
 8005754:	d9f0      	bls.n	8005738 <USB_SetCurrentMode+0x2e>
 8005756:	e01a      	b.n	800578e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d115      	bne.n	800578a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800576a:	2001      	movs	r0, #1
 800576c:	f7fb fcc0 	bl	80010f0 <HAL_Delay>
      ms++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3301      	adds	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f921 	bl	80059be <USB_GetMode>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <USB_SetCurrentMode+0x84>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b31      	cmp	r3, #49	; 0x31
 8005786:	d9f0      	bls.n	800576a <USB_SetCurrentMode+0x60>
 8005788:	e001      	b.n	800578e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e005      	b.n	800579a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b32      	cmp	r3, #50	; 0x32
 8005792:	d101      	bne.n	8005798 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3301      	adds	r3, #1
 80057b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a13      	ldr	r2, [pc, #76]	; (8005808 <USB_FlushTxFifo+0x64>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e01b      	b.n	80057fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	daf2      	bge.n	80057b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	019b      	lsls	r3, r3, #6
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3301      	adds	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4a08      	ldr	r2, [pc, #32]	; (8005808 <USB_FlushTxFifo+0x64>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d901      	bls.n	80057ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e006      	b.n	80057fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d0f0      	beq.n	80057dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	00030d40 	.word	0x00030d40

0800580c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3301      	adds	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4a11      	ldr	r2, [pc, #68]	; (8005868 <USB_FlushRxFifo+0x5c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e018      	b.n	800585c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	daf2      	bge.n	8005818 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2210      	movs	r2, #16
 800583a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3301      	adds	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4a08      	ldr	r2, [pc, #32]	; (8005868 <USB_FlushRxFifo+0x5c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e006      	b.n	800585c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	2b10      	cmp	r3, #16
 8005858:	d0f0      	beq.n	800583c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	00030d40 	.word	0x00030d40

0800586c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800586c:	b480      	push	{r7}
 800586e:	b089      	sub	sp, #36	; 0x24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	4611      	mov	r1, r2
 8005878:	461a      	mov	r2, r3
 800587a:	460b      	mov	r3, r1
 800587c:	71fb      	strb	r3, [r7, #7]
 800587e:	4613      	mov	r3, r2
 8005880:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800588a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800588e:	2b00      	cmp	r3, #0
 8005890:	d123      	bne.n	80058da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005892:	88bb      	ldrh	r3, [r7, #4]
 8005894:	3303      	adds	r3, #3
 8005896:	089b      	lsrs	r3, r3, #2
 8005898:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800589a:	2300      	movs	r3, #0
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e018      	b.n	80058d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	031a      	lsls	r2, r3, #12
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ac:	461a      	mov	r2, r3
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	3301      	adds	r3, #1
 80058b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	3301      	adds	r3, #1
 80058be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3301      	adds	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	3301      	adds	r3, #1
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d3e2      	bcc.n	80058a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3724      	adds	r7, #36	; 0x24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b08b      	sub	sp, #44	; 0x2c
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	089b      	lsrs	r3, r3, #2
 8005902:	b29b      	uxth	r3, r3
 8005904:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800590e:	2300      	movs	r3, #0
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	e014      	b.n	800593e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	3301      	adds	r3, #1
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	3301      	adds	r3, #1
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	3301      	adds	r3, #1
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	3301      	adds	r3, #1
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	3301      	adds	r3, #1
 800593c:	623b      	str	r3, [r7, #32]
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	429a      	cmp	r2, r3
 8005944:	d3e6      	bcc.n	8005914 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005946:	8bfb      	ldrh	r3, [r7, #30]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01e      	beq.n	800598a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005956:	461a      	mov	r2, r3
 8005958:	f107 0310 	add.w	r3, r7, #16
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
 800596c:	b2da      	uxtb	r2, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	701a      	strb	r2, [r3, #0]
      i++;
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	3301      	adds	r3, #1
 8005976:	623b      	str	r3, [r7, #32]
      pDest++;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	3301      	adds	r3, #1
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800597e:	8bfb      	ldrh	r3, [r7, #30]
 8005980:	3b01      	subs	r3, #1
 8005982:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005984:	8bfb      	ldrh	r3, [r7, #30]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1ea      	bne.n	8005960 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800598c:	4618      	mov	r0, r3
 800598e:	372c      	adds	r7, #44	; 0x2c
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4013      	ands	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059b0:	68fb      	ldr	r3, [r7, #12]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0301 	and.w	r3, r3, #1
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <USB_CoreReset+0x64>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e01b      	b.n	8005a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	daf2      	bge.n	80059e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f043 0201 	orr.w	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3301      	adds	r3, #1
 8005a16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <USB_CoreReset+0x64>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e006      	b.n	8005a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d0f0      	beq.n	8005a12 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	00030d40 	.word	0x00030d40

08005a44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a44:	b084      	sub	sp, #16
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a64:	461a      	mov	r2, r3
 8005a66:	2300      	movs	r3, #0
 8005a68:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d018      	beq.n	8005acc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10a      	bne.n	8005ab6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	e014      	b.n	8005ae0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ac4:	f023 0304 	bic.w	r3, r3, #4
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e009      	b.n	8005ae0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ada:	f023 0304 	bic.w	r3, r3, #4
 8005ade:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ae0:	2110      	movs	r1, #16
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff fe5e 	bl	80057a4 <USB_FlushTxFifo>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff fe8a 	bl	800580c <USB_FlushRxFifo>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	e015      	b.n	8005b34 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	461a      	mov	r2, r3
 8005b16:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	3301      	adds	r3, #1
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d3e5      	bcc.n	8005b08 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f04f 32ff 	mov.w	r2, #4294967295
 8005b48:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <USB_HostInit+0x16c>)
 8005b62:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a13      	ldr	r2, [pc, #76]	; (8005bb4 <USB_HostInit+0x170>)
 8005b68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b6c:	e009      	b.n	8005b82 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2280      	movs	r2, #128	; 0x80
 8005b72:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <USB_HostInit+0x174>)
 8005b78:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a0f      	ldr	r2, [pc, #60]	; (8005bbc <USB_HostInit+0x178>)
 8005b7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d105      	bne.n	8005b94 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f043 0210 	orr.w	r2, r3, #16
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699a      	ldr	r2, [r3, #24]
 8005b98:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <USB_HostInit+0x17c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bac:	b004      	add	sp, #16
 8005bae:	4770      	bx	lr
 8005bb0:	01000200 	.word	0x01000200
 8005bb4:	00e00300 	.word	0x00e00300
 8005bb8:	00600080 	.word	0x00600080
 8005bbc:	004000e0 	.word	0x004000e0
 8005bc0:	a3200008 	.word	0xa3200008

08005bc4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d107      	bne.n	8005c16 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c12:	6053      	str	r3, [r2, #4]
 8005c14:	e009      	b.n	8005c2a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d106      	bne.n	8005c2a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c22:	461a      	mov	r2, r3
 8005c24:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c28:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c66:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c68:	2064      	movs	r0, #100	; 0x64
 8005c6a:	f7fb fa41 	bl	80010f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c7a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c7c:	200a      	movs	r0, #10
 8005c7e:	f7fb fa37 	bl	80010f0 <HAL_Delay>

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cb0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <USB_DriveVbus+0x44>
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d106      	bne.n	8005cd0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cda:	d109      	bne.n	8005cf0 <USB_DriveVbus+0x64>
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	0c5b      	lsrs	r3, r3, #17
 8005d1c:	f003 0303 	and.w	r3, r3, #3
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	b29b      	uxth	r3, r3
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	70fb      	strb	r3, [r7, #3]
 8005d62:	460b      	mov	r3, r1
 8005d64:	70bb      	strb	r3, [r7, #2]
 8005d66:	4613      	mov	r3, r2
 8005d68:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f04f 33ff 	mov.w	r3, #4294967295
 8005d84:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d87e      	bhi.n	8005e8c <USB_HC_Init+0x13c>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <USB_HC_Init+0x44>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005da5 	.word	0x08005da5
 8005d98:	08005e4f 	.word	0x08005e4f
 8005d9c:	08005da5 	.word	0x08005da5
 8005da0:	08005e11 	.word	0x08005e11
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db0:	461a      	mov	r2, r3
 8005db2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005db6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005db8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	da10      	bge.n	8005de2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dde:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005de0:	e057      	b.n	8005e92 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d051      	beq.n	8005e92 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	78fa      	ldrb	r2, [r7, #3]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e0c:	60d3      	str	r3, [r2, #12]
      break;
 8005e0e:	e040      	b.n	8005e92 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	da34      	bge.n	8005e96 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	78fa      	ldrb	r2, [r7, #3]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e4c:	e023      	b.n	8005e96 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f240 2325 	movw	r3, #549	; 0x225
 8005e60:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	da17      	bge.n	8005e9a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	78fa      	ldrb	r2, [r7, #3]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e84:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e88:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e8a:	e006      	b.n	8005e9a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	77fb      	strb	r3, [r7, #31]
      break;
 8005e90:	e004      	b.n	8005e9c <USB_HC_Init+0x14c>
      break;
 8005e92:	bf00      	nop
 8005e94:	e002      	b.n	8005e9c <USB_HC_Init+0x14c>
      break;
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <USB_HC_Init+0x14c>
      break;
 8005e9a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	78fa      	ldrb	r2, [r7, #3]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb6:	f043 0302 	orr.w	r3, r3, #2
 8005eba:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec2:	699a      	ldr	r2, [r3, #24]
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	2101      	movs	r1, #1
 8005ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed0:	6939      	ldr	r1, [r7, #16]
 8005ed2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ee6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da03      	bge.n	8005ef6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	e001      	b.n	8005efa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff feff 	bl	8005cfe <USB_GetHostSpeed>
 8005f00:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d106      	bne.n	8005f18 <USB_HC_Init+0x1c8>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d003      	beq.n	8005f18 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e001      	b.n	8005f1c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f1c:	787b      	ldrb	r3, [r7, #1]
 8005f1e:	059b      	lsls	r3, r3, #22
 8005f20:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f24:	78bb      	ldrb	r3, [r7, #2]
 8005f26:	02db      	lsls	r3, r3, #11
 8005f28:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f2c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f32:	049b      	lsls	r3, r3, #18
 8005f34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f3a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	0159      	lsls	r1, r3, #5
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	440b      	add	r3, r1
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f52:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f58:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d003      	beq.n	8005f6a <USB_HC_Init+0x21a>
 8005f62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d10f      	bne.n	8005f8a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	78fa      	ldrb	r2, [r7, #3]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f88:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08c      	sub	sp, #48	; 0x30
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fb0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d02d      	beq.n	800601a <USB_HC_StartXfer+0x86>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	791b      	ldrb	r3, [r3, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d129      	bne.n	800601a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d117      	bne.n	8005ffc <USB_HC_StartXfer+0x68>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	79db      	ldrb	r3, [r3, #7]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <USB_HC_StartXfer+0x48>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	79db      	ldrb	r3, [r3, #7]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d10f      	bne.n	8005ffc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	6a3a      	ldr	r2, [r7, #32]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10b      	bne.n	800601a <USB_HC_StartXfer+0x86>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	795b      	ldrb	r3, [r3, #5]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d107      	bne.n	800601a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	4619      	mov	r1, r3
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fa0f 	bl	8006434 <USB_DoPing>
      return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e0f8      	b.n	800620c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d018      	beq.n	8006054 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	8912      	ldrh	r2, [r2, #8]
 800602a:	4413      	add	r3, r2
 800602c:	3b01      	subs	r3, #1
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	8912      	ldrh	r2, [r2, #8]
 8006032:	fbb3 f3f2 	udiv	r3, r3, r2
 8006036:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006038:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800603a:	8b7b      	ldrh	r3, [r7, #26]
 800603c:	429a      	cmp	r2, r3
 800603e:	d90b      	bls.n	8006058 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006040:	8b7b      	ldrh	r3, [r7, #26]
 8006042:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006044:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	8912      	ldrh	r2, [r2, #8]
 800604a:	fb03 f202 	mul.w	r2, r3, r2
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	611a      	str	r2, [r3, #16]
 8006052:	e001      	b.n	8006058 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006054:	2301      	movs	r3, #1
 8006056:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	78db      	ldrb	r3, [r3, #3]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006060:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	8912      	ldrh	r2, [r2, #8]
 8006066:	fb03 f202 	mul.w	r2, r3, r2
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	611a      	str	r2, [r3, #16]
 800606e:	e003      	b.n	8006078 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	695a      	ldr	r2, [r3, #20]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006080:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006082:	04d9      	lsls	r1, r3, #19
 8006084:	4b63      	ldr	r3, [pc, #396]	; (8006214 <USB_HC_StartXfer+0x280>)
 8006086:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006088:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	7a9b      	ldrb	r3, [r3, #10]
 800608e:	075b      	lsls	r3, r3, #29
 8006090:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006094:	69f9      	ldr	r1, [r7, #28]
 8006096:	0148      	lsls	r0, r1, #5
 8006098:	6a39      	ldr	r1, [r7, #32]
 800609a:	4401      	add	r1, r0
 800609c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	68d9      	ldr	r1, [r3, #12]
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ba:	460a      	mov	r2, r1
 80060bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bf0c      	ite	eq
 80060ce:	2301      	moveq	r3, #1
 80060d0:	2300      	movne	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	7e7b      	ldrb	r3, [r7, #25]
 8006106:	075b      	lsls	r3, r3, #29
 8006108:	69f9      	ldr	r1, [r7, #28]
 800610a:	0148      	lsls	r0, r1, #5
 800610c:	6a39      	ldr	r1, [r7, #32]
 800610e:	4401      	add	r1, r0
 8006110:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	4413      	add	r3, r2
 8006120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800612e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	78db      	ldrb	r3, [r3, #3]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	e003      	b.n	800614a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006148:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006150:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615e:	461a      	mov	r2, r3
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	e04e      	b.n	800620c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	78db      	ldrb	r3, [r3, #3]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d149      	bne.n	800620a <USB_HC_StartXfer+0x276>
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d045      	beq.n	800620a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	79db      	ldrb	r3, [r3, #7]
 8006182:	2b03      	cmp	r3, #3
 8006184:	d830      	bhi.n	80061e8 <USB_HC_StartXfer+0x254>
 8006186:	a201      	add	r2, pc, #4	; (adr r2, 800618c <USB_HC_StartXfer+0x1f8>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	0800619d 	.word	0x0800619d
 8006190:	080061c1 	.word	0x080061c1
 8006194:	0800619d 	.word	0x0800619d
 8006198:	080061c1 	.word	0x080061c1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	3303      	adds	r3, #3
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061a6:	8afa      	ldrh	r2, [r7, #22]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d91c      	bls.n	80061ec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f043 0220 	orr.w	r2, r3, #32
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80061be:	e015      	b.n	80061ec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	3303      	adds	r3, #3
 80061c6:	089b      	lsrs	r3, r3, #2
 80061c8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80061ca:	8afa      	ldrh	r2, [r7, #22]
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d90a      	bls.n	80061f0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80061e6:	e003      	b.n	80061f0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80061e8:	bf00      	nop
 80061ea:	e002      	b.n	80061f2 <USB_HC_StartXfer+0x25e>
        break;
 80061ec:	bf00      	nop
 80061ee:	e000      	b.n	80061f2 <USB_HC_StartXfer+0x25e>
        break;
 80061f0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	68d9      	ldr	r1, [r3, #12]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	785a      	ldrb	r2, [r3, #1]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2000      	movs	r0, #0
 8006202:	9000      	str	r0, [sp, #0]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff fb31 	bl	800586c <USB_WritePacket>
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3728      	adds	r7, #40	; 0x28
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	1ff80000 	.word	0x1ff80000

08006218 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	b29b      	uxth	r3, r3
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800623a:	b480      	push	{r7}
 800623c:	b089      	sub	sp, #36	; 0x24
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	0c9b      	lsrs	r3, r3, #18
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	0fdb      	lsrs	r3, r3, #31
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b20      	cmp	r3, #32
 8006288:	d104      	bne.n	8006294 <USB_HC_Halt+0x5a>
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	e0c8      	b.n	8006426 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <USB_HC_Halt+0x66>
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b02      	cmp	r3, #2
 800629e:	d163      	bne.n	8006368 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062be:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f040 80ab 	bne.w	8006424 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d133      	bne.n	8006342 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	440a      	add	r2, r1
 8006310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006318:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3301      	adds	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006326:	d81d      	bhi.n	8006364 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	4413      	add	r3, r2
 8006330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800633a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800633e:	d0ec      	beq.n	800631a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006340:	e070      	b.n	8006424 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	440a      	add	r2, r1
 8006358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800635c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006360:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006362:	e05f      	b.n	8006424 <USB_HC_Halt+0x1ea>
            break;
 8006364:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006366:	e05d      	b.n	8006424 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	440a      	add	r2, r1
 800637e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006382:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006386:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d133      	bne.n	8006400 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063d6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063e4:	d81d      	bhi.n	8006422 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063fc:	d0ec      	beq.n	80063d8 <USB_HC_Halt+0x19e>
 80063fe:	e011      	b.n	8006424 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	4413      	add	r3, r2
 8006408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	440a      	add	r2, r1
 8006416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800641a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	e000      	b.n	8006424 <USB_HC_Halt+0x1ea>
          break;
 8006422:	bf00      	nop
    }
  }

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3724      	adds	r7, #36	; 0x24
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
	...

08006434 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006448:	2301      	movs	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	04da      	lsls	r2, r3, #19
 8006450:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <USB_DoPing+0x74>)
 8006452:	4013      	ands	r3, r2
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	440a      	add	r2, r1
 800645c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006464:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	4413      	add	r3, r2
 800646e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800647c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006484:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006492:	461a      	mov	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	1ff80000 	.word	0x1ff80000

080064ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff f911 	bl	80056e8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064c6:	2110      	movs	r1, #16
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff f96b 	bl	80057a4 <USB_FlushTxFifo>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff f997 	bl	800580c <USB_FlushRxFifo>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	e01f      	b.n	800652e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006504:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800650c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006514:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	4413      	add	r3, r2
 800651e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006522:	461a      	mov	r2, r3
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	3301      	adds	r3, #1
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b0f      	cmp	r3, #15
 8006532:	d9dc      	bls.n	80064ee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006534:	2300      	movs	r3, #0
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	e034      	b.n	80065a4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006550:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006558:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006560:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	4413      	add	r3, r2
 800656a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656e:	461a      	mov	r2, r3
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006580:	d80c      	bhi.n	800659c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006598:	d0ec      	beq.n	8006574 <USB_StopHost+0xc8>
 800659a:	e000      	b.n	800659e <USB_StopHost+0xf2>
        break;
 800659c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	3301      	adds	r3, #1
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2b0f      	cmp	r3, #15
 80065a8:	d9c7      	bls.n	800653a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b0:	461a      	mov	r2, r3
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295
 80065be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff f880 	bl	80056c6 <USB_EnableGlobalInt>

  return ret;
 80065c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b089      	sub	sp, #36	; 0x24
 80065d4:	af04      	add	r7, sp, #16
 80065d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065d8:	2301      	movs	r3, #1
 80065da:	2202      	movs	r2, #2
 80065dc:	2102      	movs	r1, #2
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fc66 	bl	8006eb0 <USBH_FindInterface>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2bff      	cmp	r3, #255	; 0xff
 80065ec:	d002      	beq.n	80065f4 <USBH_CDC_InterfaceInit+0x24>
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d901      	bls.n	80065f8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065f4:	2302      	movs	r3, #2
 80065f6:	e13d      	b.n	8006874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fc3b 	bl	8006e78 <USBH_SelectInterface>
 8006602:	4603      	mov	r3, r0
 8006604:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800660c:	2302      	movs	r3, #2
 800660e:	e131      	b.n	8006874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006616:	2050      	movs	r0, #80	; 0x50
 8006618:	f002 fafa 	bl	8008c10 <malloc>
 800661c:	4603      	mov	r3, r0
 800661e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006630:	2302      	movs	r3, #2
 8006632:	e11f      	b.n	8006874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006634:	2250      	movs	r2, #80	; 0x50
 8006636:	2100      	movs	r1, #0
 8006638:	68b8      	ldr	r0, [r7, #8]
 800663a:	f002 faf9 	bl	8008c30 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	211a      	movs	r1, #26
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	4413      	add	r3, r2
 800664a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b25b      	sxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	da15      	bge.n	8006682 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	211a      	movs	r1, #26
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4413      	add	r3, r2
 8006662:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	211a      	movs	r1, #26
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	785b      	ldrb	r3, [r3, #1]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 ff2c 	bl	80084e6 <USBH_AllocPipe>
 800668e:	4603      	mov	r3, r0
 8006690:	461a      	mov	r2, r3
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	7819      	ldrb	r1, [r3, #0]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	7858      	ldrb	r0, [r3, #1]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	8952      	ldrh	r2, [r2, #10]
 80066ae:	9202      	str	r2, [sp, #8]
 80066b0:	2203      	movs	r2, #3
 80066b2:	9201      	str	r2, [sp, #4]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	4623      	mov	r3, r4
 80066b8:	4602      	mov	r2, r0
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 fee4 	bl	8008488 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2200      	movs	r2, #0
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f002 f9f3 	bl	8008ab4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80066ce:	2300      	movs	r3, #0
 80066d0:	2200      	movs	r2, #0
 80066d2:	210a      	movs	r1, #10
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fbeb 	bl	8006eb0 <USBH_FindInterface>
 80066da:	4603      	mov	r3, r0
 80066dc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	2bff      	cmp	r3, #255	; 0xff
 80066e2:	d002      	beq.n	80066ea <USBH_CDC_InterfaceInit+0x11a>
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d901      	bls.n	80066ee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066ea:	2302      	movs	r3, #2
 80066ec:	e0c2      	b.n	8006874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	211a      	movs	r1, #26
 80066f4:	fb01 f303 	mul.w	r3, r1, r3
 80066f8:	4413      	add	r3, r2
 80066fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b25b      	sxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	da16      	bge.n	8006734 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	211a      	movs	r1, #26
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	4413      	add	r3, r2
 8006712:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006716:	781a      	ldrb	r2, [r3, #0]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	211a      	movs	r1, #26
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	4413      	add	r3, r2
 8006728:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800672c:	881a      	ldrh	r2, [r3, #0]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	835a      	strh	r2, [r3, #26]
 8006732:	e015      	b.n	8006760 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	211a      	movs	r1, #26
 800673a:	fb01 f303 	mul.w	r3, r1, r3
 800673e:	4413      	add	r3, r2
 8006740:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006744:	781a      	ldrb	r2, [r3, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	211a      	movs	r1, #26
 8006750:	fb01 f303 	mul.w	r3, r1, r3
 8006754:	4413      	add	r3, r2
 8006756:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800675a:	881a      	ldrh	r2, [r3, #0]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	211a      	movs	r1, #26
 8006766:	fb01 f303 	mul.w	r3, r1, r3
 800676a:	4413      	add	r3, r2
 800676c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	b25b      	sxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	da16      	bge.n	80067a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	211a      	movs	r1, #26
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	4413      	add	r3, r2
 8006784:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006788:	781a      	ldrb	r2, [r3, #0]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	211a      	movs	r1, #26
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	4413      	add	r3, r2
 800679a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800679e:	881a      	ldrh	r2, [r3, #0]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	835a      	strh	r2, [r3, #26]
 80067a4:	e015      	b.n	80067d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	211a      	movs	r1, #26
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067b6:	781a      	ldrb	r2, [r3, #0]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	211a      	movs	r1, #26
 80067c2:	fb01 f303 	mul.w	r3, r1, r3
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067cc:	881a      	ldrh	r2, [r3, #0]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	7b9b      	ldrb	r3, [r3, #14]
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fe84 	bl	80084e6 <USBH_AllocPipe>
 80067de:	4603      	mov	r3, r0
 80067e0:	461a      	mov	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	7bdb      	ldrb	r3, [r3, #15]
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fe7a 	bl	80084e6 <USBH_AllocPipe>
 80067f2:	4603      	mov	r3, r0
 80067f4:	461a      	mov	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	7b59      	ldrb	r1, [r3, #13]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	7b98      	ldrb	r0, [r3, #14]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	8b12      	ldrh	r2, [r2, #24]
 8006812:	9202      	str	r2, [sp, #8]
 8006814:	2202      	movs	r2, #2
 8006816:	9201      	str	r2, [sp, #4]
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	4623      	mov	r3, r4
 800681c:	4602      	mov	r2, r0
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 fe32 	bl	8008488 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	7b19      	ldrb	r1, [r3, #12]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	7bd8      	ldrb	r0, [r3, #15]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	8b52      	ldrh	r2, [r2, #26]
 800683c:	9202      	str	r2, [sp, #8]
 800683e:	2202      	movs	r2, #2
 8006840:	9201      	str	r2, [sp, #4]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	4623      	mov	r3, r4
 8006846:	4602      	mov	r2, r0
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fe1d 	bl	8008488 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	7b5b      	ldrb	r3, [r3, #13]
 800685a:	2200      	movs	r2, #0
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f002 f928 	bl	8008ab4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	7b1b      	ldrb	r3, [r3, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f002 f921 	bl	8008ab4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	bd90      	pop	{r4, r7, pc}

0800687c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00e      	beq.n	80068b4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 fe12 	bl	80084c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 fe3d 	bl	8008528 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	7b1b      	ldrb	r3, [r3, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00e      	beq.n	80068da <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	7b1b      	ldrb	r3, [r3, #12]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fdff 	bl	80084c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	7b1b      	ldrb	r3, [r3, #12]
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 fe2a 	bl	8008528 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	7b5b      	ldrb	r3, [r3, #13]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00e      	beq.n	8006900 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	7b5b      	ldrb	r3, [r3, #13]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 fdec 	bl	80084c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	7b5b      	ldrb	r3, [r3, #13]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fe17 	bl	8008528 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	4618      	mov	r0, r3
 8006916:	f002 f983 	bl	8008c20 <free>
    phost->pActiveClass->pData = 0U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006920:	2200      	movs	r2, #0
 8006922:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3340      	adds	r3, #64	; 0x40
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f8b1 	bl	8006aae <GetLineCoding>
 800694c:	4603      	mov	r3, r0
 800694e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006950:	7afb      	ldrb	r3, [r7, #11]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800695c:	2102      	movs	r1, #2
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006962:	7afb      	ldrb	r3, [r7, #11]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006974:	2301      	movs	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800698c:	2b04      	cmp	r3, #4
 800698e:	d877      	bhi.n	8006a80 <USBH_CDC_Process+0x114>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <USBH_CDC_Process+0x2c>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069ad 	.word	0x080069ad
 800699c:	080069b3 	.word	0x080069b3
 80069a0:	080069e3 	.word	0x080069e3
 80069a4:	08006a57 	.word	0x08006a57
 80069a8:	08006a65 	.word	0x08006a65
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	73fb      	strb	r3, [r7, #15]
      break;
 80069b0:	e06d      	b.n	8006a8e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f897 	bl	8006aec <SetLineCoding>
 80069be:	4603      	mov	r3, r0
 80069c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069d0:	e058      	b.n	8006a84 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d055      	beq.n	8006a84 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2204      	movs	r2, #4
 80069dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80069e0:	e050      	b.n	8006a84 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	3340      	adds	r3, #64	; 0x40
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f860 	bl	8006aae <GetLineCoding>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069f2:	7bbb      	ldrb	r3, [r7, #14]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d126      	bne.n	8006a46 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0a:	791b      	ldrb	r3, [r3, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d13b      	bne.n	8006a88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d133      	bne.n	8006a88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d12b      	bne.n	8006a88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a38:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d124      	bne.n	8006a88 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f958 	bl	8006cf4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a44:	e020      	b.n	8006a88 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d01d      	beq.n	8006a88 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2204      	movs	r2, #4
 8006a50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a54:	e018      	b.n	8006a88 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f867 	bl	8006b2a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f8da 	bl	8006c16 <CDC_ProcessReception>
      break;
 8006a62:	e014      	b.n	8006a8e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a64:	2100      	movs	r1, #0
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 ffef 	bl	8007a4a <USBH_ClrFeature>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a7e:	e005      	b.n	8006a8c <USBH_CDC_Process+0x120>

    default:
      break;
 8006a80:	bf00      	nop
 8006a82:	e004      	b.n	8006a8e <USBH_CDC_Process+0x122>
      break;
 8006a84:	bf00      	nop
 8006a86:	e002      	b.n	8006a8e <USBH_CDC_Process+0x122>
      break;
 8006a88:	bf00      	nop
 8006a8a:	e000      	b.n	8006a8e <USBH_CDC_Process+0x122>
      break;
 8006a8c:	bf00      	nop

  }

  return status;
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	22a1      	movs	r2, #161	; 0xa1
 8006abc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2221      	movs	r2, #33	; 0x21
 8006ac2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2207      	movs	r2, #7
 8006ad4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2207      	movs	r2, #7
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fa81 	bl	8007fe4 <USBH_CtlReq>
 8006ae2:	4603      	mov	r3, r0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2221      	movs	r2, #33	; 0x21
 8006afa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2207      	movs	r2, #7
 8006b12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2207      	movs	r2, #7
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fa62 	bl	8007fe4 <USBH_CtlReq>
 8006b20:	4603      	mov	r3, r0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af02      	add	r7, sp, #8
 8006b30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d002      	beq.n	8006b50 <CDC_ProcessTransmission+0x26>
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d023      	beq.n	8006b96 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b4e:	e05e      	b.n	8006c0e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	8b12      	ldrh	r2, [r2, #24]
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d90b      	bls.n	8006b74 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	69d9      	ldr	r1, [r3, #28]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8b1a      	ldrh	r2, [r3, #24]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	7b5b      	ldrb	r3, [r3, #13]
 8006b68:	2001      	movs	r0, #1
 8006b6a:	9000      	str	r0, [sp, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 fc48 	bl	8008402 <USBH_BulkSendData>
 8006b72:	e00b      	b.n	8006b8c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	7b5b      	ldrb	r3, [r3, #13]
 8006b82:	2001      	movs	r0, #1
 8006b84:	9000      	str	r0, [sp, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 fc3b 	bl	8008402 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b94:	e03b      	b.n	8006c0e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	7b5b      	ldrb	r3, [r3, #13]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 ff5f 	bl	8008a60 <USBH_LL_GetURBState>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d128      	bne.n	8006bfe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	8b12      	ldrh	r2, [r2, #24]
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d90e      	bls.n	8006bd6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	8b12      	ldrh	r2, [r2, #24]
 8006bc0:	1a9a      	subs	r2, r3, r2
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	8b12      	ldrh	r2, [r2, #24]
 8006bce:	441a      	add	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	61da      	str	r2, [r3, #28]
 8006bd4:	e002      	b.n	8006bdc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bec:	e00e      	b.n	8006c0c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f868 	bl	8006ccc <USBH_CDC_TransmitCallback>
      break;
 8006bfc:	e006      	b.n	8006c0c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006bfe:	7afb      	ldrb	r3, [r7, #11]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d103      	bne.n	8006c0c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c0c:	bf00      	nop
  }
}
 8006c0e:	bf00      	nop
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d002      	beq.n	8006c3c <CDC_ProcessReception+0x26>
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d00e      	beq.n	8006c58 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c3a:	e043      	b.n	8006cc4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	6a19      	ldr	r1, [r3, #32]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	8b5a      	ldrh	r2, [r3, #26]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	7b1b      	ldrb	r3, [r3, #12]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 fbff 	bl	800844c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2204      	movs	r2, #4
 8006c52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c56:	e035      	b.n	8006cc4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	7b1b      	ldrb	r3, [r3, #12]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 fefe 	bl	8008a60 <USBH_LL_GetURBState>
 8006c64:	4603      	mov	r3, r0
 8006c66:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c68:	7cfb      	ldrb	r3, [r7, #19]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d129      	bne.n	8006cc2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	7b1b      	ldrb	r3, [r3, #12]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fe61 	bl	800893c <USBH_LL_GetLastXferSize>
 8006c7a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d016      	beq.n	8006cb4 <CDC_ProcessReception+0x9e>
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	8b5b      	ldrh	r3, [r3, #26]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d910      	bls.n	8006cb4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1ad2      	subs	r2, r2, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	6a1a      	ldr	r2, [r3, #32]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	441a      	add	r2, r3
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2203      	movs	r2, #3
 8006cae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cb2:	e006      	b.n	8006cc2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f80f 	bl	8006ce0 <USBH_CDC_ReceiveCallback>
      break;
 8006cc2:	bf00      	nop
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e029      	b.n	8006d74 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	79fa      	ldrb	r2, [r7, #7]
 8006d24:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f81f 	bl	8006d7c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f001 fd31 	bl	80087d4 <USBH_LL_Init>

  return USBH_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	e009      	b.n	8006da2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	33e0      	adds	r3, #224	; 0xe0
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	2200      	movs	r2, #0
 8006d9a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b0f      	cmp	r3, #15
 8006da6:	d9f2      	bls.n	8006d8e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e009      	b.n	8006dc2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc8:	d3f1      	bcc.n	8006dae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2240      	movs	r2, #64	; 0x40
 8006dee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d016      	beq.n	8006e66 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10e      	bne.n	8006e60 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e48:	1c59      	adds	r1, r3, #1
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	33de      	adds	r3, #222	; 0xde
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]
 8006e5e:	e004      	b.n	8006e6a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e60:	2302      	movs	r3, #2
 8006e62:	73fb      	strb	r3, [r7, #15]
 8006e64:	e001      	b.n	8006e6a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e66:	2302      	movs	r3, #2
 8006e68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e8e:	78fa      	ldrb	r2, [r7, #3]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d204      	bcs.n	8006e9e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006e9c:	e001      	b.n	8006ea2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	4608      	mov	r0, r1
 8006eba:	4611      	mov	r1, r2
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	70fb      	strb	r3, [r7, #3]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	70bb      	strb	r3, [r7, #2]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ed8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006eda:	e025      	b.n	8006f28 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
 8006ede:	221a      	movs	r2, #26
 8006ee0:	fb02 f303 	mul.w	r3, r2, r3
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	3302      	adds	r3, #2
 8006eec:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	795b      	ldrb	r3, [r3, #5]
 8006ef2:	78fa      	ldrb	r2, [r7, #3]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d002      	beq.n	8006efe <USBH_FindInterface+0x4e>
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	2bff      	cmp	r3, #255	; 0xff
 8006efc:	d111      	bne.n	8006f22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f02:	78ba      	ldrb	r2, [r7, #2]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d002      	beq.n	8006f0e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f08:	78bb      	ldrb	r3, [r7, #2]
 8006f0a:	2bff      	cmp	r3, #255	; 0xff
 8006f0c:	d109      	bne.n	8006f22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f12:	787a      	ldrb	r2, [r7, #1]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d002      	beq.n	8006f1e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f18:	787b      	ldrb	r3, [r7, #1]
 8006f1a:	2bff      	cmp	r3, #255	; 0xff
 8006f1c:	d101      	bne.n	8006f22 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	e006      	b.n	8006f30 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	3301      	adds	r3, #1
 8006f26:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d9d6      	bls.n	8006edc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f2e:	23ff      	movs	r3, #255	; 0xff
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 fc81 	bl	800884c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fd9a 	bl	8008a86 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af04      	add	r7, sp, #16
 8006f62:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f64:	2302      	movs	r3, #2
 8006f66:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d102      	bne.n	8006f7e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2203      	movs	r2, #3
 8006f7c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b0b      	cmp	r3, #11
 8006f86:	f200 81be 	bhi.w	8007306 <USBH_Process+0x3aa>
 8006f8a:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <USBH_Process+0x34>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08006fc1 	.word	0x08006fc1
 8006f94:	08006ff3 	.word	0x08006ff3
 8006f98:	0800705b 	.word	0x0800705b
 8006f9c:	080072a1 	.word	0x080072a1
 8006fa0:	08007307 	.word	0x08007307
 8006fa4:	080070ff 	.word	0x080070ff
 8006fa8:	08007247 	.word	0x08007247
 8006fac:	08007135 	.word	0x08007135
 8006fb0:	08007155 	.word	0x08007155
 8006fb4:	08007175 	.word	0x08007175
 8006fb8:	080071b9 	.word	0x080071b9
 8006fbc:	08007289 	.word	0x08007289
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 819e 	beq.w	800730a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006fd4:	20c8      	movs	r0, #200	; 0xc8
 8006fd6:	f001 fd9d 	bl	8008b14 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 fc93 	bl	8008906 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ff0:	e18b      	b.n	800730a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d107      	bne.n	800700c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800700a:	e18d      	b.n	8007328 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007016:	d914      	bls.n	8007042 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800701e:	3301      	adds	r3, #1
 8007020:	b2da      	uxtb	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800702e:	2b03      	cmp	r3, #3
 8007030:	d903      	bls.n	800703a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	220d      	movs	r2, #13
 8007036:	701a      	strb	r2, [r3, #0]
      break;
 8007038:	e176      	b.n	8007328 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	701a      	strb	r2, [r3, #0]
      break;
 8007040:	e172      	b.n	8007328 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007048:	f103 020a 	add.w	r2, r3, #10
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007052:	200a      	movs	r0, #10
 8007054:	f001 fd5e 	bl	8008b14 <USBH_Delay>
      break;
 8007058:	e166      	b.n	8007328 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800706a:	2104      	movs	r1, #4
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007070:	2064      	movs	r0, #100	; 0x64
 8007072:	f001 fd4f 	bl	8008b14 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fc1e 	bl	80088b8 <USBH_LL_GetSpeed>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2205      	movs	r2, #5
 800708a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800708c:	2100      	movs	r1, #0
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 fa29 	bl	80084e6 <USBH_AllocPipe>
 8007094:	4603      	mov	r3, r0
 8007096:	461a      	mov	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800709c:	2180      	movs	r1, #128	; 0x80
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 fa21 	bl	80084e6 <USBH_AllocPipe>
 80070a4:	4603      	mov	r3, r0
 80070a6:	461a      	mov	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7919      	ldrb	r1, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070c0:	b292      	uxth	r2, r2
 80070c2:	9202      	str	r2, [sp, #8]
 80070c4:	2200      	movs	r2, #0
 80070c6:	9201      	str	r2, [sp, #4]
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4603      	mov	r3, r0
 80070cc:	2280      	movs	r2, #128	; 0x80
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 f9da 	bl	8008488 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	7959      	ldrb	r1, [r3, #5]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070e8:	b292      	uxth	r2, r2
 80070ea:	9202      	str	r2, [sp, #8]
 80070ec:	2200      	movs	r2, #0
 80070ee:	9201      	str	r2, [sp, #4]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	4603      	mov	r3, r0
 80070f4:	2200      	movs	r2, #0
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 f9c6 	bl	8008488 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070fc:	e114      	b.n	8007328 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f918 	bl	8007334 <USBH_HandleEnum>
 8007104:	4603      	mov	r3, r0
 8007106:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	f040 80fe 	bne.w	800730e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007120:	2b01      	cmp	r3, #1
 8007122:	d103      	bne.n	800712c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2208      	movs	r2, #8
 8007128:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800712a:	e0f0      	b.n	800730e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2207      	movs	r2, #7
 8007130:	701a      	strb	r2, [r3, #0]
      break;
 8007132:	e0ec      	b.n	800730e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 80e9 	beq.w	8007312 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007146:	2101      	movs	r1, #1
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2208      	movs	r2, #8
 8007150:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007152:	e0de      	b.n	8007312 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800715a:	b29b      	uxth	r3, r3
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fc2c 	bl	80079bc <USBH_SetCfg>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	f040 80d5 	bne.w	8007316 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2209      	movs	r2, #9
 8007170:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007172:	e0d0      	b.n	8007316 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d016      	beq.n	80071b0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007182:	2101      	movs	r1, #1
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fc3c 	bl	8007a02 <USBH_SetFeature>
 800718a:	4603      	mov	r3, r0
 800718c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d103      	bne.n	800719e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	220a      	movs	r2, #10
 800719a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800719c:	e0bd      	b.n	800731a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	f040 80b9 	bne.w	800731a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	220a      	movs	r2, #10
 80071ac:	701a      	strb	r2, [r3, #0]
      break;
 80071ae:	e0b4      	b.n	800731a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	220a      	movs	r2, #10
 80071b4:	701a      	strb	r2, [r3, #0]
      break;
 80071b6:	e0b0      	b.n	800731a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80ad 	beq.w	800731e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071cc:	2300      	movs	r3, #0
 80071ce:	73fb      	strb	r3, [r7, #15]
 80071d0:	e016      	b.n	8007200 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80071d2:	7bfa      	ldrb	r2, [r7, #15]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	32de      	adds	r2, #222	; 0xde
 80071d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071dc:	791a      	ldrb	r2, [r3, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d108      	bne.n	80071fa <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80071e8:	7bfa      	ldrb	r2, [r7, #15]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	32de      	adds	r2, #222	; 0xde
 80071ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80071f8:	e005      	b.n	8007206 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	3301      	adds	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0e5      	beq.n	80071d2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d016      	beq.n	800723e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d109      	bne.n	8007236 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2206      	movs	r2, #6
 8007226:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800722e:	2103      	movs	r1, #3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007234:	e073      	b.n	800731e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	220d      	movs	r2, #13
 800723a:	701a      	strb	r2, [r3, #0]
      break;
 800723c:	e06f      	b.n	800731e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	220d      	movs	r2, #13
 8007242:	701a      	strb	r2, [r3, #0]
      break;
 8007244:	e06b      	b.n	800731e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d017      	beq.n	8007280 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	4798      	blx	r3
 800725c:	4603      	mov	r3, r0
 800725e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	220b      	movs	r2, #11
 800726c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800726e:	e058      	b.n	8007322 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d154      	bne.n	8007322 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	220d      	movs	r2, #13
 800727c:	701a      	strb	r2, [r3, #0]
      break;
 800727e:	e050      	b.n	8007322 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	220d      	movs	r2, #13
 8007284:	701a      	strb	r2, [r3, #0]
      break;
 8007286:	e04c      	b.n	8007322 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d049      	beq.n	8007326 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
      }
      break;
 800729e:	e042      	b.n	8007326 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff fd67 	bl	8006d7c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d009      	beq.n	80072cc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072dc:	2105      	movs	r1, #5
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d107      	bne.n	80072fe <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff fe20 	bl	8006f3c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072fc:	e014      	b.n	8007328 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 faa4 	bl	800884c <USBH_LL_Start>
      break;
 8007304:	e010      	b.n	8007328 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007306:	bf00      	nop
 8007308:	e00e      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 800730a:	bf00      	nop
 800730c:	e00c      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 800730e:	bf00      	nop
 8007310:	e00a      	b.n	8007328 <USBH_Process+0x3cc>
    break;
 8007312:	bf00      	nop
 8007314:	e008      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 8007316:	bf00      	nop
 8007318:	e006      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 800731a:	bf00      	nop
 800731c:	e004      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 800731e:	bf00      	nop
 8007320:	e002      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 8007326:	bf00      	nop
  }
  return USBH_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop

08007334 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af04      	add	r7, sp, #16
 800733a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800733c:	2301      	movs	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007340:	2301      	movs	r3, #1
 8007342:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	2b07      	cmp	r3, #7
 800734a:	f200 81c1 	bhi.w	80076d0 <USBH_HandleEnum+0x39c>
 800734e:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <USBH_HandleEnum+0x20>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	08007375 	.word	0x08007375
 8007358:	08007433 	.word	0x08007433
 800735c:	0800749d 	.word	0x0800749d
 8007360:	0800752b 	.word	0x0800752b
 8007364:	08007595 	.word	0x08007595
 8007368:	08007605 	.word	0x08007605
 800736c:	0800764b 	.word	0x0800764b
 8007370:	08007691 	.word	0x08007691
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007374:	2108      	movs	r1, #8
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa50 	bl	800781c <USBH_Get_DevDesc>
 800737c:	4603      	mov	r3, r0
 800737e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d130      	bne.n	80073e8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	7919      	ldrb	r1, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073aa:	b292      	uxth	r2, r2
 80073ac:	9202      	str	r2, [sp, #8]
 80073ae:	2200      	movs	r2, #0
 80073b0:	9201      	str	r2, [sp, #4]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4603      	mov	r3, r0
 80073b6:	2280      	movs	r2, #128	; 0x80
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 f865 	bl	8008488 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	7959      	ldrb	r1, [r3, #5]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073d2:	b292      	uxth	r2, r2
 80073d4:	9202      	str	r2, [sp, #8]
 80073d6:	2200      	movs	r2, #0
 80073d8:	9201      	str	r2, [sp, #4]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	4603      	mov	r3, r0
 80073de:	2200      	movs	r2, #0
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 f851 	bl	8008488 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073e6:	e175      	b.n	80076d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	f040 8172 	bne.w	80076d4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073f6:	3301      	adds	r3, #1
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007406:	2b03      	cmp	r3, #3
 8007408:	d903      	bls.n	8007412 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	220d      	movs	r2, #13
 800740e:	701a      	strb	r2, [r3, #0]
      break;
 8007410:	e160      	b.n	80076d4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	795b      	ldrb	r3, [r3, #5]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f885 	bl	8008528 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	791b      	ldrb	r3, [r3, #4]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 f87f 	bl	8008528 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]
      break;
 8007430:	e150      	b.n	80076d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007432:	2112      	movs	r1, #18
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f9f1 	bl	800781c <USBH_Get_DevDesc>
 800743a:	4603      	mov	r3, r0
 800743c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800744a:	e145      	b.n	80076d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	2b03      	cmp	r3, #3
 8007450:	f040 8142 	bne.w	80076d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800745a:	3301      	adds	r3, #1
 800745c:	b2da      	uxtb	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800746a:	2b03      	cmp	r3, #3
 800746c:	d903      	bls.n	8007476 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	220d      	movs	r2, #13
 8007472:	701a      	strb	r2, [r3, #0]
      break;
 8007474:	e130      	b.n	80076d8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	795b      	ldrb	r3, [r3, #5]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 f853 	bl	8008528 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	791b      	ldrb	r3, [r3, #4]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 f84d 	bl	8008528 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]
      break;
 800749a:	e11d      	b.n	80076d8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800749c:	2101      	movs	r1, #1
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fa68 	bl	8007974 <USBH_SetAddress>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d132      	bne.n	8007514 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80074ae:	2002      	movs	r0, #2
 80074b0:	f001 fb30 	bl	8008b14 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2203      	movs	r2, #3
 80074c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	7919      	ldrb	r1, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074d6:	b292      	uxth	r2, r2
 80074d8:	9202      	str	r2, [sp, #8]
 80074da:	2200      	movs	r2, #0
 80074dc:	9201      	str	r2, [sp, #4]
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	4603      	mov	r3, r0
 80074e2:	2280      	movs	r2, #128	; 0x80
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 ffcf 	bl	8008488 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	7959      	ldrb	r1, [r3, #5]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074fe:	b292      	uxth	r2, r2
 8007500:	9202      	str	r2, [sp, #8]
 8007502:	2200      	movs	r2, #0
 8007504:	9201      	str	r2, [sp, #4]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	4603      	mov	r3, r0
 800750a:	2200      	movs	r2, #0
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 ffbb 	bl	8008488 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007512:	e0e3      	b.n	80076dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	2b03      	cmp	r3, #3
 8007518:	f040 80e0 	bne.w	80076dc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	220d      	movs	r2, #13
 8007520:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	705a      	strb	r2, [r3, #1]
      break;
 8007528:	e0d8      	b.n	80076dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800752a:	2109      	movs	r1, #9
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f99d 	bl	800786c <USBH_Get_CfgDesc>
 8007532:	4603      	mov	r3, r0
 8007534:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2204      	movs	r2, #4
 8007540:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007542:	e0cd      	b.n	80076e0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	2b03      	cmp	r3, #3
 8007548:	f040 80ca 	bne.w	80076e0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007552:	3301      	adds	r3, #1
 8007554:	b2da      	uxtb	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007562:	2b03      	cmp	r3, #3
 8007564:	d903      	bls.n	800756e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	220d      	movs	r2, #13
 800756a:	701a      	strb	r2, [r3, #0]
      break;
 800756c:	e0b8      	b.n	80076e0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	795b      	ldrb	r3, [r3, #5]
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 ffd7 	bl	8008528 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	791b      	ldrb	r3, [r3, #4]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 ffd1 	bl	8008528 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	701a      	strb	r2, [r3, #0]
      break;
 8007592:	e0a5      	b.n	80076e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f965 	bl	800786c <USBH_Get_CfgDesc>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2205      	movs	r2, #5
 80075b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075b2:	e097      	b.n	80076e4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	f040 8094 	bne.w	80076e4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075c2:	3301      	adds	r3, #1
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d903      	bls.n	80075de <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	220d      	movs	r2, #13
 80075da:	701a      	strb	r2, [r3, #0]
      break;
 80075dc:	e082      	b.n	80076e4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	795b      	ldrb	r3, [r3, #5]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 ff9f 	bl	8008528 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	791b      	ldrb	r3, [r3, #4]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 ff99 	bl	8008528 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
      break;
 8007602:	e06f      	b.n	80076e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800760a:	2b00      	cmp	r3, #0
 800760c:	d019      	beq.n	8007642 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800761a:	23ff      	movs	r3, #255	; 0xff
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f949 	bl	80078b4 <USBH_Get_StringDesc>
 8007622:	4603      	mov	r3, r0
 8007624:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d103      	bne.n	8007634 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2206      	movs	r2, #6
 8007630:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007632:	e059      	b.n	80076e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	2b03      	cmp	r3, #3
 8007638:	d156      	bne.n	80076e8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2206      	movs	r2, #6
 800763e:	705a      	strb	r2, [r3, #1]
      break;
 8007640:	e052      	b.n	80076e8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2206      	movs	r2, #6
 8007646:	705a      	strb	r2, [r3, #1]
      break;
 8007648:	e04e      	b.n	80076e8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007650:	2b00      	cmp	r3, #0
 8007652:	d019      	beq.n	8007688 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007660:	23ff      	movs	r3, #255	; 0xff
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f926 	bl	80078b4 <USBH_Get_StringDesc>
 8007668:	4603      	mov	r3, r0
 800766a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d103      	bne.n	800767a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2207      	movs	r2, #7
 8007676:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007678:	e038      	b.n	80076ec <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d135      	bne.n	80076ec <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2207      	movs	r2, #7
 8007684:	705a      	strb	r2, [r3, #1]
      break;
 8007686:	e031      	b.n	80076ec <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2207      	movs	r2, #7
 800768c:	705a      	strb	r2, [r3, #1]
      break;
 800768e:	e02d      	b.n	80076ec <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007696:	2b00      	cmp	r3, #0
 8007698:	d017      	beq.n	80076ca <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076a6:	23ff      	movs	r3, #255	; 0xff
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f903 	bl	80078b4 <USBH_Get_StringDesc>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d102      	bne.n	80076be <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076bc:	e018      	b.n	80076f0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d115      	bne.n	80076f0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]
      break;
 80076c8:	e012      	b.n	80076f0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
      break;
 80076ce:	e00f      	b.n	80076f0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80076d0:	bf00      	nop
 80076d2:	e00e      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076d4:	bf00      	nop
 80076d6:	e00c      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076d8:	bf00      	nop
 80076da:	e00a      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076dc:	bf00      	nop
 80076de:	e008      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076e0:	bf00      	nop
 80076e2:	e006      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076e4:	bf00      	nop
 80076e6:	e004      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076e8:	bf00      	nop
 80076ea:	e002      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076ec:	bf00      	nop
 80076ee:	e000      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076f0:	bf00      	nop
  }
  return Status;
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f804 	bl	800773e <USBH_HandleSof>
}
 8007736:	bf00      	nop
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b0b      	cmp	r3, #11
 800774e:	d10a      	bne.n	8007766 <USBH_HandleSof+0x28>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d005      	beq.n	8007766 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	4798      	blx	r3
  }
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800777e:	bf00      	nop
}
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800779a:	bf00      	nop
}
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 f844 	bl	8008882 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	791b      	ldrb	r3, [r3, #4]
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fe91 	bl	8008528 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	795b      	ldrb	r3, [r3, #5]
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fe8b 	bl	8008528 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af02      	add	r7, sp, #8
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	b29b      	uxth	r3, r3
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	4613      	mov	r3, r2
 8007836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800783a:	2100      	movs	r1, #0
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f864 	bl	800790a <USBH_GetDescriptor>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007858:	78fa      	ldrb	r2, [r7, #3]
 800785a:	b292      	uxth	r2, r2
 800785c:	4619      	mov	r1, r3
 800785e:	f000 f918 	bl	8007a92 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af02      	add	r7, sp, #8
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	331c      	adds	r3, #28
 800787c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800787e:	887b      	ldrh	r3, [r7, #2]
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007888:	2100      	movs	r1, #0
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f83d 	bl	800790a <USBH_GetDescriptor>
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d107      	bne.n	80078aa <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800789a:	887b      	ldrh	r3, [r7, #2]
 800789c:	461a      	mov	r2, r3
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f987 	bl	8007bb4 <USBH_ParseCfgDesc>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	607a      	str	r2, [r7, #4]
 80078be:	461a      	mov	r2, r3
 80078c0:	460b      	mov	r3, r1
 80078c2:	72fb      	strb	r3, [r7, #11]
 80078c4:	4613      	mov	r3, r2
 80078c6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80078c8:	7afb      	ldrb	r3, [r7, #11]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80078d0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80078d8:	893b      	ldrh	r3, [r7, #8]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	460b      	mov	r3, r1
 80078de:	2100      	movs	r1, #0
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f812 	bl	800790a <USBH_GetDescriptor>
 80078e6:	4603      	mov	r3, r0
 80078e8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d107      	bne.n	8007900 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078f6:	893a      	ldrh	r2, [r7, #8]
 80078f8:	6879      	ldr	r1, [r7, #4]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fb24 	bl	8007f48 <USBH_ParseStringDesc>
  }

  return status;
 8007900:	7dfb      	ldrb	r3, [r7, #23]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	607b      	str	r3, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	72fb      	strb	r3, [r7, #11]
 8007918:	4613      	mov	r3, r2
 800791a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	789b      	ldrb	r3, [r3, #2]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d11c      	bne.n	800795e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800792a:	b2da      	uxtb	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2206      	movs	r2, #6
 8007934:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	893a      	ldrh	r2, [r7, #8]
 800793a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800793c:	893b      	ldrh	r3, [r7, #8]
 800793e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007946:	d104      	bne.n	8007952 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f240 4209 	movw	r2, #1033	; 0x409
 800794e:	829a      	strh	r2, [r3, #20]
 8007950:	e002      	b.n	8007958 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8b3a      	ldrh	r2, [r7, #24]
 800795c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800795e:	8b3b      	ldrh	r3, [r7, #24]
 8007960:	461a      	mov	r2, r3
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 fb3d 	bl	8007fe4 <USBH_CtlReq>
 800796a:	4603      	mov	r3, r0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	789b      	ldrb	r3, [r3, #2]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d10f      	bne.n	80079a8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2205      	movs	r2, #5
 8007992:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	b29a      	uxth	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079a8:	2200      	movs	r2, #0
 80079aa:	2100      	movs	r1, #0
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb19 	bl	8007fe4 <USBH_CtlReq>
 80079b2:	4603      	mov	r3, r0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	789b      	ldrb	r3, [r3, #2]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d10e      	bne.n	80079ee <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2209      	movs	r2, #9
 80079da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	887a      	ldrh	r2, [r7, #2]
 80079e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 faf6 	bl	8007fe4 <USBH_CtlReq>
 80079f8:	4603      	mov	r3, r0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	789b      	ldrb	r3, [r3, #2]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d10f      	bne.n	8007a36 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2203      	movs	r2, #3
 8007a20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a36:	2200      	movs	r2, #0
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fad2 	bl	8007fe4 <USBH_CtlReq>
 8007a40:	4603      	mov	r3, r0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	789b      	ldrb	r3, [r3, #2]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d10f      	bne.n	8007a7e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 faae 	bl	8007fe4 <USBH_CtlReq>
 8007a88:	4603      	mov	r3, r0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b085      	sub	sp, #20
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	781a      	ldrb	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	785a      	ldrb	r2, [r3, #1]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	3302      	adds	r3, #2
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	3303      	adds	r3, #3
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	791a      	ldrb	r2, [r3, #4]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	795a      	ldrb	r2, [r3, #5]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	799a      	ldrb	r2, [r3, #6]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	79da      	ldrb	r2, [r3, #7]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	79db      	ldrb	r3, [r3, #7]
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	dc11      	bgt.n	8007b18 <USBH_ParseDevDesc+0x86>
 8007af4:	2b08      	cmp	r3, #8
 8007af6:	db16      	blt.n	8007b26 <USBH_ParseDevDesc+0x94>
 8007af8:	3b08      	subs	r3, #8
 8007afa:	2201      	movs	r2, #1
 8007afc:	fa02 f303 	lsl.w	r3, r2, r3
 8007b00:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bf14      	ite	ne
 8007b0c:	2301      	movne	r3, #1
 8007b0e:	2300      	moveq	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d102      	bne.n	8007b1c <USBH_ParseDevDesc+0x8a>
 8007b16:	e006      	b.n	8007b26 <USBH_ParseDevDesc+0x94>
 8007b18:	2b40      	cmp	r3, #64	; 0x40
 8007b1a:	d104      	bne.n	8007b26 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	79da      	ldrb	r2, [r3, #7]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	71da      	strb	r2, [r3, #7]
      break;
 8007b24:	e003      	b.n	8007b2e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2240      	movs	r2, #64	; 0x40
 8007b2a:	71da      	strb	r2, [r3, #7]
      break;
 8007b2c:	bf00      	nop
  }

  if (length > 8U)
 8007b2e:	88fb      	ldrh	r3, [r7, #6]
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d939      	bls.n	8007ba8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	3308      	adds	r3, #8
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	3309      	adds	r3, #9
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	021b      	lsls	r3, r3, #8
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	330a      	adds	r3, #10
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	330b      	adds	r3, #11
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	4313      	orrs	r3, r2
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	330c      	adds	r3, #12
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	330d      	adds	r3, #13
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	4313      	orrs	r3, r2
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	7b9a      	ldrb	r2, [r3, #14]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	7bda      	ldrb	r2, [r3, #15]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	7c1a      	ldrb	r2, [r3, #16]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	7c5a      	ldrb	r2, [r3, #17]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	745a      	strb	r2, [r3, #17]
  }
}
 8007ba8:	bf00      	nop
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08c      	sub	sp, #48	; 0x30
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007bc8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	785a      	ldrb	r2, [r3, #1]
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	3302      	adds	r3, #2
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	3303      	adds	r3, #3
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c10:	bf28      	it	cs
 8007c12:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	791a      	ldrb	r2, [r3, #4]
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	795a      	ldrb	r2, [r3, #5]
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	799a      	ldrb	r2, [r3, #6]
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	79da      	ldrb	r2, [r3, #7]
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	7a1a      	ldrb	r2, [r3, #8]
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b09      	cmp	r3, #9
 8007c4a:	d002      	beq.n	8007c52 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	2209      	movs	r2, #9
 8007c50:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	2b09      	cmp	r3, #9
 8007c56:	f240 809d 	bls.w	8007d94 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c5a:	2309      	movs	r3, #9
 8007c5c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c62:	e081      	b.n	8007d68 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c64:	f107 0316 	add.w	r3, r7, #22
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c6c:	f000 f99f 	bl	8007fae <USBH_GetNextDesc>
 8007c70:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	785b      	ldrb	r3, [r3, #1]
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d176      	bne.n	8007d68 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b09      	cmp	r3, #9
 8007c80:	d002      	beq.n	8007c88 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	2209      	movs	r2, #9
 8007c86:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c8c:	221a      	movs	r2, #26
 8007c8e:	fb02 f303 	mul.w	r3, r2, r3
 8007c92:	3308      	adds	r3, #8
 8007c94:	6a3a      	ldr	r2, [r7, #32]
 8007c96:	4413      	add	r3, r2
 8007c98:	3302      	adds	r3, #2
 8007c9a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c9e:	69f8      	ldr	r0, [r7, #28]
 8007ca0:	f000 f87e 	bl	8007da0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007cae:	e043      	b.n	8007d38 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007cb0:	f107 0316 	add.w	r3, r7, #22
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb8:	f000 f979 	bl	8007fae <USBH_GetNextDesc>
 8007cbc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b05      	cmp	r3, #5
 8007cc4:	d138      	bne.n	8007d38 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	795b      	ldrb	r3, [r3, #5]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d10f      	bne.n	8007cee <USBH_ParseCfgDesc+0x13a>
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	799b      	ldrb	r3, [r3, #6]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d10b      	bne.n	8007cee <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	79db      	ldrb	r3, [r3, #7]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10f      	bne.n	8007cfe <USBH_ParseCfgDesc+0x14a>
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b09      	cmp	r3, #9
 8007ce4:	d00b      	beq.n	8007cfe <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	2209      	movs	r2, #9
 8007cea:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cec:	e007      	b.n	8007cfe <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b07      	cmp	r3, #7
 8007cf4:	d004      	beq.n	8007d00 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	2207      	movs	r2, #7
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	e000      	b.n	8007d00 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cfe:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d04:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d08:	3201      	adds	r2, #1
 8007d0a:	00d2      	lsls	r2, r2, #3
 8007d0c:	211a      	movs	r1, #26
 8007d0e:	fb01 f303 	mul.w	r3, r1, r3
 8007d12:	4413      	add	r3, r2
 8007d14:	3308      	adds	r3, #8
 8007d16:	6a3a      	ldr	r2, [r7, #32]
 8007d18:	4413      	add	r3, r2
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d20:	69b9      	ldr	r1, [r7, #24]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 f86b 	bl	8007dfe <USBH_ParseEPDesc>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007d2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d32:	3301      	adds	r3, #1
 8007d34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	791b      	ldrb	r3, [r3, #4]
 8007d3c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d204      	bcs.n	8007d4e <USBH_ParseCfgDesc+0x19a>
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	885a      	ldrh	r2, [r3, #2]
 8007d48:	8afb      	ldrh	r3, [r7, #22]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d8b0      	bhi.n	8007cb0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	791b      	ldrb	r3, [r3, #4]
 8007d52:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d201      	bcs.n	8007d5e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e01c      	b.n	8007d98 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d62:	3301      	adds	r3, #1
 8007d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d805      	bhi.n	8007d7c <USBH_ParseCfgDesc+0x1c8>
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	885a      	ldrh	r2, [r3, #2]
 8007d74:	8afb      	ldrh	r3, [r7, #22]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	f63f af74 	bhi.w	8007c64 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	791b      	ldrb	r3, [r3, #4]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	bf28      	it	cs
 8007d84:	2302      	movcs	r3, #2
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d201      	bcs.n	8007d94 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e001      	b.n	8007d98 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007d94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3730      	adds	r7, #48	; 0x30
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781a      	ldrb	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	785a      	ldrb	r2, [r3, #1]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	789a      	ldrb	r2, [r3, #2]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	78da      	ldrb	r2, [r3, #3]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	791a      	ldrb	r2, [r3, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	795a      	ldrb	r2, [r3, #5]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	799a      	ldrb	r2, [r3, #6]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	79da      	ldrb	r2, [r3, #7]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	7a1a      	ldrb	r2, [r3, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	721a      	strb	r2, [r3, #8]
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b087      	sub	sp, #28
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	781a      	ldrb	r2, [r3, #0]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	785a      	ldrb	r2, [r3, #1]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	789a      	ldrb	r2, [r3, #2]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	78da      	ldrb	r2, [r3, #3]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3304      	adds	r3, #4
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3305      	adds	r3, #5
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	4313      	orrs	r3, r2
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	799a      	ldrb	r2, [r3, #6]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	889b      	ldrh	r3, [r3, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	75fb      	strb	r3, [r7, #23]
 8007e5e:	e033      	b.n	8007ec8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	889b      	ldrh	r3, [r3, #4]
 8007e64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e68:	f023 0307 	bic.w	r3, r3, #7
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	889b      	ldrh	r3, [r3, #4]
 8007e76:	b21a      	sxth	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	b299      	uxth	r1, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3305      	adds	r3, #5
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d110      	bne.n	8007eba <USBH_ParseEPDesc+0xbc>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	b299      	uxth	r1, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3305      	adds	r3, #5
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	430b      	orrs	r3, r1
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	b21b      	sxth	r3, r3
 8007eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eb6:	b21b      	sxth	r3, r3
 8007eb8:	e001      	b.n	8007ebe <USBH_ParseEPDesc+0xc0>
 8007eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	b21b      	sxth	r3, r3
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d116      	bne.n	8007f00 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	78db      	ldrb	r3, [r3, #3]
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d005      	beq.n	8007eea <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	78db      	ldrb	r3, [r3, #3]
 8007ee2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d127      	bne.n	8007f3a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	799b      	ldrb	r3, [r3, #6]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <USBH_ParseEPDesc+0xfc>
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	799b      	ldrb	r3, [r3, #6]
 8007ef6:	2b10      	cmp	r3, #16
 8007ef8:	d91f      	bls.n	8007f3a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007efa:	2303      	movs	r3, #3
 8007efc:	75fb      	strb	r3, [r7, #23]
 8007efe:	e01c      	b.n	8007f3a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	78db      	ldrb	r3, [r3, #3]
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d10a      	bne.n	8007f22 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	799b      	ldrb	r3, [r3, #6]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <USBH_ParseEPDesc+0x11e>
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	799b      	ldrb	r3, [r3, #6]
 8007f18:	2b10      	cmp	r3, #16
 8007f1a:	d90e      	bls.n	8007f3a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	75fb      	strb	r3, [r7, #23]
 8007f20:	e00b      	b.n	8007f3a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	78db      	ldrb	r3, [r3, #3]
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d105      	bne.n	8007f3a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	799b      	ldrb	r3, [r3, #6]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f36:	2303      	movs	r3, #3
 8007f38:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	4613      	mov	r3, r2
 8007f54:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d120      	bne.n	8007fa2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	1e9a      	subs	r2, r3, #2
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	bf28      	it	cs
 8007f6c:	4613      	movcs	r3, r2
 8007f6e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3302      	adds	r3, #2
 8007f74:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007f76:	2300      	movs	r3, #0
 8007f78:	82fb      	strh	r3, [r7, #22]
 8007f7a:	e00b      	b.n	8007f94 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007f7c:	8afb      	ldrh	r3, [r7, #22]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	781a      	ldrb	r2, [r3, #0]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007f8e:	8afb      	ldrh	r3, [r7, #22]
 8007f90:	3302      	adds	r3, #2
 8007f92:	82fb      	strh	r3, [r7, #22]
 8007f94:	8afa      	ldrh	r2, [r7, #22]
 8007f96:	8abb      	ldrh	r3, [r7, #20]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d3ef      	bcc.n	8007f7c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	701a      	strb	r2, [r3, #0]
  }
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	881a      	ldrh	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	789b      	ldrb	r3, [r3, #2]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d002      	beq.n	8008004 <USBH_CtlReq+0x20>
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d00f      	beq.n	8008022 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008002:	e027      	b.n	8008054 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	88fa      	ldrh	r2, [r7, #6]
 800800e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2202      	movs	r2, #2
 800801a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800801c:	2301      	movs	r3, #1
 800801e:	75fb      	strb	r3, [r7, #23]
      break;
 8008020:	e018      	b.n	8008054 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 f81c 	bl	8008060 <USBH_HandleControl>
 8008028:	4603      	mov	r3, r0
 800802a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <USBH_CtlReq+0x54>
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	2b03      	cmp	r3, #3
 8008036:	d106      	bne.n	8008046 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	761a      	strb	r2, [r3, #24]
      break;
 8008044:	e005      	b.n	8008052 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	2b02      	cmp	r3, #2
 800804a:	d102      	bne.n	8008052 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2201      	movs	r2, #1
 8008050:	709a      	strb	r2, [r3, #2]
      break;
 8008052:	bf00      	nop
  }
  return status;
 8008054:	7dfb      	ldrb	r3, [r7, #23]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af02      	add	r7, sp, #8
 8008066:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008068:	2301      	movs	r3, #1
 800806a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800806c:	2300      	movs	r3, #0
 800806e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	7e1b      	ldrb	r3, [r3, #24]
 8008074:	3b01      	subs	r3, #1
 8008076:	2b0a      	cmp	r3, #10
 8008078:	f200 8156 	bhi.w	8008328 <USBH_HandleControl+0x2c8>
 800807c:	a201      	add	r2, pc, #4	; (adr r2, 8008084 <USBH_HandleControl+0x24>)
 800807e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008082:	bf00      	nop
 8008084:	080080b1 	.word	0x080080b1
 8008088:	080080cb 	.word	0x080080cb
 800808c:	08008135 	.word	0x08008135
 8008090:	0800815b 	.word	0x0800815b
 8008094:	08008193 	.word	0x08008193
 8008098:	080081bd 	.word	0x080081bd
 800809c:	0800820f 	.word	0x0800820f
 80080a0:	08008231 	.word	0x08008231
 80080a4:	0800826d 	.word	0x0800826d
 80080a8:	08008293 	.word	0x08008293
 80080ac:	080082d1 	.word	0x080082d1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f103 0110 	add.w	r1, r3, #16
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	795b      	ldrb	r3, [r3, #5]
 80080ba:	461a      	mov	r2, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f943 	bl	8008348 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2202      	movs	r2, #2
 80080c6:	761a      	strb	r2, [r3, #24]
      break;
 80080c8:	e139      	b.n	800833e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	795b      	ldrb	r3, [r3, #5]
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fcc5 	bl	8008a60 <USBH_LL_GetURBState>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d11e      	bne.n	800811e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	7c1b      	ldrb	r3, [r3, #16]
 80080e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080e8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	8adb      	ldrh	r3, [r3, #22]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00a      	beq.n	8008108 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80080f2:	7b7b      	ldrb	r3, [r7, #13]
 80080f4:	2b80      	cmp	r3, #128	; 0x80
 80080f6:	d103      	bne.n	8008100 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2203      	movs	r2, #3
 80080fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080fe:	e115      	b.n	800832c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2205      	movs	r2, #5
 8008104:	761a      	strb	r2, [r3, #24]
      break;
 8008106:	e111      	b.n	800832c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008108:	7b7b      	ldrb	r3, [r7, #13]
 800810a:	2b80      	cmp	r3, #128	; 0x80
 800810c:	d103      	bne.n	8008116 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2209      	movs	r2, #9
 8008112:	761a      	strb	r2, [r3, #24]
      break;
 8008114:	e10a      	b.n	800832c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2207      	movs	r2, #7
 800811a:	761a      	strb	r2, [r3, #24]
      break;
 800811c:	e106      	b.n	800832c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b04      	cmp	r3, #4
 8008122:	d003      	beq.n	800812c <USBH_HandleControl+0xcc>
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2b02      	cmp	r3, #2
 8008128:	f040 8100 	bne.w	800832c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	220b      	movs	r2, #11
 8008130:	761a      	strb	r2, [r3, #24]
      break;
 8008132:	e0fb      	b.n	800832c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800813a:	b29a      	uxth	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6899      	ldr	r1, [r3, #8]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	899a      	ldrh	r2, [r3, #12]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	791b      	ldrb	r3, [r3, #4]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f93a 	bl	80083c6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2204      	movs	r2, #4
 8008156:	761a      	strb	r2, [r3, #24]
      break;
 8008158:	e0f1      	b.n	800833e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	791b      	ldrb	r3, [r3, #4]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fc7d 	bl	8008a60 <USBH_LL_GetURBState>
 8008166:	4603      	mov	r3, r0
 8008168:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d102      	bne.n	8008176 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2209      	movs	r2, #9
 8008174:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b05      	cmp	r3, #5
 800817a:	d102      	bne.n	8008182 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800817c:	2303      	movs	r3, #3
 800817e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008180:	e0d6      	b.n	8008330 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	2b04      	cmp	r3, #4
 8008186:	f040 80d3 	bne.w	8008330 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	220b      	movs	r2, #11
 800818e:	761a      	strb	r2, [r3, #24]
      break;
 8008190:	e0ce      	b.n	8008330 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6899      	ldr	r1, [r3, #8]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	899a      	ldrh	r2, [r3, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	795b      	ldrb	r3, [r3, #5]
 800819e:	2001      	movs	r0, #1
 80081a0:	9000      	str	r0, [sp, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f8ea 	bl	800837c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2206      	movs	r2, #6
 80081b8:	761a      	strb	r2, [r3, #24]
      break;
 80081ba:	e0c0      	b.n	800833e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	795b      	ldrb	r3, [r3, #5]
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fc4c 	bl	8008a60 <USBH_LL_GetURBState>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d103      	bne.n	80081da <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2207      	movs	r2, #7
 80081d6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081d8:	e0ac      	b.n	8008334 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b05      	cmp	r3, #5
 80081de:	d105      	bne.n	80081ec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	220c      	movs	r2, #12
 80081e4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80081e6:	2303      	movs	r3, #3
 80081e8:	73fb      	strb	r3, [r7, #15]
      break;
 80081ea:	e0a3      	b.n	8008334 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d103      	bne.n	80081fa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2205      	movs	r2, #5
 80081f6:	761a      	strb	r2, [r3, #24]
      break;
 80081f8:	e09c      	b.n	8008334 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	f040 8099 	bne.w	8008334 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	220b      	movs	r2, #11
 8008206:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008208:	2302      	movs	r3, #2
 800820a:	73fb      	strb	r3, [r7, #15]
      break;
 800820c:	e092      	b.n	8008334 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	791b      	ldrb	r3, [r3, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	2100      	movs	r1, #0
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f8d5 	bl	80083c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008222:	b29a      	uxth	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2208      	movs	r2, #8
 800822c:	761a      	strb	r2, [r3, #24]

      break;
 800822e:	e086      	b.n	800833e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	791b      	ldrb	r3, [r3, #4]
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fc12 	bl	8008a60 <USBH_LL_GetURBState>
 800823c:	4603      	mov	r3, r0
 800823e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d105      	bne.n	8008252 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	220d      	movs	r2, #13
 800824a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008250:	e072      	b.n	8008338 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b04      	cmp	r3, #4
 8008256:	d103      	bne.n	8008260 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	220b      	movs	r2, #11
 800825c:	761a      	strb	r2, [r3, #24]
      break;
 800825e:	e06b      	b.n	8008338 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b05      	cmp	r3, #5
 8008264:	d168      	bne.n	8008338 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008266:	2303      	movs	r3, #3
 8008268:	73fb      	strb	r3, [r7, #15]
      break;
 800826a:	e065      	b.n	8008338 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	795b      	ldrb	r3, [r3, #5]
 8008270:	2201      	movs	r2, #1
 8008272:	9200      	str	r2, [sp, #0]
 8008274:	2200      	movs	r2, #0
 8008276:	2100      	movs	r1, #0
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f87f 	bl	800837c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008284:	b29a      	uxth	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	220a      	movs	r2, #10
 800828e:	761a      	strb	r2, [r3, #24]
      break;
 8008290:	e055      	b.n	800833e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	795b      	ldrb	r3, [r3, #5]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fbe1 	bl	8008a60 <USBH_LL_GetURBState>
 800829e:	4603      	mov	r3, r0
 80082a0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d105      	bne.n	80082b4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	220d      	movs	r2, #13
 80082b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082b2:	e043      	b.n	800833c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d103      	bne.n	80082c2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2209      	movs	r2, #9
 80082be:	761a      	strb	r2, [r3, #24]
      break;
 80082c0:	e03c      	b.n	800833c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d139      	bne.n	800833c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	220b      	movs	r2, #11
 80082cc:	761a      	strb	r2, [r3, #24]
      break;
 80082ce:	e035      	b.n	800833c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	7e5b      	ldrb	r3, [r3, #25]
 80082d4:	3301      	adds	r3, #1
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	765a      	strb	r2, [r3, #25]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	7e5b      	ldrb	r3, [r3, #25]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d806      	bhi.n	80082f2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80082f0:	e025      	b.n	800833e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082f8:	2106      	movs	r1, #6
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	795b      	ldrb	r3, [r3, #5]
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f90c 	bl	8008528 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	791b      	ldrb	r3, [r3, #4]
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f906 	bl	8008528 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008322:	2302      	movs	r3, #2
 8008324:	73fb      	strb	r3, [r7, #15]
      break;
 8008326:	e00a      	b.n	800833e <USBH_HandleControl+0x2de>

    default:
      break;
 8008328:	bf00      	nop
 800832a:	e008      	b.n	800833e <USBH_HandleControl+0x2de>
      break;
 800832c:	bf00      	nop
 800832e:	e006      	b.n	800833e <USBH_HandleControl+0x2de>
      break;
 8008330:	bf00      	nop
 8008332:	e004      	b.n	800833e <USBH_HandleControl+0x2de>
      break;
 8008334:	bf00      	nop
 8008336:	e002      	b.n	800833e <USBH_HandleControl+0x2de>
      break;
 8008338:	bf00      	nop
 800833a:	e000      	b.n	800833e <USBH_HandleControl+0x2de>
      break;
 800833c:	bf00      	nop
  }

  return status;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af04      	add	r7, sp, #16
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008356:	79f9      	ldrb	r1, [r7, #7]
 8008358:	2300      	movs	r3, #0
 800835a:	9303      	str	r3, [sp, #12]
 800835c:	2308      	movs	r3, #8
 800835e:	9302      	str	r3, [sp, #8]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	9301      	str	r3, [sp, #4]
 8008364:	2300      	movs	r3, #0
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	2300      	movs	r3, #0
 800836a:	2200      	movs	r2, #0
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 fb46 	bl	80089fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af04      	add	r7, sp, #16
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	4611      	mov	r1, r2
 8008388:	461a      	mov	r2, r3
 800838a:	460b      	mov	r3, r1
 800838c:	80fb      	strh	r3, [r7, #6]
 800838e:	4613      	mov	r3, r2
 8008390:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800839c:	2300      	movs	r3, #0
 800839e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083a0:	7979      	ldrb	r1, [r7, #5]
 80083a2:	7e3b      	ldrb	r3, [r7, #24]
 80083a4:	9303      	str	r3, [sp, #12]
 80083a6:	88fb      	ldrh	r3, [r7, #6]
 80083a8:	9302      	str	r3, [sp, #8]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	2301      	movs	r3, #1
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	2300      	movs	r3, #0
 80083b4:	2200      	movs	r2, #0
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 fb21 	bl	80089fe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b088      	sub	sp, #32
 80083ca:	af04      	add	r7, sp, #16
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	4611      	mov	r1, r2
 80083d2:	461a      	mov	r2, r3
 80083d4:	460b      	mov	r3, r1
 80083d6:	80fb      	strh	r3, [r7, #6]
 80083d8:	4613      	mov	r3, r2
 80083da:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083dc:	7979      	ldrb	r1, [r7, #5]
 80083de:	2300      	movs	r3, #0
 80083e0:	9303      	str	r3, [sp, #12]
 80083e2:	88fb      	ldrh	r3, [r7, #6]
 80083e4:	9302      	str	r3, [sp, #8]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	2301      	movs	r3, #1
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	2300      	movs	r3, #0
 80083f0:	2201      	movs	r2, #1
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 fb03 	bl	80089fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083f8:	2300      	movs	r3, #0

}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b088      	sub	sp, #32
 8008406:	af04      	add	r7, sp, #16
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	4611      	mov	r1, r2
 800840e:	461a      	mov	r2, r3
 8008410:	460b      	mov	r3, r1
 8008412:	80fb      	strh	r3, [r7, #6]
 8008414:	4613      	mov	r3, r2
 8008416:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008426:	7979      	ldrb	r1, [r7, #5]
 8008428:	7e3b      	ldrb	r3, [r7, #24]
 800842a:	9303      	str	r3, [sp, #12]
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	9302      	str	r3, [sp, #8]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	2301      	movs	r3, #1
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	2302      	movs	r3, #2
 800843a:	2200      	movs	r2, #0
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 fade 	bl	80089fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af04      	add	r7, sp, #16
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	4611      	mov	r1, r2
 8008458:	461a      	mov	r2, r3
 800845a:	460b      	mov	r3, r1
 800845c:	80fb      	strh	r3, [r7, #6]
 800845e:	4613      	mov	r3, r2
 8008460:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008462:	7979      	ldrb	r1, [r7, #5]
 8008464:	2300      	movs	r3, #0
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	88fb      	ldrh	r3, [r7, #6]
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	2301      	movs	r3, #1
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	2302      	movs	r3, #2
 8008476:	2201      	movs	r2, #1
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 fac0 	bl	80089fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af04      	add	r7, sp, #16
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	4608      	mov	r0, r1
 8008492:	4611      	mov	r1, r2
 8008494:	461a      	mov	r2, r3
 8008496:	4603      	mov	r3, r0
 8008498:	70fb      	strb	r3, [r7, #3]
 800849a:	460b      	mov	r3, r1
 800849c:	70bb      	strb	r3, [r7, #2]
 800849e:	4613      	mov	r3, r2
 80084a0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80084a2:	7878      	ldrb	r0, [r7, #1]
 80084a4:	78ba      	ldrb	r2, [r7, #2]
 80084a6:	78f9      	ldrb	r1, [r7, #3]
 80084a8:	8b3b      	ldrh	r3, [r7, #24]
 80084aa:	9302      	str	r3, [sp, #8]
 80084ac:	7d3b      	ldrb	r3, [r7, #20]
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	7c3b      	ldrb	r3, [r7, #16]
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	4603      	mov	r3, r0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa53 	bl	8008962 <USBH_LL_OpenPipe>

  return USBH_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80084d2:	78fb      	ldrb	r3, [r7, #3]
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fa72 	bl	80089c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f836 	bl	8008564 <USBH_GetFreePipe>
 80084f8:	4603      	mov	r3, r0
 80084fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80084fc:	89fb      	ldrh	r3, [r7, #14]
 80084fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008502:	4293      	cmp	r3, r2
 8008504:	d00a      	beq.n	800851c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008506:	78fa      	ldrb	r2, [r7, #3]
 8008508:	89fb      	ldrh	r3, [r7, #14]
 800850a:	f003 030f 	and.w	r3, r3, #15
 800850e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	33e0      	adds	r3, #224	; 0xe0
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	440b      	add	r3, r1
 800851a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800851c:	89fb      	ldrh	r3, [r7, #14]
 800851e:	b2db      	uxtb	r3, r3
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	2b0f      	cmp	r3, #15
 8008538:	d80d      	bhi.n	8008556 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	33e0      	adds	r3, #224	; 0xe0
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	78fb      	ldrb	r3, [r7, #3]
 8008548:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800854c:	6879      	ldr	r1, [r7, #4]
 800854e:	33e0      	adds	r3, #224	; 0xe0
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	440b      	add	r3, r1
 8008554:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]
 8008574:	e00f      	b.n	8008596 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	33e0      	adds	r3, #224	; 0xe0
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d102      	bne.n	8008590 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	b29b      	uxth	r3, r3
 800858e:	e007      	b.n	80085a0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008590:	7bfb      	ldrb	r3, [r7, #15]
 8008592:	3301      	adds	r3, #1
 8008594:	73fb      	strb	r3, [r7, #15]
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	2b0f      	cmp	r3, #15
 800859a:	d9ec      	bls.n	8008576 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800859c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085b0:	2201      	movs	r2, #1
 80085b2:	490e      	ldr	r1, [pc, #56]	; (80085ec <MX_USB_HOST_Init+0x40>)
 80085b4:	480e      	ldr	r0, [pc, #56]	; (80085f0 <MX_USB_HOST_Init+0x44>)
 80085b6:	f7fe fba7 	bl	8006d08 <USBH_Init>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085c0:	f7f8 fa8c 	bl	8000adc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80085c4:	490b      	ldr	r1, [pc, #44]	; (80085f4 <MX_USB_HOST_Init+0x48>)
 80085c6:	480a      	ldr	r0, [pc, #40]	; (80085f0 <MX_USB_HOST_Init+0x44>)
 80085c8:	f7fe fc2c 	bl	8006e24 <USBH_RegisterClass>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80085d2:	f7f8 fa83 	bl	8000adc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80085d6:	4806      	ldr	r0, [pc, #24]	; (80085f0 <MX_USB_HOST_Init+0x44>)
 80085d8:	f7fe fcb0 	bl	8006f3c <USBH_Start>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80085e2:	f7f8 fa7b 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80085e6:	bf00      	nop
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	0800860d 	.word	0x0800860d
 80085f0:	20000284 	.word	0x20000284
 80085f4:	2000000c 	.word	0x2000000c

080085f8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80085fc:	4802      	ldr	r0, [pc, #8]	; (8008608 <MX_USB_HOST_Process+0x10>)
 80085fe:	f7fe fcad 	bl	8006f5c <USBH_Process>
}
 8008602:	bf00      	nop
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000284 	.word	0x20000284

0800860c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	3b01      	subs	r3, #1
 800861c:	2b04      	cmp	r3, #4
 800861e:	d819      	bhi.n	8008654 <USBH_UserProcess+0x48>
 8008620:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <USBH_UserProcess+0x1c>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	08008655 	.word	0x08008655
 800862c:	08008645 	.word	0x08008645
 8008630:	08008655 	.word	0x08008655
 8008634:	0800864d 	.word	0x0800864d
 8008638:	0800863d 	.word	0x0800863d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800863c:	4b09      	ldr	r3, [pc, #36]	; (8008664 <USBH_UserProcess+0x58>)
 800863e:	2203      	movs	r2, #3
 8008640:	701a      	strb	r2, [r3, #0]
  break;
 8008642:	e008      	b.n	8008656 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008644:	4b07      	ldr	r3, [pc, #28]	; (8008664 <USBH_UserProcess+0x58>)
 8008646:	2202      	movs	r2, #2
 8008648:	701a      	strb	r2, [r3, #0]
  break;
 800864a:	e004      	b.n	8008656 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800864c:	4b05      	ldr	r3, [pc, #20]	; (8008664 <USBH_UserProcess+0x58>)
 800864e:	2201      	movs	r2, #1
 8008650:	701a      	strb	r2, [r3, #0]
  break;
 8008652:	e000      	b.n	8008656 <USBH_UserProcess+0x4a>

  default:
  break;
 8008654:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	2000065c 	.word	0x2000065c

08008668 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08a      	sub	sp, #40	; 0x28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008670:	f107 0314 	add.w	r3, r7, #20
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	605a      	str	r2, [r3, #4]
 800867a:	609a      	str	r2, [r3, #8]
 800867c:	60da      	str	r2, [r3, #12]
 800867e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008688:	d147      	bne.n	800871a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800868a:	2300      	movs	r3, #0
 800868c:	613b      	str	r3, [r7, #16]
 800868e:	4b25      	ldr	r3, [pc, #148]	; (8008724 <HAL_HCD_MspInit+0xbc>)
 8008690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008692:	4a24      	ldr	r2, [pc, #144]	; (8008724 <HAL_HCD_MspInit+0xbc>)
 8008694:	f043 0301 	orr.w	r3, r3, #1
 8008698:	6313      	str	r3, [r2, #48]	; 0x30
 800869a:	4b22      	ldr	r3, [pc, #136]	; (8008724 <HAL_HCD_MspInit+0xbc>)
 800869c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	613b      	str	r3, [r7, #16]
 80086a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80086a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80086b4:	f107 0314 	add.w	r3, r7, #20
 80086b8:	4619      	mov	r1, r3
 80086ba:	481b      	ldr	r0, [pc, #108]	; (8008728 <HAL_HCD_MspInit+0xc0>)
 80086bc:	f7f9 faaa 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80086c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80086c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c6:	2302      	movs	r3, #2
 80086c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086ce:	2303      	movs	r3, #3
 80086d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086d2:	230a      	movs	r3, #10
 80086d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d6:	f107 0314 	add.w	r3, r7, #20
 80086da:	4619      	mov	r1, r3
 80086dc:	4812      	ldr	r0, [pc, #72]	; (8008728 <HAL_HCD_MspInit+0xc0>)
 80086de:	f7f9 fa99 	bl	8001c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086e2:	4b10      	ldr	r3, [pc, #64]	; (8008724 <HAL_HCD_MspInit+0xbc>)
 80086e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e6:	4a0f      	ldr	r2, [pc, #60]	; (8008724 <HAL_HCD_MspInit+0xbc>)
 80086e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ec:	6353      	str	r3, [r2, #52]	; 0x34
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	4b0c      	ldr	r3, [pc, #48]	; (8008724 <HAL_HCD_MspInit+0xbc>)
 80086f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f6:	4a0b      	ldr	r2, [pc, #44]	; (8008724 <HAL_HCD_MspInit+0xbc>)
 80086f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086fc:	6453      	str	r3, [r2, #68]	; 0x44
 80086fe:	4b09      	ldr	r3, [pc, #36]	; (8008724 <HAL_HCD_MspInit+0xbc>)
 8008700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800870a:	2200      	movs	r2, #0
 800870c:	2100      	movs	r1, #0
 800870e:	2043      	movs	r0, #67	; 0x43
 8008710:	f7f9 fa49 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008714:	2043      	movs	r0, #67	; 0x43
 8008716:	f7f9 fa62 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800871a:	bf00      	nop
 800871c:	3728      	adds	r7, #40	; 0x28
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	40023800 	.word	0x40023800
 8008728:	40020000 	.word	0x40020000

0800872c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe ffed 	bl	800771a <USBH_LL_IncTimer>
}
 8008740:	bf00      	nop
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff f825 	bl	80077a6 <USBH_LL_Connect>
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008772:	4618      	mov	r0, r3
 8008774:	f7ff f82e 	bl	80077d4 <USBH_LL_Disconnect>
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
 800878c:	4613      	mov	r3, r2
 800878e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe ffdf 	bl	800776e <USBH_LL_PortEnabled>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe ffdf 	bl	800778a <USBH_LL_PortDisabled>
}
 80087cc:	bf00      	nop
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d12a      	bne.n	800883c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80087e6:	4a18      	ldr	r2, [pc, #96]	; (8008848 <USBH_LL_Init+0x74>)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a15      	ldr	r2, [pc, #84]	; (8008848 <USBH_LL_Init+0x74>)
 80087f2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087f6:	4b14      	ldr	r3, [pc, #80]	; (8008848 <USBH_LL_Init+0x74>)
 80087f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087fc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80087fe:	4b12      	ldr	r3, [pc, #72]	; (8008848 <USBH_LL_Init+0x74>)
 8008800:	2208      	movs	r2, #8
 8008802:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008804:	4b10      	ldr	r3, [pc, #64]	; (8008848 <USBH_LL_Init+0x74>)
 8008806:	2201      	movs	r2, #1
 8008808:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800880a:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <USBH_LL_Init+0x74>)
 800880c:	2200      	movs	r2, #0
 800880e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008810:	4b0d      	ldr	r3, [pc, #52]	; (8008848 <USBH_LL_Init+0x74>)
 8008812:	2202      	movs	r2, #2
 8008814:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008816:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <USBH_LL_Init+0x74>)
 8008818:	2200      	movs	r2, #0
 800881a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800881c:	480a      	ldr	r0, [pc, #40]	; (8008848 <USBH_LL_Init+0x74>)
 800881e:	f7f9 fbb0 	bl	8001f82 <HAL_HCD_Init>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008828:	f7f8 f958 	bl	8000adc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800882c:	4806      	ldr	r0, [pc, #24]	; (8008848 <USBH_LL_Init+0x74>)
 800882e:	f7f9 ff94 	bl	800275a <HAL_HCD_GetCurrentFrame>
 8008832:	4603      	mov	r3, r0
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fe ff60 	bl	80076fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20000660 	.word	0x20000660

0800884c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008862:	4618      	mov	r0, r3
 8008864:	f7f9 ff03 	bl	800266e <HAL_HCD_Start>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f95c 	bl	8008b2c <USBH_Get_USB_Status>
 8008874:	4603      	mov	r3, r0
 8008876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008878:	7bbb      	ldrb	r3, [r7, #14]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008898:	4618      	mov	r0, r3
 800889a:	f7f9 ff0b 	bl	80026b4 <HAL_HCD_Stop>
 800889e:	4603      	mov	r3, r0
 80088a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 f941 	bl	8008b2c <USBH_Get_USB_Status>
 80088aa:	4603      	mov	r3, r0
 80088ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088c0:	2301      	movs	r3, #1
 80088c2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f9 ff53 	bl	8002776 <HAL_HCD_GetCurrentSpeed>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d00c      	beq.n	80088f0 <USBH_LL_GetSpeed+0x38>
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d80d      	bhi.n	80088f6 <USBH_LL_GetSpeed+0x3e>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <USBH_LL_GetSpeed+0x2c>
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d003      	beq.n	80088ea <USBH_LL_GetSpeed+0x32>
 80088e2:	e008      	b.n	80088f6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
    break;
 80088e8:	e008      	b.n	80088fc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80088ea:	2301      	movs	r3, #1
 80088ec:	73fb      	strb	r3, [r7, #15]
    break;
 80088ee:	e005      	b.n	80088fc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80088f0:	2302      	movs	r3, #2
 80088f2:	73fb      	strb	r3, [r7, #15]
    break;
 80088f4:	e002      	b.n	80088fc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80088f6:	2301      	movs	r3, #1
 80088f8:	73fb      	strb	r3, [r7, #15]
    break;
 80088fa:	bf00      	nop
  }
  return  speed;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800891c:	4618      	mov	r0, r3
 800891e:	f7f9 fee6 	bl	80026ee <HAL_HCD_ResetPort>
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f8ff 	bl	8008b2c <USBH_Get_USB_Status>
 800892e:	4603      	mov	r3, r0
 8008930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008932:	7bbb      	ldrb	r3, [r7, #14]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800894e:	78fa      	ldrb	r2, [r7, #3]
 8008950:	4611      	mov	r1, r2
 8008952:	4618      	mov	r0, r3
 8008954:	f7f9 feed 	bl	8002732 <HAL_HCD_HC_GetXferCount>
 8008958:	4603      	mov	r3, r0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008962:	b590      	push	{r4, r7, lr}
 8008964:	b089      	sub	sp, #36	; 0x24
 8008966:	af04      	add	r7, sp, #16
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	4608      	mov	r0, r1
 800896c:	4611      	mov	r1, r2
 800896e:	461a      	mov	r2, r3
 8008970:	4603      	mov	r3, r0
 8008972:	70fb      	strb	r3, [r7, #3]
 8008974:	460b      	mov	r3, r1
 8008976:	70bb      	strb	r3, [r7, #2]
 8008978:	4613      	mov	r3, r2
 800897a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800898a:	787c      	ldrb	r4, [r7, #1]
 800898c:	78ba      	ldrb	r2, [r7, #2]
 800898e:	78f9      	ldrb	r1, [r7, #3]
 8008990:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008992:	9302      	str	r3, [sp, #8]
 8008994:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008998:	9301      	str	r3, [sp, #4]
 800899a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	4623      	mov	r3, r4
 80089a2:	f7f9 fb50 	bl	8002046 <HAL_HCD_HC_Init>
 80089a6:	4603      	mov	r3, r0
 80089a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 f8bd 	bl	8008b2c <USBH_Get_USB_Status>
 80089b2:	4603      	mov	r3, r0
 80089b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd90      	pop	{r4, r7, pc}

080089c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f7f9 fbc0 	bl	8002164 <HAL_HCD_HC_Halt>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 f89e 	bl	8008b2c <USBH_Get_USB_Status>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80089fe:	b590      	push	{r4, r7, lr}
 8008a00:	b089      	sub	sp, #36	; 0x24
 8008a02:	af04      	add	r7, sp, #16
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	4608      	mov	r0, r1
 8008a08:	4611      	mov	r1, r2
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	70fb      	strb	r3, [r7, #3]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70bb      	strb	r3, [r7, #2]
 8008a14:	4613      	mov	r3, r2
 8008a16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a26:	787c      	ldrb	r4, [r7, #1]
 8008a28:	78ba      	ldrb	r2, [r7, #2]
 8008a2a:	78f9      	ldrb	r1, [r7, #3]
 8008a2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a30:	9303      	str	r3, [sp, #12]
 8008a32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a34:	9302      	str	r3, [sp, #8]
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	4623      	mov	r3, r4
 8008a42:	f7f9 fbb3 	bl	80021ac <HAL_HCD_HC_SubmitRequest>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 f86d 	bl	8008b2c <USBH_Get_USB_Status>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd90      	pop	{r4, r7, pc}

08008a60 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a72:	78fa      	ldrb	r2, [r7, #3]
 8008a74:	4611      	mov	r1, r2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7f9 fe47 	bl	800270a <HAL_HCD_HC_GetURBState>
 8008a7c:	4603      	mov	r3, r0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d103      	bne.n	8008aa4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 f870 	bl	8008b84 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008aa4:	20c8      	movs	r0, #200	; 0xc8
 8008aa6:	f7f8 fb23 	bl	80010f0 <HAL_Delay>
  return USBH_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008acc:	78fb      	ldrb	r3, [r7, #3]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	212c      	movs	r1, #44	; 0x2c
 8008ad2:	fb01 f303 	mul.w	r3, r1, r3
 8008ad6:	4413      	add	r3, r2
 8008ad8:	333b      	adds	r3, #59	; 0x3b
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d009      	beq.n	8008af4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	212c      	movs	r1, #44	; 0x2c
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	4413      	add	r3, r2
 8008aec:	3354      	adds	r3, #84	; 0x54
 8008aee:	78ba      	ldrb	r2, [r7, #2]
 8008af0:	701a      	strb	r2, [r3, #0]
 8008af2:	e008      	b.n	8008b06 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008af4:	78fb      	ldrb	r3, [r7, #3]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	212c      	movs	r1, #44	; 0x2c
 8008afa:	fb01 f303 	mul.w	r3, r1, r3
 8008afe:	4413      	add	r3, r2
 8008b00:	3355      	adds	r3, #85	; 0x55
 8008b02:	78ba      	ldrb	r2, [r7, #2]
 8008b04:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7f8 fae7 	bl	80010f0 <HAL_Delay>
}
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b3a:	79fb      	ldrb	r3, [r7, #7]
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d817      	bhi.n	8008b70 <USBH_Get_USB_Status+0x44>
 8008b40:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <USBH_Get_USB_Status+0x1c>)
 8008b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b46:	bf00      	nop
 8008b48:	08008b59 	.word	0x08008b59
 8008b4c:	08008b5f 	.word	0x08008b5f
 8008b50:	08008b65 	.word	0x08008b65
 8008b54:	08008b6b 	.word	0x08008b6b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5c:	e00b      	b.n	8008b76 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b5e:	2302      	movs	r3, #2
 8008b60:	73fb      	strb	r3, [r7, #15]
    break;
 8008b62:	e008      	b.n	8008b76 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b64:	2301      	movs	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]
    break;
 8008b68:	e005      	b.n	8008b76 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6e:	e002      	b.n	8008b76 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b70:	2302      	movs	r3, #2
 8008b72:	73fb      	strb	r3, [r7, #15]
    break;
 8008b74:	bf00      	nop
  }
  return usb_status;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b8e:	79fb      	ldrb	r3, [r7, #7]
 8008b90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73fb      	strb	r3, [r7, #15]
 8008b9c:	e001      	b.n	8008ba2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	4803      	ldr	r0, [pc, #12]	; (8008bb8 <MX_DriverVbusFS+0x34>)
 8008baa:	f7f9 f9b7 	bl	8001f1c <HAL_GPIO_WritePin>
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	40020800 	.word	0x40020800

08008bbc <__errno>:
 8008bbc:	4b01      	ldr	r3, [pc, #4]	; (8008bc4 <__errno+0x8>)
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	2000002c 	.word	0x2000002c

08008bc8 <__libc_init_array>:
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	4d0d      	ldr	r5, [pc, #52]	; (8008c00 <__libc_init_array+0x38>)
 8008bcc:	4c0d      	ldr	r4, [pc, #52]	; (8008c04 <__libc_init_array+0x3c>)
 8008bce:	1b64      	subs	r4, r4, r5
 8008bd0:	10a4      	asrs	r4, r4, #2
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	42a6      	cmp	r6, r4
 8008bd6:	d109      	bne.n	8008bec <__libc_init_array+0x24>
 8008bd8:	4d0b      	ldr	r5, [pc, #44]	; (8008c08 <__libc_init_array+0x40>)
 8008bda:	4c0c      	ldr	r4, [pc, #48]	; (8008c0c <__libc_init_array+0x44>)
 8008bdc:	f000 f92e 	bl	8008e3c <_init>
 8008be0:	1b64      	subs	r4, r4, r5
 8008be2:	10a4      	asrs	r4, r4, #2
 8008be4:	2600      	movs	r6, #0
 8008be6:	42a6      	cmp	r6, r4
 8008be8:	d105      	bne.n	8008bf6 <__libc_init_array+0x2e>
 8008bea:	bd70      	pop	{r4, r5, r6, pc}
 8008bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf0:	4798      	blx	r3
 8008bf2:	3601      	adds	r6, #1
 8008bf4:	e7ee      	b.n	8008bd4 <__libc_init_array+0xc>
 8008bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bfa:	4798      	blx	r3
 8008bfc:	3601      	adds	r6, #1
 8008bfe:	e7f2      	b.n	8008be6 <__libc_init_array+0x1e>
 8008c00:	08008e78 	.word	0x08008e78
 8008c04:	08008e78 	.word	0x08008e78
 8008c08:	08008e78 	.word	0x08008e78
 8008c0c:	08008e7c 	.word	0x08008e7c

08008c10 <malloc>:
 8008c10:	4b02      	ldr	r3, [pc, #8]	; (8008c1c <malloc+0xc>)
 8008c12:	4601      	mov	r1, r0
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	f000 b87f 	b.w	8008d18 <_malloc_r>
 8008c1a:	bf00      	nop
 8008c1c:	2000002c 	.word	0x2000002c

08008c20 <free>:
 8008c20:	4b02      	ldr	r3, [pc, #8]	; (8008c2c <free+0xc>)
 8008c22:	4601      	mov	r1, r0
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	f000 b80b 	b.w	8008c40 <_free_r>
 8008c2a:	bf00      	nop
 8008c2c:	2000002c 	.word	0x2000002c

08008c30 <memset>:
 8008c30:	4402      	add	r2, r0
 8008c32:	4603      	mov	r3, r0
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d100      	bne.n	8008c3a <memset+0xa>
 8008c38:	4770      	bx	lr
 8008c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c3e:	e7f9      	b.n	8008c34 <memset+0x4>

08008c40 <_free_r>:
 8008c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c42:	2900      	cmp	r1, #0
 8008c44:	d044      	beq.n	8008cd0 <_free_r+0x90>
 8008c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c4a:	9001      	str	r0, [sp, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8008c52:	bfb8      	it	lt
 8008c54:	18e4      	addlt	r4, r4, r3
 8008c56:	f000 f8e3 	bl	8008e20 <__malloc_lock>
 8008c5a:	4a1e      	ldr	r2, [pc, #120]	; (8008cd4 <_free_r+0x94>)
 8008c5c:	9801      	ldr	r0, [sp, #4]
 8008c5e:	6813      	ldr	r3, [r2, #0]
 8008c60:	b933      	cbnz	r3, 8008c70 <_free_r+0x30>
 8008c62:	6063      	str	r3, [r4, #4]
 8008c64:	6014      	str	r4, [r2, #0]
 8008c66:	b003      	add	sp, #12
 8008c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c6c:	f000 b8de 	b.w	8008e2c <__malloc_unlock>
 8008c70:	42a3      	cmp	r3, r4
 8008c72:	d908      	bls.n	8008c86 <_free_r+0x46>
 8008c74:	6825      	ldr	r5, [r4, #0]
 8008c76:	1961      	adds	r1, r4, r5
 8008c78:	428b      	cmp	r3, r1
 8008c7a:	bf01      	itttt	eq
 8008c7c:	6819      	ldreq	r1, [r3, #0]
 8008c7e:	685b      	ldreq	r3, [r3, #4]
 8008c80:	1949      	addeq	r1, r1, r5
 8008c82:	6021      	streq	r1, [r4, #0]
 8008c84:	e7ed      	b.n	8008c62 <_free_r+0x22>
 8008c86:	461a      	mov	r2, r3
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	b10b      	cbz	r3, 8008c90 <_free_r+0x50>
 8008c8c:	42a3      	cmp	r3, r4
 8008c8e:	d9fa      	bls.n	8008c86 <_free_r+0x46>
 8008c90:	6811      	ldr	r1, [r2, #0]
 8008c92:	1855      	adds	r5, r2, r1
 8008c94:	42a5      	cmp	r5, r4
 8008c96:	d10b      	bne.n	8008cb0 <_free_r+0x70>
 8008c98:	6824      	ldr	r4, [r4, #0]
 8008c9a:	4421      	add	r1, r4
 8008c9c:	1854      	adds	r4, r2, r1
 8008c9e:	42a3      	cmp	r3, r4
 8008ca0:	6011      	str	r1, [r2, #0]
 8008ca2:	d1e0      	bne.n	8008c66 <_free_r+0x26>
 8008ca4:	681c      	ldr	r4, [r3, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	6053      	str	r3, [r2, #4]
 8008caa:	4421      	add	r1, r4
 8008cac:	6011      	str	r1, [r2, #0]
 8008cae:	e7da      	b.n	8008c66 <_free_r+0x26>
 8008cb0:	d902      	bls.n	8008cb8 <_free_r+0x78>
 8008cb2:	230c      	movs	r3, #12
 8008cb4:	6003      	str	r3, [r0, #0]
 8008cb6:	e7d6      	b.n	8008c66 <_free_r+0x26>
 8008cb8:	6825      	ldr	r5, [r4, #0]
 8008cba:	1961      	adds	r1, r4, r5
 8008cbc:	428b      	cmp	r3, r1
 8008cbe:	bf04      	itt	eq
 8008cc0:	6819      	ldreq	r1, [r3, #0]
 8008cc2:	685b      	ldreq	r3, [r3, #4]
 8008cc4:	6063      	str	r3, [r4, #4]
 8008cc6:	bf04      	itt	eq
 8008cc8:	1949      	addeq	r1, r1, r5
 8008cca:	6021      	streq	r1, [r4, #0]
 8008ccc:	6054      	str	r4, [r2, #4]
 8008cce:	e7ca      	b.n	8008c66 <_free_r+0x26>
 8008cd0:	b003      	add	sp, #12
 8008cd2:	bd30      	pop	{r4, r5, pc}
 8008cd4:	20000964 	.word	0x20000964

08008cd8 <sbrk_aligned>:
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	4e0e      	ldr	r6, [pc, #56]	; (8008d14 <sbrk_aligned+0x3c>)
 8008cdc:	460c      	mov	r4, r1
 8008cde:	6831      	ldr	r1, [r6, #0]
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	b911      	cbnz	r1, 8008cea <sbrk_aligned+0x12>
 8008ce4:	f000 f88c 	bl	8008e00 <_sbrk_r>
 8008ce8:	6030      	str	r0, [r6, #0]
 8008cea:	4621      	mov	r1, r4
 8008cec:	4628      	mov	r0, r5
 8008cee:	f000 f887 	bl	8008e00 <_sbrk_r>
 8008cf2:	1c43      	adds	r3, r0, #1
 8008cf4:	d00a      	beq.n	8008d0c <sbrk_aligned+0x34>
 8008cf6:	1cc4      	adds	r4, r0, #3
 8008cf8:	f024 0403 	bic.w	r4, r4, #3
 8008cfc:	42a0      	cmp	r0, r4
 8008cfe:	d007      	beq.n	8008d10 <sbrk_aligned+0x38>
 8008d00:	1a21      	subs	r1, r4, r0
 8008d02:	4628      	mov	r0, r5
 8008d04:	f000 f87c 	bl	8008e00 <_sbrk_r>
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d101      	bne.n	8008d10 <sbrk_aligned+0x38>
 8008d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8008d10:	4620      	mov	r0, r4
 8008d12:	bd70      	pop	{r4, r5, r6, pc}
 8008d14:	20000968 	.word	0x20000968

08008d18 <_malloc_r>:
 8008d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1c:	1ccd      	adds	r5, r1, #3
 8008d1e:	f025 0503 	bic.w	r5, r5, #3
 8008d22:	3508      	adds	r5, #8
 8008d24:	2d0c      	cmp	r5, #12
 8008d26:	bf38      	it	cc
 8008d28:	250c      	movcc	r5, #12
 8008d2a:	2d00      	cmp	r5, #0
 8008d2c:	4607      	mov	r7, r0
 8008d2e:	db01      	blt.n	8008d34 <_malloc_r+0x1c>
 8008d30:	42a9      	cmp	r1, r5
 8008d32:	d905      	bls.n	8008d40 <_malloc_r+0x28>
 8008d34:	230c      	movs	r3, #12
 8008d36:	603b      	str	r3, [r7, #0]
 8008d38:	2600      	movs	r6, #0
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d40:	4e2e      	ldr	r6, [pc, #184]	; (8008dfc <_malloc_r+0xe4>)
 8008d42:	f000 f86d 	bl	8008e20 <__malloc_lock>
 8008d46:	6833      	ldr	r3, [r6, #0]
 8008d48:	461c      	mov	r4, r3
 8008d4a:	bb34      	cbnz	r4, 8008d9a <_malloc_r+0x82>
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	4638      	mov	r0, r7
 8008d50:	f7ff ffc2 	bl	8008cd8 <sbrk_aligned>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	4604      	mov	r4, r0
 8008d58:	d14d      	bne.n	8008df6 <_malloc_r+0xde>
 8008d5a:	6834      	ldr	r4, [r6, #0]
 8008d5c:	4626      	mov	r6, r4
 8008d5e:	2e00      	cmp	r6, #0
 8008d60:	d140      	bne.n	8008de4 <_malloc_r+0xcc>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	4631      	mov	r1, r6
 8008d66:	4638      	mov	r0, r7
 8008d68:	eb04 0803 	add.w	r8, r4, r3
 8008d6c:	f000 f848 	bl	8008e00 <_sbrk_r>
 8008d70:	4580      	cmp	r8, r0
 8008d72:	d13a      	bne.n	8008dea <_malloc_r+0xd2>
 8008d74:	6821      	ldr	r1, [r4, #0]
 8008d76:	3503      	adds	r5, #3
 8008d78:	1a6d      	subs	r5, r5, r1
 8008d7a:	f025 0503 	bic.w	r5, r5, #3
 8008d7e:	3508      	adds	r5, #8
 8008d80:	2d0c      	cmp	r5, #12
 8008d82:	bf38      	it	cc
 8008d84:	250c      	movcc	r5, #12
 8008d86:	4629      	mov	r1, r5
 8008d88:	4638      	mov	r0, r7
 8008d8a:	f7ff ffa5 	bl	8008cd8 <sbrk_aligned>
 8008d8e:	3001      	adds	r0, #1
 8008d90:	d02b      	beq.n	8008dea <_malloc_r+0xd2>
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	442b      	add	r3, r5
 8008d96:	6023      	str	r3, [r4, #0]
 8008d98:	e00e      	b.n	8008db8 <_malloc_r+0xa0>
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	1b52      	subs	r2, r2, r5
 8008d9e:	d41e      	bmi.n	8008dde <_malloc_r+0xc6>
 8008da0:	2a0b      	cmp	r2, #11
 8008da2:	d916      	bls.n	8008dd2 <_malloc_r+0xba>
 8008da4:	1961      	adds	r1, r4, r5
 8008da6:	42a3      	cmp	r3, r4
 8008da8:	6025      	str	r5, [r4, #0]
 8008daa:	bf18      	it	ne
 8008dac:	6059      	strne	r1, [r3, #4]
 8008dae:	6863      	ldr	r3, [r4, #4]
 8008db0:	bf08      	it	eq
 8008db2:	6031      	streq	r1, [r6, #0]
 8008db4:	5162      	str	r2, [r4, r5]
 8008db6:	604b      	str	r3, [r1, #4]
 8008db8:	4638      	mov	r0, r7
 8008dba:	f104 060b 	add.w	r6, r4, #11
 8008dbe:	f000 f835 	bl	8008e2c <__malloc_unlock>
 8008dc2:	f026 0607 	bic.w	r6, r6, #7
 8008dc6:	1d23      	adds	r3, r4, #4
 8008dc8:	1af2      	subs	r2, r6, r3
 8008dca:	d0b6      	beq.n	8008d3a <_malloc_r+0x22>
 8008dcc:	1b9b      	subs	r3, r3, r6
 8008dce:	50a3      	str	r3, [r4, r2]
 8008dd0:	e7b3      	b.n	8008d3a <_malloc_r+0x22>
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	bf0c      	ite	eq
 8008dd8:	6032      	streq	r2, [r6, #0]
 8008dda:	605a      	strne	r2, [r3, #4]
 8008ddc:	e7ec      	b.n	8008db8 <_malloc_r+0xa0>
 8008dde:	4623      	mov	r3, r4
 8008de0:	6864      	ldr	r4, [r4, #4]
 8008de2:	e7b2      	b.n	8008d4a <_malloc_r+0x32>
 8008de4:	4634      	mov	r4, r6
 8008de6:	6876      	ldr	r6, [r6, #4]
 8008de8:	e7b9      	b.n	8008d5e <_malloc_r+0x46>
 8008dea:	230c      	movs	r3, #12
 8008dec:	603b      	str	r3, [r7, #0]
 8008dee:	4638      	mov	r0, r7
 8008df0:	f000 f81c 	bl	8008e2c <__malloc_unlock>
 8008df4:	e7a1      	b.n	8008d3a <_malloc_r+0x22>
 8008df6:	6025      	str	r5, [r4, #0]
 8008df8:	e7de      	b.n	8008db8 <_malloc_r+0xa0>
 8008dfa:	bf00      	nop
 8008dfc:	20000964 	.word	0x20000964

08008e00 <_sbrk_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4d06      	ldr	r5, [pc, #24]	; (8008e1c <_sbrk_r+0x1c>)
 8008e04:	2300      	movs	r3, #0
 8008e06:	4604      	mov	r4, r0
 8008e08:	4608      	mov	r0, r1
 8008e0a:	602b      	str	r3, [r5, #0]
 8008e0c:	f7f8 f88c 	bl	8000f28 <_sbrk>
 8008e10:	1c43      	adds	r3, r0, #1
 8008e12:	d102      	bne.n	8008e1a <_sbrk_r+0x1a>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	b103      	cbz	r3, 8008e1a <_sbrk_r+0x1a>
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	2000096c 	.word	0x2000096c

08008e20 <__malloc_lock>:
 8008e20:	4801      	ldr	r0, [pc, #4]	; (8008e28 <__malloc_lock+0x8>)
 8008e22:	f000 b809 	b.w	8008e38 <__retarget_lock_acquire_recursive>
 8008e26:	bf00      	nop
 8008e28:	20000970 	.word	0x20000970

08008e2c <__malloc_unlock>:
 8008e2c:	4801      	ldr	r0, [pc, #4]	; (8008e34 <__malloc_unlock+0x8>)
 8008e2e:	f000 b804 	b.w	8008e3a <__retarget_lock_release_recursive>
 8008e32:	bf00      	nop
 8008e34:	20000970 	.word	0x20000970

08008e38 <__retarget_lock_acquire_recursive>:
 8008e38:	4770      	bx	lr

08008e3a <__retarget_lock_release_recursive>:
 8008e3a:	4770      	bx	lr

08008e3c <_init>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr

08008e48 <_fini>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr
