
Vaja3_ADC_trigger_timer_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cbc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008e50  08008e50  00018e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e6c  08008e6c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e74  08008e74  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e74  08008e74  00018e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e78  08008e78  00018e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000090  08008f0c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08008f0c  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c83e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d7  00000000  00000000  0003c8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  000409d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  000421e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b25f  00000000  00000000  00043848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee66  00000000  00000000  0005eaa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1fe9  00000000  00000000  0007d90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f8f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006860  00000000  00000000  0011f948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000090 	.word	0x20000090
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008e38 	.word	0x08008e38

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000094 	.word	0x20000094
 80001d0:	08008e38 	.word	0x08008e38

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd94 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f820 	bl	8000524 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e4:	f000 f888 	bl	80005f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 fa04 	bl	80008f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ec:	f000 f8f4 	bl	80006d8 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f0:	f000 f920 	bl	8000734 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f4:	f000 f94c 	bl	8000790 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f8:	f000 f97a 	bl	80007f0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004fc:	f008 f854 	bl	80085a8 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000500:	f000 f898 	bl	8000634 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000504:	f000 f9aa 	bl	800085c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <main+0x44>)
 800050a:	f000 fe57 	bl	80011bc <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <main+0x48>)
 8000510:	f004 fdcc 	bl	80050ac <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000514:	f008 f86e 	bl	80085f4 <MX_USB_HOST_Process>
 8000518:	e7fc      	b.n	8000514 <main+0x3c>
 800051a:	bf00      	nop
 800051c:	200000ac 	.word	0x200000ac
 8000520:	20000230 	.word	0x20000230

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f008 fb7a 	bl	8008c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a20      	ldr	r2, [pc, #128]	; (80005f4 <SystemClock_Config+0xd0>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800059c:	2360      	movs	r3, #96	; 0x60
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80005a0:	2306      	movs	r3, #6
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fed5 	bl	800435c <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b8:	f000 fa8e 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2101      	movs	r1, #1
 80005d8:	4618      	mov	r0, r3
 80005da:	f004 f937 	bl	800484c <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e4:	f000 fa78 	bl	8000ad8 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800060c:	2301      	movs	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000610:	2332      	movs	r3, #50	; 0x32
 8000612:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fb22 	bl	8004c64 <HAL_RCCEx_PeriphCLKConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000626:	f000 fa57 	bl	8000ad8 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000646:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xa0>)
 800064a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000658:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000662:	2200      	movs	r2, #0
 8000664:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000678:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000686:	2201      	movs	r2, #1
 8000688:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000694:	2201      	movs	r2, #1
 8000696:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800069a:	f000 fd4b 	bl	8001134 <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80006a4:	f000 fa18 	bl	8000ad8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_ADC1_Init+0x9c>)
 80006ba:	f000 ff6f 	bl	800159c <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006c4:	f000 fa08 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000ac 	.word	0x200000ac
 80006d4:	40012000 	.word	0x40012000

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f003 f83d 	bl	8003794 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f9da 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000f4 	.word	0x200000f4
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_I2S2_Init+0x54>)
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <MX_I2S2_Init+0x58>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2S2_Init+0x54>)
 8000740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000744:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_I2S2_Init+0x54>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_I2S2_Init+0x54>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_I2S2_Init+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_I2S2_Init+0x54>)
 800075a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800075e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_I2S2_Init+0x54>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_I2S2_Init+0x54>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_I2S2_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_I2S2_Init+0x54>)
 8000774:	f003 f952 	bl	8003a1c <HAL_I2S_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800077e:	f000 f9ab 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000148 	.word	0x20000148
 800078c:	40003800 	.word	0x40003800

08000790 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_I2S3_Init+0x54>)
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <MX_I2S3_Init+0x58>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2S3_Init+0x54>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <MX_I2S3_Init+0x5c>)
 80007ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007d0:	f003 f924 	bl	8003a1c <HAL_I2S_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007da:	f000 f97d 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000190 	.word	0x20000190
 80007e8:	40003c00 	.word	0x40003c00
 80007ec:	00017700 	.word	0x00017700

080007f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_SPI1_Init+0x64>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_SPI1_Init+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_SPI1_Init+0x64>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_SPI1_Init+0x64>)
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_SPI1_Init+0x64>)
 800083c:	220a      	movs	r2, #10
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_SPI1_Init+0x64>)
 8000842:	f004 fb5b 	bl	8004efc <HAL_SPI_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800084c:	f000 f944 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200001d8 	.word	0x200001d8
 8000858:	40013000 	.word	0x40013000

0800085c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_TIM2_Init+0x94>)
 800087a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800087e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_TIM2_Init+0x94>)
 8000882:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_TIM2_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_TIM2_Init+0x94>)
 8000890:	2264      	movs	r2, #100	; 0x64
 8000892:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_TIM2_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_TIM2_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <MX_TIM2_Init+0x94>)
 80008a2:	f004 fbb4 	bl	800500e <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008ac:	f000 f914 	bl	8000ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	4619      	mov	r1, r3
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_TIM2_Init+0x94>)
 80008be:	f004 fc4f 	bl	8005160 <HAL_TIM_ConfigClockSource>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 f906 	bl	8000ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008cc:	2320      	movs	r3, #32
 80008ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_TIM2_Init+0x94>)
 80008da:	f004 fe23 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 f8f8 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000230 	.word	0x20000230

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	4b61      	ldr	r3, [pc, #388]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a60      	ldr	r2, [pc, #384]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b5e      	ldr	r3, [pc, #376]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	4b5a      	ldr	r3, [pc, #360]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a59      	ldr	r2, [pc, #356]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b57      	ldr	r3, [pc, #348]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b53      	ldr	r3, [pc, #332]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a52      	ldr	r2, [pc, #328]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b50      	ldr	r3, [pc, #320]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a4b      	ldr	r2, [pc, #300]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b49      	ldr	r3, [pc, #292]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a44      	ldr	r2, [pc, #272]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a3d      	ldr	r2, [pc, #244]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2108      	movs	r1, #8
 80009b6:	4838      	ldr	r0, [pc, #224]	; (8000a98 <MX_GPIO_Init+0x1a4>)
 80009b8:	f001 faae 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2101      	movs	r1, #1
 80009c0:	4836      	ldr	r0, [pc, #216]	; (8000a9c <MX_GPIO_Init+0x1a8>)
 80009c2:	f001 faa9 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c6:	2200      	movs	r2, #0
 80009c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009cc:	4834      	ldr	r0, [pc, #208]	; (8000aa0 <MX_GPIO_Init+0x1ac>)
 80009ce:	f001 faa3 	bl	8001f18 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009d2:	2304      	movs	r3, #4
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	482c      	ldr	r0, [pc, #176]	; (8000a98 <MX_GPIO_Init+0x1a4>)
 80009e6:	f001 f913 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ea:	2308      	movs	r3, #8
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4825      	ldr	r0, [pc, #148]	; (8000a98 <MX_GPIO_Init+0x1a4>)
 8000a02:	f001 f905 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000a06:	2332      	movs	r3, #50	; 0x32
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481f      	ldr	r0, [pc, #124]	; (8000a98 <MX_GPIO_Init+0x1a4>)
 8000a1c:	f001 f8f8 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <MX_GPIO_Init+0x1a8>)
 8000a38:	f001 f8ea 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a40:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <MX_GPIO_Init+0x1b0>)
 8000a52:	f001 f8dd 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a56:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a5a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <MX_GPIO_Init+0x1ac>)
 8000a70:	f001 f8ce 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a74:	2320      	movs	r3, #32
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_GPIO_Init+0x1ac>)
 8000a88:	f001 f8c2 	bl	8001c10 <HAL_GPIO_Init>

}
 8000a8c:	bf00      	nop
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)

{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	adcVal = HAL_ADC_GetValue(hadc1);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 fd51 	bl	8001558 <HAL_ADC_GetValue>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_ADC_ConvCpltCallback+0x28>)
 8000abc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac2:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000ac4:	f001 fa41 	bl	8001f4a <HAL_GPIO_TogglePin>
	UNUSED(hadc1);

	}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000278 	.word	0x20000278
 8000ad4:	40020c00 	.word	0x40020c00

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b22:	2007      	movs	r0, #7
 8000b24:	f001 f832 	bl	8001b8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800

08000b34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a1b      	ldr	r2, [pc, #108]	; (8000bc0 <HAL_ADC_MspInit+0x8c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d12f      	bne.n	8000bb6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_ADC_MspInit+0x90>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_ADC_MspInit+0x90>)
 8000b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_ADC_MspInit+0x90>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_ADC_MspInit+0x90>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <HAL_ADC_MspInit+0x90>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HAL_ADC_MspInit+0x90>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b92:	2303      	movs	r3, #3
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <HAL_ADC_MspInit+0x94>)
 8000ba2:	f001 f835 	bl	8001c10 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2012      	movs	r0, #18
 8000bac:	f000 fff9 	bl	8001ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000bb0:	2012      	movs	r0, #18
 8000bb2:	f001 f812 	bl	8001bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40012000 	.word	0x40012000
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <HAL_I2C_MspInit+0x84>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d12c      	bne.n	8000c48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c10:	2312      	movs	r3, #18
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <HAL_I2C_MspInit+0x8c>)
 8000c28:	f000 fff2 	bl	8001c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40005400 	.word	0x40005400
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020400 	.word	0x40020400

08000c5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08e      	sub	sp, #56	; 0x38
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a51      	ldr	r2, [pc, #324]	; (8000dc0 <HAL_I2S_MspInit+0x164>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d14b      	bne.n	8000d16 <HAL_I2S_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
 8000c82:	4b50      	ldr	r3, [pc, #320]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a4f      	ldr	r2, [pc, #316]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	623b      	str	r3, [r7, #32]
 8000c98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a48      	ldr	r2, [pc, #288]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b46      	ldr	r3, [pc, #280]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
 8000cba:	4b42      	ldr	r3, [pc, #264]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a41      	ldr	r2, [pc, #260]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b3f      	ldr	r3, [pc, #252]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4836      	ldr	r0, [pc, #216]	; (8000dc8 <HAL_I2S_MspInit+0x16c>)
 8000cee:	f000 ff8f 	bl	8001c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000cf2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d04:	2305      	movs	r3, #5
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	482f      	ldr	r0, [pc, #188]	; (8000dcc <HAL_I2S_MspInit+0x170>)
 8000d10:	f000 ff7e 	bl	8001c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d14:	e04f      	b.n	8000db6 <HAL_I2S_MspInit+0x15a>
  else if(hi2s->Instance==SPI3)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <HAL_I2S_MspInit+0x174>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d14a      	bne.n	8000db6 <HAL_I2S_MspInit+0x15a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	4a26      	ldr	r2, [pc, #152]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_I2S_MspInit+0x168>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d74:	2310      	movs	r3, #16
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d84:	2306      	movs	r3, #6
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <HAL_I2S_MspInit+0x178>)
 8000d90:	f000 ff3e 	bl	8001c10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d94:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da6:	2306      	movs	r3, #6
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_I2S_MspInit+0x16c>)
 8000db2:	f000 ff2d 	bl	8001c10 <HAL_GPIO_Init>
}
 8000db6:	bf00      	nop
 8000db8:	3738      	adds	r7, #56	; 0x38
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40003800 	.word	0x40003800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020800 	.word	0x40020800
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40003c00 	.word	0x40003c00
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <HAL_SPI_MspInit+0x84>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d12b      	bne.n	8000e52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000e32:	23e0      	movs	r3, #224	; 0xe0
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e42:	2305      	movs	r3, #5
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <HAL_SPI_MspInit+0x8c>)
 8000e4e:	f000 fedf 	bl	8001c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40013000 	.word	0x40013000
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000

08000e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e78:	d10d      	bne.n	8000e96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_TIM_Base_MspInit+0x3c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_TIM_Base_MspInit+0x3c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_TIM_Base_MspInit+0x3c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f8da 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <ADC_IRQHandler+0x10>)
 8000f02:	f000 fa19 	bl	8001338 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200000ac 	.word	0x200000ac

08000f10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <OTG_FS_IRQHandler+0x10>)
 8000f16:	f001 fa9d 	bl	8002454 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000660 	.word	0x20000660

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f007 fe30 	bl	8008bb8 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20010000 	.word	0x20010000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	2000027c 	.word	0x2000027c
 8000f8c:	20000978 	.word	0x20000978

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fba:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	; (8001000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fde:	f7ff ffd7 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f007 fdef 	bl	8008bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fa77 	bl	80004d8 <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ff8:	08008e7c 	.word	0x08008e7c
  ldr r2, =_sbss
 8000ffc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001000:	20000974 	.word	0x20000974

08001004 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <DMA1_Stream0_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <HAL_Init+0x40>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_Init+0x40>)
 800101e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_Init+0x40>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 fdab 	bl	8001b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f808 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fd52 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023c00 	.word	0x40023c00

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fdc3 	bl	8001bf6 <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 fd8b 	bl	8001ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000280 	.word	0x20000280

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000280 	.word	0x20000280

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e033      	b.n	80011b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fcee 	bl	8000b34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b00      	cmp	r3, #0
 8001170:	d118      	bne.n	80011a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800117a:	f023 0302 	bic.w	r3, r3, #2
 800117e:	f043 0202 	orr.w	r2, r3, #2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fb2a 	bl	80017e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
 80011a2:	e001      	b.n	80011a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_ADC_Start_IT+0x1a>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e0a1      	b.n	800131a <HAL_ADC_Start_IT+0x15e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d018      	beq.n	800121e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0201 	orr.w	r2, r2, #1
 80011fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011fc:	4b4a      	ldr	r3, [pc, #296]	; (8001328 <HAL_ADC_Start_IT+0x16c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a4a      	ldr	r2, [pc, #296]	; (800132c <HAL_ADC_Start_IT+0x170>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	0c9a      	lsrs	r2, r3, #18
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001210:	e002      	b.n	8001218 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3b01      	subs	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f9      	bne.n	8001212 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b01      	cmp	r3, #1
 800122a:	d169      	bne.n	8001300 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001256:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800126a:	d106      	bne.n	800127a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	f023 0206 	bic.w	r2, r3, #6
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	645a      	str	r2, [r3, #68]	; 0x44
 8001278:	e002      	b.n	8001280 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <HAL_ADC_Start_IT+0x174>)
 800128a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001294:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012a4:	f043 0320 	orr.w	r3, r3, #32
 80012a8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10f      	bne.n	80012d6 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d129      	bne.n	8001318 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	e020      	b.n	8001318 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a16      	ldr	r2, [pc, #88]	; (8001334 <HAL_ADC_Start_IT+0x178>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d11b      	bne.n	8001318 <HAL_ADC_Start_IT+0x15c>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d114      	bne.n	8001318 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	e00b      	b.n	8001318 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f043 0210 	orr.w	r2, r3, #16
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000000 	.word	0x20000000
 800132c:	431bde83 	.word	0x431bde83
 8001330:	40012300 	.word	0x40012300
 8001334:	40012000 	.word	0x40012000

08001338 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d049      	beq.n	8001402 <HAL_ADC_IRQHandler+0xca>
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d046      	beq.n	8001402 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f003 0310 	and.w	r3, r3, #16
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d12b      	bne.n	80013f2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d127      	bne.n	80013f2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d119      	bne.n	80013f2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0220 	bic.w	r2, r2, #32
 80013cc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d105      	bne.n	80013f2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f043 0201 	orr.w	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fb58 	bl	8000aa8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f06f 0212 	mvn.w	r2, #18
 8001400:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001410:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d057      	beq.n	80014c8 <HAL_ADC_IRQHandler+0x190>
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d054      	beq.n	80014c8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	d105      	bne.n	8001436 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d139      	bne.n	80014b8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800145c:	2b00      	cmp	r3, #0
 800145e:	d12b      	bne.n	80014b8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800146a:	2b00      	cmp	r3, #0
 800146c:	d124      	bne.n	80014b8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001478:	2b00      	cmp	r3, #0
 800147a:	d11d      	bne.n	80014b8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001480:	2b00      	cmp	r3, #0
 8001482:	d119      	bne.n	80014b8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001492:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d105      	bne.n	80014b8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fa8d 	bl	80019d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f06f 020c 	mvn.w	r2, #12
 80014c6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d017      	beq.n	800150e <HAL_ADC_IRQHandler+0x1d6>
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d014      	beq.n	800150e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d10d      	bne.n	800150e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f837 	bl	8001572 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f06f 0201 	mvn.w	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800151c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d015      	beq.n	8001550 <HAL_ADC_IRQHandler+0x218>
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d012      	beq.n	8001550 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f043 0202 	orr.w	r2, r3, #2
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f06f 0220 	mvn.w	r2, #32
 800153e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f820 	bl	8001586 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f06f 0220 	mvn.w	r2, #32
 800154e:	601a      	str	r2, [r3, #0]
  }
}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x1c>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e105      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x228>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b09      	cmp	r3, #9
 80015c6:	d925      	bls.n	8001614 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68d9      	ldr	r1, [r3, #12]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	3b1e      	subs	r3, #30
 80015de:	2207      	movs	r2, #7
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43da      	mvns	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	400a      	ands	r2, r1
 80015ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68d9      	ldr	r1, [r3, #12]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	4603      	mov	r3, r0
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4403      	add	r3, r0
 8001606:	3b1e      	subs	r3, #30
 8001608:	409a      	lsls	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	e022      	b.n	800165a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6919      	ldr	r1, [r3, #16]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	2207      	movs	r2, #7
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	400a      	ands	r2, r1
 8001636:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6919      	ldr	r1, [r3, #16]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	4603      	mov	r3, r0
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4403      	add	r3, r0
 8001650:	409a      	lsls	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b06      	cmp	r3, #6
 8001660:	d824      	bhi.n	80016ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	3b05      	subs	r3, #5
 8001674:	221f      	movs	r2, #31
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	400a      	ands	r2, r1
 8001682:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	3b05      	subs	r3, #5
 800169e:	fa00 f203 	lsl.w	r2, r0, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	635a      	str	r2, [r3, #52]	; 0x34
 80016aa:	e04c      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b0c      	cmp	r3, #12
 80016b2:	d824      	bhi.n	80016fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	3b23      	subs	r3, #35	; 0x23
 80016c6:	221f      	movs	r2, #31
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43da      	mvns	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	400a      	ands	r2, r1
 80016d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	3b23      	subs	r3, #35	; 0x23
 80016f0:	fa00 f203 	lsl.w	r2, r0, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
 80016fc:	e023      	b.n	8001746 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	3b41      	subs	r3, #65	; 0x41
 8001710:	221f      	movs	r2, #31
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	400a      	ands	r2, r1
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	b29b      	uxth	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	3b41      	subs	r3, #65	; 0x41
 800173a:	fa00 f203 	lsl.w	r2, r0, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_ADC_ConfigChannel+0x234>)
 8001748:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <HAL_ADC_ConfigChannel+0x238>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d109      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x1cc>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b12      	cmp	r3, #18
 800175a:	d105      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_ADC_ConfigChannel+0x238>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d123      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x21e>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b10      	cmp	r3, #16
 8001778:	d003      	beq.n	8001782 <HAL_ADC_ConfigChannel+0x1e6>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b11      	cmp	r3, #17
 8001780:	d11b      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b10      	cmp	r3, #16
 8001794:	d111      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_ADC_ConfigChannel+0x23c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_ADC_ConfigChannel+0x240>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	0c9a      	lsrs	r2, r3, #18
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017ac:	e002      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f9      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40012300 	.word	0x40012300
 80017d4:	40012000 	.word	0x40012000
 80017d8:	20000000 	.word	0x20000000
 80017dc:	431bde83 	.word	0x431bde83

080017e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e8:	4b79      	ldr	r3, [pc, #484]	; (80019d0 <ADC_Init+0x1f0>)
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	431a      	orrs	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001814:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	021a      	lsls	r2, r3, #8
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001838:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800185a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6899      	ldr	r1, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <ADC_Init+0x1f4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d022      	beq.n	80018be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001886:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6899      	ldr	r1, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6899      	ldr	r1, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	e00f      	b.n	80018de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0202 	bic.w	r2, r2, #2
 80018ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6899      	ldr	r1, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7e1b      	ldrb	r3, [r3, #24]
 80018f8:	005a      	lsls	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d01b      	beq.n	8001944 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800191a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800192a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6859      	ldr	r1, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	3b01      	subs	r3, #1
 8001938:	035a      	lsls	r2, r3, #13
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	e007      	b.n	8001954 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001952:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	3b01      	subs	r3, #1
 8001970:	051a      	lsls	r2, r3, #20
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6899      	ldr	r1, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001996:	025a      	lsls	r2, r3, #9
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	029a      	lsls	r2, r3, #10
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	609a      	str	r2, [r3, #8]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40012300 	.word	0x40012300
 80019d4:	0f000001 	.word	0x0f000001

080019d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1e:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	60d3      	str	r3, [r2, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <__NVIC_GetPriorityGrouping+0x18>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 0307 	and.w	r3, r3, #7
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	db0b      	blt.n	8001a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f003 021f 	and.w	r2, r3, #31
 8001a68:	4907      	ldr	r1, [pc, #28]	; (8001a88 <__NVIC_EnableIRQ+0x38>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	2001      	movs	r0, #1
 8001a72:	fa00 f202 	lsl.w	r2, r0, r2
 8001a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000e100 	.word	0xe000e100

08001a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	db0a      	blt.n	8001ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	490c      	ldr	r1, [pc, #48]	; (8001ad8 <__NVIC_SetPriority+0x4c>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab4:	e00a      	b.n	8001acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4908      	ldr	r1, [pc, #32]	; (8001adc <__NVIC_SetPriority+0x50>)
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	761a      	strb	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000e100 	.word	0xe000e100
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f1c3 0307 	rsb	r3, r3, #7
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	bf28      	it	cs
 8001afe:	2304      	movcs	r3, #4
 8001b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3304      	adds	r3, #4
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d902      	bls.n	8001b10 <NVIC_EncodePriority+0x30>
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3b03      	subs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <NVIC_EncodePriority+0x32>
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	401a      	ands	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	4313      	orrs	r3, r2
         );
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3724      	adds	r7, #36	; 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b58:	d301      	bcc.n	8001b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00f      	b.n	8001b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <SysTick_Config+0x40>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b66:	210f      	movs	r1, #15
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f7ff ff8e 	bl	8001a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <SysTick_Config+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <SysTick_Config+0x40>)
 8001b78:	2207      	movs	r2, #7
 8001b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	e000e010 	.word	0xe000e010

08001b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff29 	bl	80019ec <__NVIC_SetPriorityGrouping>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb4:	f7ff ff3e 	bl	8001a34 <__NVIC_GetPriorityGrouping>
 8001bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	6978      	ldr	r0, [r7, #20]
 8001bc0:	f7ff ff8e 	bl	8001ae0 <NVIC_EncodePriority>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff5d 	bl	8001a8c <__NVIC_SetPriority>
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff31 	bl	8001a50 <__NVIC_EnableIRQ>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffa2 	bl	8001b48 <SysTick_Config>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	e159      	b.n	8001ee0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	f040 8148 	bne.w	8001eda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d005      	beq.n	8001c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d130      	bne.n	8001cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 0201 	and.w	r2, r3, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d017      	beq.n	8001d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d123      	bne.n	8001d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3208      	adds	r2, #8
 8001d4e:	69b9      	ldr	r1, [r7, #24]
 8001d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80a2 	beq.w	8001eda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <HAL_GPIO_Init+0x2e8>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a56      	ldr	r2, [pc, #344]	; (8001ef8 <HAL_GPIO_Init+0x2e8>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b54      	ldr	r3, [pc, #336]	; (8001ef8 <HAL_GPIO_Init+0x2e8>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db2:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_GPIO_Init+0x2ec>)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	220f      	movs	r2, #15
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a49      	ldr	r2, [pc, #292]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d019      	beq.n	8001e12 <HAL_GPIO_Init+0x202>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a48      	ldr	r2, [pc, #288]	; (8001f04 <HAL_GPIO_Init+0x2f4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0x1fe>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a47      	ldr	r2, [pc, #284]	; (8001f08 <HAL_GPIO_Init+0x2f8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00d      	beq.n	8001e0a <HAL_GPIO_Init+0x1fa>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a46      	ldr	r2, [pc, #280]	; (8001f0c <HAL_GPIO_Init+0x2fc>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x1f6>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a45      	ldr	r2, [pc, #276]	; (8001f10 <HAL_GPIO_Init+0x300>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_GPIO_Init+0x1f2>
 8001dfe:	2304      	movs	r3, #4
 8001e00:	e008      	b.n	8001e14 <HAL_GPIO_Init+0x204>
 8001e02:	2307      	movs	r3, #7
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x204>
 8001e06:	2303      	movs	r3, #3
 8001e08:	e004      	b.n	8001e14 <HAL_GPIO_Init+0x204>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_Init+0x204>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_GPIO_Init+0x204>
 8001e12:	2300      	movs	r3, #0
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	f002 0203 	and.w	r2, r2, #3
 8001e1a:	0092      	lsls	r2, r2, #2
 8001e1c:	4093      	lsls	r3, r2
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e24:	4935      	ldr	r1, [pc, #212]	; (8001efc <HAL_GPIO_Init+0x2ec>)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e32:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_GPIO_Init+0x304>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e56:	4a2f      	ldr	r2, [pc, #188]	; (8001f14 <HAL_GPIO_Init+0x304>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_GPIO_Init+0x304>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e80:	4a24      	ldr	r2, [pc, #144]	; (8001f14 <HAL_GPIO_Init+0x304>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e86:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <HAL_GPIO_Init+0x304>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <HAL_GPIO_Init+0x304>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <HAL_GPIO_Init+0x304>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <HAL_GPIO_Init+0x304>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3301      	adds	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b0f      	cmp	r3, #15
 8001ee4:	f67f aea2 	bls.w	8001c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40013800 	.word	0x40013800
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40020400 	.word	0x40020400
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40013c00 	.word	0x40013c00

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f34:	e003      	b.n	8001f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f5c:	887a      	ldrh	r2, [r7, #2]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	041a      	lsls	r2, r3, #16
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	400b      	ands	r3, r1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	619a      	str	r2, [r3, #24]
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f80:	b08f      	sub	sp, #60	; 0x3c
 8001f82:	af0a      	add	r7, sp, #40	; 0x28
 8001f84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e054      	b.n	800203a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f006 fb5a 	bl	8008664 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fb88 	bl	80056e4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	687e      	ldr	r6, [r7, #4]
 8001fdc:	466d      	mov	r5, sp
 8001fde:	f106 0410 	add.w	r4, r6, #16
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fee:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ff2:	1d33      	adds	r3, r6, #4
 8001ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff6:	6838      	ldr	r0, [r7, #0]
 8001ff8:	f003 fb02 	bl	8005600 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f003 fb7f 	bl	8005706 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	687e      	ldr	r6, [r7, #4]
 8002010:	466d      	mov	r5, sp
 8002012:	f106 0410 	add.w	r4, r6, #16
 8002016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002022:	e885 0003 	stmia.w	r5, {r0, r1}
 8002026:	1d33      	adds	r3, r6, #4
 8002028:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202a:	6838      	ldr	r0, [r7, #0]
 800202c:	f003 fd08 	bl	8005a40 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002042 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002042:	b590      	push	{r4, r7, lr}
 8002044:	b089      	sub	sp, #36	; 0x24
 8002046:	af04      	add	r7, sp, #16
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	4608      	mov	r0, r1
 800204c:	4611      	mov	r1, r2
 800204e:	461a      	mov	r2, r3
 8002050:	4603      	mov	r3, r0
 8002052:	70fb      	strb	r3, [r7, #3]
 8002054:	460b      	mov	r3, r1
 8002056:	70bb      	strb	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_HCD_HC_Init+0x28>
 8002066:	2302      	movs	r3, #2
 8002068:	e076      	b.n	8002158 <HAL_HCD_HC_Init+0x116>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	333d      	adds	r3, #61	; 0x3d
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	3338      	adds	r3, #56	; 0x38
 8002092:	787a      	ldrb	r2, [r7, #1]
 8002094:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	212c      	movs	r1, #44	; 0x2c
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	3340      	adds	r3, #64	; 0x40
 80020a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020a6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3339      	adds	r3, #57	; 0x39
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	333f      	adds	r3, #63	; 0x3f
 80020c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	78ba      	ldrb	r2, [r7, #2]
 80020d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020d6:	b2d0      	uxtb	r0, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	333a      	adds	r3, #58	; 0x3a
 80020e4:	4602      	mov	r2, r0
 80020e6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80020e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da09      	bge.n	8002104 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	333b      	adds	r3, #59	; 0x3b
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e008      	b.n	8002116 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	333b      	adds	r3, #59	; 0x3b
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	333c      	adds	r3, #60	; 0x3c
 8002124:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002128:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	787c      	ldrb	r4, [r7, #1]
 8002130:	78ba      	ldrb	r2, [r7, #2]
 8002132:	78f9      	ldrb	r1, [r7, #3]
 8002134:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	4623      	mov	r3, r4
 8002146:	f003 fe01 	bl	8005d4c <USB_HC_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}

08002160 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_HCD_HC_Halt+0x1e>
 800217a:	2302      	movs	r3, #2
 800217c:	e00f      	b.n	800219e <HAL_HCD_HC_Halt+0x3e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f004 f851 	bl	8006236 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	4608      	mov	r0, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	461a      	mov	r2, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	70fb      	strb	r3, [r7, #3]
 80021ba:	460b      	mov	r3, r1
 80021bc:	70bb      	strb	r3, [r7, #2]
 80021be:	4613      	mov	r3, r2
 80021c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	333b      	adds	r3, #59	; 0x3b
 80021d0:	78ba      	ldrb	r2, [r7, #2]
 80021d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	333f      	adds	r3, #63	; 0x3f
 80021e2:	787a      	ldrb	r2, [r7, #1]
 80021e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021e6:	7c3b      	ldrb	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d112      	bne.n	8002212 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3342      	adds	r3, #66	; 0x42
 80021fa:	2203      	movs	r2, #3
 80021fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	333d      	adds	r3, #61	; 0x3d
 800220c:	7f3a      	ldrb	r2, [r7, #28]
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	e008      	b.n	8002224 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3342      	adds	r3, #66	; 0x42
 8002220:	2202      	movs	r2, #2
 8002222:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002224:	787b      	ldrb	r3, [r7, #1]
 8002226:	2b03      	cmp	r3, #3
 8002228:	f200 80c6 	bhi.w	80023b8 <HAL_HCD_HC_SubmitRequest+0x210>
 800222c:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002232:	bf00      	nop
 8002234:	08002245 	.word	0x08002245
 8002238:	080023a5 	.word	0x080023a5
 800223c:	080022a9 	.word	0x080022a9
 8002240:	08002327 	.word	0x08002327
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002244:	7c3b      	ldrb	r3, [r7, #16]
 8002246:	2b01      	cmp	r3, #1
 8002248:	f040 80b8 	bne.w	80023bc <HAL_HCD_HC_SubmitRequest+0x214>
 800224c:	78bb      	ldrb	r3, [r7, #2]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 80b4 	bne.w	80023bc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002254:	8b3b      	ldrh	r3, [r7, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d108      	bne.n	800226c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3355      	adds	r3, #85	; 0x55
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3355      	adds	r3, #85	; 0x55
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d109      	bne.n	8002294 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3342      	adds	r3, #66	; 0x42
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002292:	e093      	b.n	80023bc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3342      	adds	r3, #66	; 0x42
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
      break;
 80022a6:	e089      	b.n	80023bc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022a8:	78bb      	ldrb	r3, [r7, #2]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11d      	bne.n	80022ea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3355      	adds	r3, #85	; 0x55
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	3342      	adds	r3, #66	; 0x42
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022d4:	e073      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	3342      	adds	r3, #66	; 0x42
 80022e4:	2202      	movs	r2, #2
 80022e6:	701a      	strb	r2, [r3, #0]
      break;
 80022e8:	e069      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	3354      	adds	r3, #84	; 0x54
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	3342      	adds	r3, #66	; 0x42
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
      break;
 8002310:	e055      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	3342      	adds	r3, #66	; 0x42
 8002320:	2202      	movs	r2, #2
 8002322:	701a      	strb	r2, [r3, #0]
      break;
 8002324:	e04b      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002326:	78bb      	ldrb	r3, [r7, #2]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d11d      	bne.n	8002368 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3355      	adds	r3, #85	; 0x55
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3342      	adds	r3, #66	; 0x42
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002352:	e034      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3342      	adds	r3, #66	; 0x42
 8002362:	2202      	movs	r2, #2
 8002364:	701a      	strb	r2, [r3, #0]
      break;
 8002366:	e02a      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3354      	adds	r3, #84	; 0x54
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3342      	adds	r3, #66	; 0x42
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
      break;
 800238e:	e016      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3342      	adds	r3, #66	; 0x42
 800239e:	2202      	movs	r2, #2
 80023a0:	701a      	strb	r2, [r3, #0]
      break;
 80023a2:	e00c      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3342      	adds	r3, #66	; 0x42
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
      break;
 80023b6:	e002      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80023b8:	bf00      	nop
 80023ba:	e000      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80023bc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3344      	adds	r3, #68	; 0x44
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	8b3a      	ldrh	r2, [r7, #24]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	202c      	movs	r0, #44	; 0x2c
 80023d8:	fb00 f303 	mul.w	r3, r0, r3
 80023dc:	440b      	add	r3, r1
 80023de:	334c      	adds	r3, #76	; 0x4c
 80023e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	3360      	adds	r3, #96	; 0x60
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3350      	adds	r3, #80	; 0x50
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	3339      	adds	r3, #57	; 0x39
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3361      	adds	r3, #97	; 0x61
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	222c      	movs	r2, #44	; 0x2c
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	3338      	adds	r3, #56	; 0x38
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	18d1      	adds	r1, r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	f003 fda4 	bl	8005f90 <USB_HC_StartXfer>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop

08002454 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 faa5 	bl	80059ba <USB_GetMode>
 8002470:	4603      	mov	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	f040 80f6 	bne.w	8002664 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f003 fa89 	bl	8005994 <USB_ReadInterrupts>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80ec 	beq.w	8002662 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 fa80 	bl	8005994 <USB_ReadInterrupts>
 8002494:	4603      	mov	r3, r0
 8002496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800249e:	d104      	bne.n	80024aa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 fa70 	bl	8005994 <USB_ReadInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024be:	d104      	bne.n	80024ca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fa60 	bl	8005994 <USB_ReadInterrupts>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024de:	d104      	bne.n	80024ea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 fa50 	bl	8005994 <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d103      	bne.n	8002506 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2202      	movs	r2, #2
 8002504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fa42 	bl	8005994 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800251a:	d11c      	bne.n	8002556 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002524:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002536:	2110      	movs	r1, #16
 8002538:	6938      	ldr	r0, [r7, #16]
 800253a:	f003 f931 	bl	80057a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800253e:	6938      	ldr	r0, [r7, #16]
 8002540:	f003 f962 	bl	8005808 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2101      	movs	r1, #1
 800254a:	4618      	mov	r0, r3
 800254c:	f003 fb38 	bl	8005bc0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f006 f905 	bl	8008760 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f003 fa1a 	bl	8005994 <USB_ReadInterrupts>
 8002560:	4603      	mov	r3, r0
 8002562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002566:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800256a:	d102      	bne.n	8002572 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f001 f89e 	bl	80036ae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f003 fa0c 	bl	8005994 <USB_ReadInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b08      	cmp	r3, #8
 8002584:	d106      	bne.n	8002594 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f006 f8ce 	bl	8008728 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2208      	movs	r2, #8
 8002592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f003 f9fb 	bl	8005994 <USB_ReadInterrupts>
 800259e:	4603      	mov	r3, r0
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d101      	bne.n	80025ac <HAL_HCD_IRQHandler+0x158>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_HCD_IRQHandler+0x15a>
 80025ac:	2300      	movs	r3, #0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d012      	beq.n	80025d8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0210 	bic.w	r2, r2, #16
 80025c0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 ffa1 	bl	800350a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0210 	orr.w	r2, r2, #16
 80025d6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 f9d9 	bl	8005994 <USB_ReadInterrupts>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ec:	d13a      	bne.n	8002664 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fe0e 	bl	8006214 <USB_HC_ReadInterrupt>
 80025f8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e025      	b.n	800264c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d018      	beq.n	8002646 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800262a:	d106      	bne.n	800263a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f8ab 	bl	800278e <HCD_HC_IN_IRQHandler>
 8002638:	e005      	b.n	8002646 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4619      	mov	r1, r3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fbf9 	bl	8002e38 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	429a      	cmp	r2, r3
 8002654:	d3d4      	bcc.n	8002600 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	e000      	b.n	8002664 <HAL_HCD_IRQHandler+0x210>
      return;
 8002662:	bf00      	nop
    }
  }
}
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_HCD_Start+0x16>
 800267c:	2302      	movs	r3, #2
 800267e:	e013      	b.n	80026a8 <HAL_HCD_Start+0x3e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2101      	movs	r1, #1
 800268e:	4618      	mov	r0, r3
 8002690:	f003 fafa 	bl	8005c88 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f003 f812 	bl	80056c2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_HCD_Stop+0x16>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e00d      	b.n	80026e2 <HAL_HCD_Stop+0x32>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 fee8 	bl	80064a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fa9c 	bl	8005c34 <USB_ResetPort>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3360      	adds	r3, #96	; 0x60
 8002720:	781b      	ldrb	r3, [r3, #0]
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3350      	adds	r3, #80	; 0x50
 8002748:	681b      	ldr	r3, [r3, #0]
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fae0 	bl	8005d28 <USB_GetCurrentFrame>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 fabb 	bl	8005cfa <USB_GetHostSpeed>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d11a      	bne.n	80027f4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	461a      	mov	r2, r3
 80027cc:	2304      	movs	r3, #4
 80027ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3361      	adds	r3, #97	; 0x61
 80027de:	2206      	movs	r2, #6
 80027e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 fd22 	bl	8006236 <USB_HC_Halt>
 80027f2:	e0af      	b.n	8002954 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280a:	d11b      	bne.n	8002844 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	461a      	mov	r2, r3
 800281a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800281e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3361      	adds	r3, #97	; 0x61
 800282e:	2207      	movs	r2, #7
 8002830:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f003 fcfa 	bl	8006236 <USB_HC_Halt>
 8002842:	e087      	b.n	8002954 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b20      	cmp	r3, #32
 8002858:	d109      	bne.n	800286e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	461a      	mov	r2, r3
 8002868:	2320      	movs	r3, #32
 800286a:	6093      	str	r3, [r2, #8]
 800286c:	e072      	b.n	8002954 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b08      	cmp	r3, #8
 8002882:	d11a      	bne.n	80028ba <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	2308      	movs	r3, #8
 8002894:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3361      	adds	r3, #97	; 0x61
 80028a4:	2205      	movs	r2, #5
 80028a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 fcbf 	bl	8006236 <USB_HC_Halt>
 80028b8:	e04c      	b.n	8002954 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d0:	d11b      	bne.n	800290a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	461a      	mov	r2, r3
 80028e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3361      	adds	r3, #97	; 0x61
 80028f4:	2208      	movs	r2, #8
 80028f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f003 fc97 	bl	8006236 <USB_HC_Halt>
 8002908:	e024      	b.n	8002954 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	2b80      	cmp	r3, #128	; 0x80
 800291e:	d119      	bne.n	8002954 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3361      	adds	r3, #97	; 0x61
 8002940:	2206      	movs	r2, #6
 8002942:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	4611      	mov	r1, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f003 fc71 	bl	8006236 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800296a:	d112      	bne.n	8002992 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fc5d 	bl	8006236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002988:	461a      	mov	r2, r3
 800298a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800298e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002990:	e24e      	b.n	8002e30 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	f040 80df 	bne.w	8002b68 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d019      	beq.n	80029e6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3348      	adds	r3, #72	; 0x48
 80029c0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	0159      	lsls	r1, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	440b      	add	r3, r1
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029d4:	1ad2      	subs	r2, r2, r3
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	202c      	movs	r0, #44	; 0x2c
 80029dc:	fb00 f303 	mul.w	r3, r0, r3
 80029e0:	440b      	add	r3, r1
 80029e2:	3350      	adds	r3, #80	; 0x50
 80029e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3361      	adds	r3, #97	; 0x61
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	335c      	adds	r3, #92	; 0x5c
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	461a      	mov	r2, r3
 8002a18:	2301      	movs	r3, #1
 8002a1a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	333f      	adds	r3, #63	; 0x3f
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	333f      	adds	r3, #63	; 0x3f
 8002a3e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d111      	bne.n	8002a68 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fbf1 	bl	8006236 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	461a      	mov	r2, r3
 8002a62:	2310      	movs	r3, #16
 8002a64:	6093      	str	r3, [r2, #8]
 8002a66:	e03a      	b.n	8002ade <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	333f      	adds	r3, #63	; 0x3f
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d009      	beq.n	8002a90 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	333f      	adds	r3, #63	; 0x3f
 8002a8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d126      	bne.n	8002ade <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	0151      	lsls	r1, r2, #5
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	440a      	add	r2, r1
 8002aa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002aae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3360      	adds	r3, #96	; 0x60
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	b2d9      	uxtb	r1, r3
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	202c      	movs	r0, #44	; 0x2c
 8002acc:	fb00 f303 	mul.w	r3, r0, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3360      	adds	r3, #96	; 0x60
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f005 fe4f 	bl	800877c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d12b      	bne.n	8002b3e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3348      	adds	r3, #72	; 0x48
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	202c      	movs	r0, #44	; 0x2c
 8002afc:	fb00 f202 	mul.w	r2, r0, r2
 8002b00:	440a      	add	r2, r1
 8002b02:	3240      	adds	r2, #64	; 0x40
 8002b04:	8812      	ldrh	r2, [r2, #0]
 8002b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 818e 	beq.w	8002e30 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3354      	adds	r3, #84	; 0x54
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	f083 0301 	eor.w	r3, r3, #1
 8002b28:	b2d8      	uxtb	r0, r3
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3354      	adds	r3, #84	; 0x54
 8002b38:	4602      	mov	r2, r0
 8002b3a:	701a      	strb	r2, [r3, #0]
}
 8002b3c:	e178      	b.n	8002e30 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3354      	adds	r3, #84	; 0x54
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	f083 0301 	eor.w	r3, r3, #1
 8002b52:	b2d8      	uxtb	r0, r3
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3354      	adds	r3, #84	; 0x54
 8002b62:	4602      	mov	r2, r0
 8002b64:	701a      	strb	r2, [r3, #0]
}
 8002b66:	e163      	b.n	8002e30 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	f040 80f6 	bne.w	8002d6c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3361      	adds	r3, #97	; 0x61
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d109      	bne.n	8002ba8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3360      	adds	r3, #96	; 0x60
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e0c9      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3361      	adds	r3, #97	; 0x61
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d109      	bne.n	8002bd0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3360      	adds	r3, #96	; 0x60
 8002bca:	2205      	movs	r2, #5
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e0b5      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3361      	adds	r3, #97	; 0x61
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b06      	cmp	r3, #6
 8002be2:	d009      	beq.n	8002bf8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3361      	adds	r3, #97	; 0x61
 8002bf2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d150      	bne.n	8002c9a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	335c      	adds	r3, #92	; 0x5c
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	202c      	movs	r0, #44	; 0x2c
 8002c10:	fb00 f303 	mul.w	r3, r0, r3
 8002c14:	440b      	add	r3, r1
 8002c16:	335c      	adds	r3, #92	; 0x5c
 8002c18:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	335c      	adds	r3, #92	; 0x5c
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d912      	bls.n	8002c54 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	335c      	adds	r3, #92	; 0x5c
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3360      	adds	r3, #96	; 0x60
 8002c4e:	2204      	movs	r2, #4
 8002c50:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c52:	e073      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3360      	adds	r3, #96	; 0x60
 8002c62:	2202      	movs	r2, #2
 8002c64:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c7c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c84:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c98:	e050      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3361      	adds	r3, #97	; 0x61
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d122      	bne.n	8002cf4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3360      	adds	r3, #96	; 0x60
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cd6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cde:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e023      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3361      	adds	r3, #97	; 0x61
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b07      	cmp	r3, #7
 8002d06:	d119      	bne.n	8002d3c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	335c      	adds	r3, #92	; 0x5c
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	202c      	movs	r0, #44	; 0x2c
 8002d20:	fb00 f303 	mul.w	r3, r0, r3
 8002d24:	440b      	add	r3, r1
 8002d26:	335c      	adds	r3, #92	; 0x5c
 8002d28:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	212c      	movs	r1, #44	; 0x2c
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	3360      	adds	r3, #96	; 0x60
 8002d38:	2204      	movs	r2, #4
 8002d3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	b2d9      	uxtb	r1, r3
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	202c      	movs	r0, #44	; 0x2c
 8002d58:	fb00 f303 	mul.w	r3, r0, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3360      	adds	r3, #96	; 0x60
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f005 fd09 	bl	800877c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d6a:	e061      	b.n	8002e30 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b10      	cmp	r3, #16
 8002d80:	d156      	bne.n	8002e30 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	333f      	adds	r3, #63	; 0x3f
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d111      	bne.n	8002dba <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	335c      	adds	r3, #92	; 0x5c
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fa3f 	bl	8006236 <USB_HC_Halt>
 8002db8:	e031      	b.n	8002e1e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	333f      	adds	r3, #63	; 0x3f
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	333f      	adds	r3, #63	; 0x3f
 8002ddc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d11d      	bne.n	8002e1e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	335c      	adds	r3, #92	; 0x5c
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d110      	bne.n	8002e1e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	3361      	adds	r3, #97	; 0x61
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fa0c 	bl	8006236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	6093      	str	r3, [r2, #8]
}
 8002e30:	bf00      	nop
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d11a      	bne.n	8002e9e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e74:	461a      	mov	r2, r3
 8002e76:	2304      	movs	r3, #4
 8002e78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3361      	adds	r3, #97	; 0x61
 8002e88:	2206      	movs	r2, #6
 8002e8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f003 f9cd 	bl	8006236 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002e9c:	e331      	b.n	8003502 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d12e      	bne.n	8002f12 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	212c      	movs	r1, #44	; 0x2c
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	333d      	adds	r3, #61	; 0x3d
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	f040 8313 	bne.w	8003502 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	333d      	adds	r3, #61	; 0x3d
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	212c      	movs	r1, #44	; 0x2c
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	3360      	adds	r3, #96	; 0x60
 8002efc:	2202      	movs	r2, #2
 8002efe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 f993 	bl	8006236 <USB_HC_Halt>
}
 8002f10:	e2f7      	b.n	8003502 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f28:	d112      	bne.n	8002f50 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	461a      	mov	r2, r3
 8002f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 f974 	bl	8006236 <USB_HC_Halt>
}
 8002f4e:	e2d8      	b.n	8003502 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d140      	bne.n	8002fe8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	335c      	adds	r3, #92	; 0x5c
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	d111      	bne.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	333d      	adds	r3, #61	; 0x3d
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	461a      	mov	r2, r3
 8002fae:	2340      	movs	r3, #64	; 0x40
 8002fb0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3361      	adds	r3, #97	; 0x61
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 f928 	bl	8006236 <USB_HC_Halt>
}
 8002fe6:	e28c      	b.n	8003502 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	d12c      	bne.n	8003058 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3361      	adds	r3, #97	; 0x61
 800300c:	2204      	movs	r2, #4
 800300e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	333d      	adds	r3, #61	; 0x3d
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	335c      	adds	r3, #92	; 0x5c
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f003 f8f9 	bl	8006236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	461a      	mov	r2, r3
 8003052:	2340      	movs	r3, #64	; 0x40
 8003054:	6093      	str	r3, [r2, #8]
}
 8003056:	e254      	b.n	8003502 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b08      	cmp	r3, #8
 800306c:	d11a      	bne.n	80030a4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	4413      	add	r3, r2
 8003076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307a:	461a      	mov	r2, r3
 800307c:	2308      	movs	r3, #8
 800307e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	212c      	movs	r1, #44	; 0x2c
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	4413      	add	r3, r2
 800308c:	3361      	adds	r3, #97	; 0x61
 800308e:	2205      	movs	r2, #5
 8003090:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f003 f8ca 	bl	8006236 <USB_HC_Halt>
}
 80030a2:	e22e      	b.n	8003502 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d140      	bne.n	800313c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	212c      	movs	r1, #44	; 0x2c
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	335c      	adds	r3, #92	; 0x5c
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3361      	adds	r3, #97	; 0x61
 80030da:	2203      	movs	r2, #3
 80030dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	333d      	adds	r3, #61	; 0x3d
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d112      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	333c      	adds	r3, #60	; 0x3c
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	333d      	adds	r3, #61	; 0x3d
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f003 f887 	bl	8006236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	461a      	mov	r2, r3
 8003136:	2310      	movs	r3, #16
 8003138:	6093      	str	r3, [r2, #8]
}
 800313a:	e1e2      	b.n	8003502 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314e:	2b80      	cmp	r3, #128	; 0x80
 8003150:	d164      	bne.n	800321c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d111      	bne.n	800317e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	212c      	movs	r1, #44	; 0x2c
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	3361      	adds	r3, #97	; 0x61
 8003168:	2206      	movs	r2, #6
 800316a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f003 f85d 	bl	8006236 <USB_HC_Halt>
 800317c:	e044      	b.n	8003208 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	335c      	adds	r3, #92	; 0x5c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	202c      	movs	r0, #44	; 0x2c
 8003196:	fb00 f303 	mul.w	r3, r0, r3
 800319a:	440b      	add	r3, r1
 800319c:	335c      	adds	r3, #92	; 0x5c
 800319e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	335c      	adds	r3, #92	; 0x5c
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d920      	bls.n	80031f6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	335c      	adds	r3, #92	; 0x5c
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	3360      	adds	r3, #96	; 0x60
 80031d4:	2204      	movs	r2, #4
 80031d6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	b2d9      	uxtb	r1, r3
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	202c      	movs	r0, #44	; 0x2c
 80031e2:	fb00 f303 	mul.w	r3, r0, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	3360      	adds	r3, #96	; 0x60
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f005 fac4 	bl	800877c <HAL_HCD_HC_NotifyURBChange_Callback>
 80031f4:	e008      	b.n	8003208 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3360      	adds	r3, #96	; 0x60
 8003204:	2202      	movs	r2, #2
 8003206:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	4413      	add	r3, r2
 8003210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003214:	461a      	mov	r2, r3
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	6093      	str	r3, [r2, #8]
}
 800321a:	e172      	b.n	8003502 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	d11b      	bne.n	800326c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	3361      	adds	r3, #97	; 0x61
 8003242:	2208      	movs	r2, #8
 8003244:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f002 fff0 	bl	8006236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	461a      	mov	r2, r3
 8003264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003268:	6093      	str	r3, [r2, #8]
}
 800326a:	e14a      	b.n	8003502 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b02      	cmp	r3, #2
 8003280:	f040 813f 	bne.w	8003502 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3361      	adds	r3, #97	; 0x61
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d17d      	bne.n	8003394 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3360      	adds	r3, #96	; 0x60
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	333f      	adds	r3, #63	; 0x3f
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d00a      	beq.n	80032d4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	333f      	adds	r3, #63	; 0x3f
 80032cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	f040 8100 	bne.w	80034d4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d113      	bne.n	8003304 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3355      	adds	r3, #85	; 0x55
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	f083 0301 	eor.w	r3, r3, #1
 80032f0:	b2d8      	uxtb	r0, r3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	3355      	adds	r3, #85	; 0x55
 8003300:	4602      	mov	r2, r0
 8003302:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b01      	cmp	r3, #1
 800330a:	f040 80e3 	bne.w	80034d4 <HCD_HC_OUT_IRQHandler+0x69c>
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	334c      	adds	r3, #76	; 0x4c
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80d8 	beq.w	80034d4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	212c      	movs	r1, #44	; 0x2c
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	4413      	add	r3, r2
 8003330:	334c      	adds	r3, #76	; 0x4c
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	202c      	movs	r0, #44	; 0x2c
 800333a:	fb00 f202 	mul.w	r2, r0, r2
 800333e:	440a      	add	r2, r1
 8003340:	3240      	adds	r2, #64	; 0x40
 8003342:	8812      	ldrh	r2, [r2, #0]
 8003344:	4413      	add	r3, r2
 8003346:	3b01      	subs	r3, #1
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	202c      	movs	r0, #44	; 0x2c
 800334e:	fb00 f202 	mul.w	r2, r0, r2
 8003352:	440a      	add	r2, r1
 8003354:	3240      	adds	r2, #64	; 0x40
 8003356:	8812      	ldrh	r2, [r2, #0]
 8003358:	fbb3 f3f2 	udiv	r3, r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80b5 	beq.w	80034d4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	3355      	adds	r3, #85	; 0x55
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	f083 0301 	eor.w	r3, r3, #1
 800337e:	b2d8      	uxtb	r0, r3
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	3355      	adds	r3, #85	; 0x55
 800338e:	4602      	mov	r2, r0
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e09f      	b.n	80034d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3361      	adds	r3, #97	; 0x61
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d109      	bne.n	80033bc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	3360      	adds	r3, #96	; 0x60
 80033b6:	2202      	movs	r2, #2
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e08b      	b.n	80034d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3361      	adds	r3, #97	; 0x61
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d109      	bne.n	80033e4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	3360      	adds	r3, #96	; 0x60
 80033de:	2202      	movs	r2, #2
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e077      	b.n	80034d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3361      	adds	r3, #97	; 0x61
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	d109      	bne.n	800340c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3360      	adds	r3, #96	; 0x60
 8003406:	2205      	movs	r2, #5
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	e063      	b.n	80034d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	3361      	adds	r3, #97	; 0x61
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d009      	beq.n	8003434 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	3361      	adds	r3, #97	; 0x61
 800342e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003430:	2b08      	cmp	r3, #8
 8003432:	d14f      	bne.n	80034d4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	335c      	adds	r3, #92	; 0x5c
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	202c      	movs	r0, #44	; 0x2c
 800344c:	fb00 f303 	mul.w	r3, r0, r3
 8003450:	440b      	add	r3, r1
 8003452:	335c      	adds	r3, #92	; 0x5c
 8003454:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	335c      	adds	r3, #92	; 0x5c
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d912      	bls.n	8003490 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	335c      	adds	r3, #92	; 0x5c
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	3360      	adds	r3, #96	; 0x60
 800348a:	2204      	movs	r2, #4
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e021      	b.n	80034d4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3360      	adds	r3, #96	; 0x60
 800349e:	2202      	movs	r2, #2
 80034a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034b8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034c0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ce:	461a      	mov	r2, r3
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	461a      	mov	r2, r3
 80034e2:	2302      	movs	r3, #2
 80034e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	b2d9      	uxtb	r1, r3
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	202c      	movs	r0, #44	; 0x2c
 80034f0:	fb00 f303 	mul.w	r3, r0, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3360      	adds	r3, #96	; 0x60
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f005 f93d 	bl	800877c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003502:	bf00      	nop
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b08a      	sub	sp, #40	; 0x28
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	0c5b      	lsrs	r3, r3, #17
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800353e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d004      	beq.n	8003550 <HCD_RXQLVL_IRQHandler+0x46>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b05      	cmp	r3, #5
 800354a:	f000 80a9 	beq.w	80036a0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800354e:	e0aa      	b.n	80036a6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80a6 	beq.w	80036a4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3344      	adds	r3, #68	; 0x44
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 809b 	beq.w	80036a4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3350      	adds	r3, #80	; 0x50
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	441a      	add	r2, r3
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	202c      	movs	r0, #44	; 0x2c
 8003588:	fb00 f303 	mul.w	r3, r0, r3
 800358c:	440b      	add	r3, r1
 800358e:	334c      	adds	r3, #76	; 0x4c
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d87a      	bhi.n	800368c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	212c      	movs	r1, #44	; 0x2c
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	3344      	adds	r3, #68	; 0x44
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	b292      	uxth	r2, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	f002 f998 	bl	80058e4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3344      	adds	r3, #68	; 0x44
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	441a      	add	r2, r3
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	202c      	movs	r0, #44	; 0x2c
 80035ce:	fb00 f303 	mul.w	r3, r0, r3
 80035d2:	440b      	add	r3, r1
 80035d4:	3344      	adds	r3, #68	; 0x44
 80035d6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3350      	adds	r3, #80	; 0x50
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	441a      	add	r2, r3
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	202c      	movs	r0, #44	; 0x2c
 80035f2:	fb00 f303 	mul.w	r3, r0, r3
 80035f6:	440b      	add	r3, r1
 80035f8:	3350      	adds	r3, #80	; 0x50
 80035fa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	0cdb      	lsrs	r3, r3, #19
 800360c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003610:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	3340      	adds	r3, #64	; 0x40
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4293      	cmp	r3, r2
 8003628:	d13c      	bne.n	80036a4 <HCD_RXQLVL_IRQHandler+0x19a>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d039      	beq.n	80036a4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003646:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800364e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	461a      	mov	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	3354      	adds	r3, #84	; 0x54
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	f083 0301 	eor.w	r3, r3, #1
 8003676:	b2d8      	uxtb	r0, r3
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3354      	adds	r3, #84	; 0x54
 8003686:	4602      	mov	r2, r0
 8003688:	701a      	strb	r2, [r3, #0]
      break;
 800368a:	e00b      	b.n	80036a4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3360      	adds	r3, #96	; 0x60
 800369a:	2204      	movs	r2, #4
 800369c:	701a      	strb	r2, [r3, #0]
      break;
 800369e:	e001      	b.n	80036a4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80036a0:	bf00      	nop
 80036a2:	e000      	b.n	80036a6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80036a4:	bf00      	nop
  }
}
 80036a6:	bf00      	nop
 80036a8:	3728      	adds	r7, #40	; 0x28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80036da:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d10b      	bne.n	80036fe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d102      	bne.n	80036f6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f005 f827 	bl	8008744 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b08      	cmp	r3, #8
 8003706:	d132      	bne.n	800376e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f043 0308 	orr.w	r3, r3, #8
 800370e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b04      	cmp	r3, #4
 8003718:	d126      	bne.n	8003768 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d113      	bne.n	800374a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003728:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800372c:	d106      	bne.n	800373c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f002 fa43 	bl	8005bc0 <USB_InitFSLSPClkSel>
 800373a:	e011      	b.n	8003760 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f002 fa3c 	bl	8005bc0 <USB_InitFSLSPClkSel>
 8003748:	e00a      	b.n	8003760 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d106      	bne.n	8003760 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003758:	461a      	mov	r2, r3
 800375a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800375e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f005 f819 	bl	8008798 <HAL_HCD_PortEnabled_Callback>
 8003766:	e002      	b.n	800376e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f005 f823 	bl	80087b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b20      	cmp	r3, #32
 8003776:	d103      	bne.n	8003780 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f043 0320 	orr.w	r3, r3, #32
 800377e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003786:	461a      	mov	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6013      	str	r3, [r2, #0]
}
 800378c:	bf00      	nop
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e12b      	b.n	80039fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd fa06 	bl	8000bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	; 0x24
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f8:	f001 fa20 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 80037fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4a81      	ldr	r2, [pc, #516]	; (8003a08 <HAL_I2C_Init+0x274>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d807      	bhi.n	8003818 <HAL_I2C_Init+0x84>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4a80      	ldr	r2, [pc, #512]	; (8003a0c <HAL_I2C_Init+0x278>)
 800380c:	4293      	cmp	r3, r2
 800380e:	bf94      	ite	ls
 8003810:	2301      	movls	r3, #1
 8003812:	2300      	movhi	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e006      	b.n	8003826 <HAL_I2C_Init+0x92>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a7d      	ldr	r2, [pc, #500]	; (8003a10 <HAL_I2C_Init+0x27c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	bf94      	ite	ls
 8003820:	2301      	movls	r3, #1
 8003822:	2300      	movhi	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0e7      	b.n	80039fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a78      	ldr	r2, [pc, #480]	; (8003a14 <HAL_I2C_Init+0x280>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	0c9b      	lsrs	r3, r3, #18
 8003838:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a6a      	ldr	r2, [pc, #424]	; (8003a08 <HAL_I2C_Init+0x274>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d802      	bhi.n	8003868 <HAL_I2C_Init+0xd4>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3301      	adds	r3, #1
 8003866:	e009      	b.n	800387c <HAL_I2C_Init+0xe8>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	4a69      	ldr	r2, [pc, #420]	; (8003a18 <HAL_I2C_Init+0x284>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	3301      	adds	r3, #1
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	430b      	orrs	r3, r1
 8003882:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800388e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	495c      	ldr	r1, [pc, #368]	; (8003a08 <HAL_I2C_Init+0x274>)
 8003898:	428b      	cmp	r3, r1
 800389a:	d819      	bhi.n	80038d0 <HAL_I2C_Init+0x13c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e59      	subs	r1, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038aa:	1c59      	adds	r1, r3, #1
 80038ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038b0:	400b      	ands	r3, r1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_I2C_Init+0x138>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1e59      	subs	r1, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c4:	3301      	adds	r3, #1
 80038c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ca:	e051      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 80038cc:	2304      	movs	r3, #4
 80038ce:	e04f      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d111      	bne.n	80038fc <HAL_I2C_Init+0x168>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1e58      	subs	r0, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	440b      	add	r3, r1
 80038e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e012      	b.n	8003922 <HAL_I2C_Init+0x18e>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1e58      	subs	r0, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	0099      	lsls	r1, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Init+0x196>
 8003926:	2301      	movs	r3, #1
 8003928:	e022      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10e      	bne.n	8003950 <HAL_I2C_Init+0x1bc>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1e58      	subs	r0, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	460b      	mov	r3, r1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	440b      	add	r3, r1
 8003940:	fbb0 f3f3 	udiv	r3, r0, r3
 8003944:	3301      	adds	r3, #1
 8003946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800394e:	e00f      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e58      	subs	r0, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	0099      	lsls	r1, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	fbb0 f3f3 	udiv	r3, r0, r3
 8003966:	3301      	adds	r3, #1
 8003968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	6809      	ldr	r1, [r1, #0]
 8003974:	4313      	orrs	r3, r2
 8003976:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69da      	ldr	r2, [r3, #28]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800399e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6911      	ldr	r1, [r2, #16]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68d2      	ldr	r2, [r2, #12]
 80039aa:	4311      	orrs	r1, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	000186a0 	.word	0x000186a0
 8003a0c:	001e847f 	.word	0x001e847f
 8003a10:	003d08ff 	.word	0x003d08ff
 8003a14:	431bde83 	.word	0x431bde83
 8003a18:	10624dd3 	.word	0x10624dd3

08003a1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e128      	b.n	8003c80 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a90      	ldr	r2, [pc, #576]	; (8003c88 <HAL_I2S_Init+0x26c>)
 8003a46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7fd f907 	bl	8000c5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a64:	f023 030f 	bic.w	r3, r3, #15
 8003a68:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d060      	beq.n	8003b3c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a82:	2310      	movs	r3, #16
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e001      	b.n	8003a8c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a88:	2320      	movs	r3, #32
 8003a8a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d802      	bhi.n	8003a9a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f001 f9d0 	bl	8004e40 <HAL_RCCEx_GetPeriphCLKFreq>
 8003aa0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aaa:	d125      	bne.n	8003af8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d010      	beq.n	8003ad6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	3305      	adds	r3, #5
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	e01f      	b.n	8003b16 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	3305      	adds	r3, #5
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	e00e      	b.n	8003b16 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	3305      	adds	r3, #5
 8003b14:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <HAL_I2S_Init+0x270>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	08db      	lsrs	r3, r3, #3
 8003b20:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	e003      	b.n	8003b44 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d902      	bls.n	8003b50 <HAL_I2S_Init+0x134>
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	2bff      	cmp	r3, #255	; 0xff
 8003b4e:	d907      	bls.n	8003b60 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b54:	f043 0210 	orr.w	r2, r3, #16
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e08f      	b.n	8003c80 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	ea42 0103 	orr.w	r1, r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b7e:	f023 030f 	bic.w	r3, r3, #15
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6851      	ldr	r1, [r2, #4]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6892      	ldr	r2, [r2, #8]
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68d2      	ldr	r2, [r2, #12]
 8003b90:	4311      	orrs	r1, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6992      	ldr	r2, [r2, #24]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d161      	bne.n	8003c70 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a38      	ldr	r2, [pc, #224]	; (8003c90 <HAL_I2S_Init+0x274>)
 8003bb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a37      	ldr	r2, [pc, #220]	; (8003c94 <HAL_I2S_Init+0x278>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_I2S_Init+0x1a4>
 8003bbc:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <HAL_I2S_Init+0x27c>)
 8003bbe:	e001      	b.n	8003bc4 <HAL_I2S_Init+0x1a8>
 8003bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	4932      	ldr	r1, [pc, #200]	; (8003c94 <HAL_I2S_Init+0x278>)
 8003bcc:	428a      	cmp	r2, r1
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2S_Init+0x1b8>
 8003bd0:	4a31      	ldr	r2, [pc, #196]	; (8003c98 <HAL_I2S_Init+0x27c>)
 8003bd2:	e001      	b.n	8003bd8 <HAL_I2S_Init+0x1bc>
 8003bd4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003bd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bdc:	f023 030f 	bic.w	r3, r3, #15
 8003be0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a2b      	ldr	r2, [pc, #172]	; (8003c94 <HAL_I2S_Init+0x278>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2S_Init+0x1d4>
 8003bec:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <HAL_I2S_Init+0x27c>)
 8003bee:	e001      	b.n	8003bf4 <HAL_I2S_Init+0x1d8>
 8003bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a25      	ldr	r2, [pc, #148]	; (8003c94 <HAL_I2S_Init+0x278>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <HAL_I2S_Init+0x1ea>
 8003c02:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <HAL_I2S_Init+0x27c>)
 8003c04:	e001      	b.n	8003c0a <HAL_I2S_Init+0x1ee>
 8003c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c16:	d003      	beq.n	8003c20 <HAL_I2S_Init+0x204>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d103      	bne.n	8003c28 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	e001      	b.n	8003c2c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c36:	4313      	orrs	r3, r2
 8003c38:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c40:	4313      	orrs	r3, r2
 8003c42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	897b      	ldrh	r3, [r7, #10]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c58:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a0d      	ldr	r2, [pc, #52]	; (8003c94 <HAL_I2S_Init+0x278>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d101      	bne.n	8003c68 <HAL_I2S_Init+0x24c>
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <HAL_I2S_Init+0x27c>)
 8003c66:	e001      	b.n	8003c6c <HAL_I2S_Init+0x250>
 8003c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c6c:	897a      	ldrh	r2, [r7, #10]
 8003c6e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3720      	adds	r7, #32
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	08003d93 	.word	0x08003d93
 8003c8c:	cccccccd 	.word	0xcccccccd
 8003c90:	08003ea9 	.word	0x08003ea9
 8003c94:	40003800 	.word	0x40003800
 8003c98:	40003400 	.word	0x40003400

08003c9c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	881a      	ldrh	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	1c9a      	adds	r2, r3, #2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10e      	bne.n	8003d2c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d1c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff ffb8 	bl	8003c9c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	b292      	uxth	r2, r2
 8003d48:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10e      	bne.n	8003d8a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d7a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff93 	bl	8003cb0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d13a      	bne.n	8003e24 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d109      	bne.n	8003dcc <I2S_IRQHandler+0x3a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d102      	bne.n	8003dcc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff ffb4 	bl	8003d34 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d126      	bne.n	8003e24 <I2S_IRQHandler+0x92>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d11f      	bne.n	8003e24 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003df2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f043 0202 	orr.w	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ff50 	bl	8003cc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d136      	bne.n	8003e9e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d109      	bne.n	8003e4e <I2S_IRQHandler+0xbc>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e44:	2b80      	cmp	r3, #128	; 0x80
 8003e46:	d102      	bne.n	8003e4e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff45 	bl	8003cd8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d122      	bne.n	8003e9e <I2S_IRQHandler+0x10c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d11b      	bne.n	8003e9e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e74:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e90:	f043 0204 	orr.w	r2, r3, #4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ff13 	bl	8003cc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e9e:	bf00      	nop
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a92      	ldr	r2, [pc, #584]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ec2:	4b92      	ldr	r3, [pc, #584]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec4:	e001      	b.n	8003eca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ec6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a8b      	ldr	r2, [pc, #556]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d101      	bne.n	8003ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ee0:	4b8a      	ldr	r3, [pc, #552]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ee2:	e001      	b.n	8003ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef4:	d004      	beq.n	8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f040 8099 	bne.w	8004032 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d107      	bne.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f925 	bl	8004164 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d107      	bne.n	8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f9c8 	bl	80042c4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d13a      	bne.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d035      	beq.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a6e      	ldr	r2, [pc, #440]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f52:	4b6e      	ldr	r3, [pc, #440]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f54:	e001      	b.n	8003f5a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4969      	ldr	r1, [pc, #420]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f62:	428b      	cmp	r3, r1
 8003f64:	d101      	bne.n	8003f6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f66:	4b69      	ldr	r3, [pc, #420]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f68:	e001      	b.n	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f72:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f82:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	f043 0202 	orr.w	r2, r3, #2
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fe88 	bl	8003cc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	f040 80c3 	bne.w	8004146 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80bd 	beq.w	8004146 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fda:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a49      	ldr	r2, [pc, #292]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d101      	bne.n	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fe6:	4b49      	ldr	r3, [pc, #292]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fe8:	e001      	b.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4944      	ldr	r1, [pc, #272]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff6:	428b      	cmp	r3, r1
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ffa:	4b44      	ldr	r3, [pc, #272]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffc:	e001      	b.n	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004002:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004006:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004008:	2300      	movs	r3, #0
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	f043 0204 	orr.w	r2, r3, #4
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fe4a 	bl	8003cc4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004030:	e089      	b.n	8004146 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d107      	bne.n	800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f8be 	bl	80041c8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b01      	cmp	r3, #1
 8004054:	d107      	bne.n	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f8fd 	bl	8004260 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d12f      	bne.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d02a      	beq.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004088:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1e      	ldr	r2, [pc, #120]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004094:	4b1d      	ldr	r3, [pc, #116]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004096:	e001      	b.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4919      	ldr	r1, [pc, #100]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a4:	428b      	cmp	r3, r1
 80040a6:	d101      	bne.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040a8:	4b18      	ldr	r3, [pc, #96]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040aa:	e001      	b.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	f043 0202 	orr.w	r2, r3, #2
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff fdfa 	bl	8003cc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d136      	bne.n	8004148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d031      	beq.n	8004148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a07      	ldr	r2, [pc, #28]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d101      	bne.n	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040f0:	e001      	b.n	80040f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4902      	ldr	r1, [pc, #8]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040fe:	428b      	cmp	r3, r1
 8004100:	d106      	bne.n	8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004102:	4b02      	ldr	r3, [pc, #8]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004104:	e006      	b.n	8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004106:	bf00      	nop
 8004108:	40003800 	.word	0x40003800
 800410c:	40003400 	.word	0x40003400
 8004110:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004114:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004118:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004128:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fdc0 	bl	8003cc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004144:	e000      	b.n	8004148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004146:	bf00      	nop
}
 8004148:	bf00      	nop
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	1c99      	adds	r1, r3, #2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6251      	str	r1, [r2, #36]	; 0x24
 8004176:	881a      	ldrh	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d113      	bne.n	80041be <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff ffc9 	bl	8004150 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	1c99      	adds	r1, r3, #2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6251      	str	r1, [r2, #36]	; 0x24
 80041da:	8819      	ldrh	r1, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <I2SEx_TxISR_I2SExt+0x90>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <I2SEx_TxISR_I2SExt+0x22>
 80041e6:	4b1d      	ldr	r3, [pc, #116]	; (800425c <I2SEx_TxISR_I2SExt+0x94>)
 80041e8:	e001      	b.n	80041ee <I2SEx_TxISR_I2SExt+0x26>
 80041ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ee:	460a      	mov	r2, r1
 80041f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d121      	bne.n	800424e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a12      	ldr	r2, [pc, #72]	; (8004258 <I2SEx_TxISR_I2SExt+0x90>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d101      	bne.n	8004218 <I2SEx_TxISR_I2SExt+0x50>
 8004214:	4b11      	ldr	r3, [pc, #68]	; (800425c <I2SEx_TxISR_I2SExt+0x94>)
 8004216:	e001      	b.n	800421c <I2SEx_TxISR_I2SExt+0x54>
 8004218:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	490d      	ldr	r1, [pc, #52]	; (8004258 <I2SEx_TxISR_I2SExt+0x90>)
 8004224:	428b      	cmp	r3, r1
 8004226:	d101      	bne.n	800422c <I2SEx_TxISR_I2SExt+0x64>
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <I2SEx_TxISR_I2SExt+0x94>)
 800422a:	e001      	b.n	8004230 <I2SEx_TxISR_I2SExt+0x68>
 800422c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004230:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004234:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ff81 	bl	8004150 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40003800 	.word	0x40003800
 800425c:	40003400 	.word	0x40003400

08004260 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68d8      	ldr	r0, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	1c99      	adds	r1, r3, #2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004278:	b282      	uxth	r2, r0
 800427a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d113      	bne.n	80042bc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042a2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ff4a 	bl	8004150 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a20      	ldr	r2, [pc, #128]	; (8004354 <I2SEx_RxISR_I2SExt+0x90>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <I2SEx_RxISR_I2SExt+0x16>
 80042d6:	4b20      	ldr	r3, [pc, #128]	; (8004358 <I2SEx_RxISR_I2SExt+0x94>)
 80042d8:	e001      	b.n	80042de <I2SEx_RxISR_I2SExt+0x1a>
 80042da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042de:	68d8      	ldr	r0, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	1c99      	adds	r1, r3, #2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80042ea:	b282      	uxth	r2, r0
 80042ec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d121      	bne.n	800434a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a12      	ldr	r2, [pc, #72]	; (8004354 <I2SEx_RxISR_I2SExt+0x90>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <I2SEx_RxISR_I2SExt+0x50>
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <I2SEx_RxISR_I2SExt+0x94>)
 8004312:	e001      	b.n	8004318 <I2SEx_RxISR_I2SExt+0x54>
 8004314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	490d      	ldr	r1, [pc, #52]	; (8004354 <I2SEx_RxISR_I2SExt+0x90>)
 8004320:	428b      	cmp	r3, r1
 8004322:	d101      	bne.n	8004328 <I2SEx_RxISR_I2SExt+0x64>
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <I2SEx_RxISR_I2SExt+0x94>)
 8004326:	e001      	b.n	800432c <I2SEx_RxISR_I2SExt+0x68>
 8004328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800432c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004330:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d106      	bne.n	800434a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff ff03 	bl	8004150 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40003800 	.word	0x40003800
 8004358:	40003400 	.word	0x40003400

0800435c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e267      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d075      	beq.n	8004466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437a:	4b88      	ldr	r3, [pc, #544]	; (800459c <HAL_RCC_OscConfig+0x240>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b04      	cmp	r3, #4
 8004384:	d00c      	beq.n	80043a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004386:	4b85      	ldr	r3, [pc, #532]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438e:	2b08      	cmp	r3, #8
 8004390:	d112      	bne.n	80043b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004392:	4b82      	ldr	r3, [pc, #520]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439e:	d10b      	bne.n	80043b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	4b7e      	ldr	r3, [pc, #504]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d05b      	beq.n	8004464 <HAL_RCC_OscConfig+0x108>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d157      	bne.n	8004464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e242      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d106      	bne.n	80043d0 <HAL_RCC_OscConfig+0x74>
 80043c2:	4b76      	ldr	r3, [pc, #472]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a75      	ldr	r2, [pc, #468]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e01d      	b.n	800440c <HAL_RCC_OscConfig+0xb0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x98>
 80043da:	4b70      	ldr	r3, [pc, #448]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6f      	ldr	r2, [pc, #444]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4b6d      	ldr	r3, [pc, #436]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6c      	ldr	r2, [pc, #432]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e00b      	b.n	800440c <HAL_RCC_OscConfig+0xb0>
 80043f4:	4b69      	ldr	r3, [pc, #420]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a68      	ldr	r2, [pc, #416]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4b66      	ldr	r3, [pc, #408]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a65      	ldr	r2, [pc, #404]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d013      	beq.n	800443c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fc fe5e 	bl	80010d4 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800441c:	f7fc fe5a 	bl	80010d4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e207      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b5b      	ldr	r3, [pc, #364]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0xc0>
 800443a:	e014      	b.n	8004466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fc fe4a 	bl	80010d4 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004444:	f7fc fe46 	bl	80010d4 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e1f3      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	4b51      	ldr	r3, [pc, #324]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0xe8>
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d063      	beq.n	800453a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004472:	4b4a      	ldr	r3, [pc, #296]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447e:	4b47      	ldr	r3, [pc, #284]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004486:	2b08      	cmp	r3, #8
 8004488:	d11c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448a:	4b44      	ldr	r3, [pc, #272]	; (800459c <HAL_RCC_OscConfig+0x240>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d116      	bne.n	80044c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_RCC_OscConfig+0x152>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e1c7      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ae:	4b3b      	ldr	r3, [pc, #236]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4937      	ldr	r1, [pc, #220]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c2:	e03a      	b.n	800453a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d020      	beq.n	800450e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044cc:	4b34      	ldr	r3, [pc, #208]	; (80045a0 <HAL_RCC_OscConfig+0x244>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d2:	f7fc fdff 	bl	80010d4 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044da:	f7fc fdfb 	bl	80010d4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e1a8      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f8:	4b28      	ldr	r3, [pc, #160]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4925      	ldr	r1, [pc, #148]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]
 800450c:	e015      	b.n	800453a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450e:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <HAL_RCC_OscConfig+0x244>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fc fdde 	bl	80010d4 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451c:	f7fc fdda 	bl	80010d4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e187      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	4b1b      	ldr	r3, [pc, #108]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d036      	beq.n	80045b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d016      	beq.n	800457c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <HAL_RCC_OscConfig+0x248>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fc fdbe 	bl	80010d4 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800455c:	f7fc fdba 	bl	80010d4 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e167      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x200>
 800457a:	e01b      	b.n	80045b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800457c:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <HAL_RCC_OscConfig+0x248>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004582:	f7fc fda7 	bl	80010d4 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004588:	e00e      	b.n	80045a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800458a:	f7fc fda3 	bl	80010d4 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d907      	bls.n	80045a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e150      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
 800459c:	40023800 	.word	0x40023800
 80045a0:	42470000 	.word	0x42470000
 80045a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a8:	4b88      	ldr	r3, [pc, #544]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1ea      	bne.n	800458a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8097 	beq.w	80046f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c6:	4b81      	ldr	r3, [pc, #516]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	4b7d      	ldr	r3, [pc, #500]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	4a7c      	ldr	r2, [pc, #496]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6413      	str	r3, [r2, #64]	; 0x40
 80045e2:	4b7a      	ldr	r3, [pc, #488]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ee:	2301      	movs	r3, #1
 80045f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f2:	4b77      	ldr	r3, [pc, #476]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d118      	bne.n	8004630 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fe:	4b74      	ldr	r3, [pc, #464]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a73      	ldr	r2, [pc, #460]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 8004604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460a:	f7fc fd63 	bl	80010d4 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004612:	f7fc fd5f 	bl	80010d4 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e10c      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d106      	bne.n	8004646 <HAL_RCC_OscConfig+0x2ea>
 8004638:	4b64      	ldr	r3, [pc, #400]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	4a63      	ldr	r2, [pc, #396]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6713      	str	r3, [r2, #112]	; 0x70
 8004644:	e01c      	b.n	8004680 <HAL_RCC_OscConfig+0x324>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b05      	cmp	r3, #5
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0x30c>
 800464e:	4b5f      	ldr	r3, [pc, #380]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a5e      	ldr	r2, [pc, #376]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004654:	f043 0304 	orr.w	r3, r3, #4
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
 800465a:	4b5c      	ldr	r3, [pc, #368]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a5b      	ldr	r2, [pc, #364]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0x324>
 8004668:	4b58      	ldr	r3, [pc, #352]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	4a57      	ldr	r2, [pc, #348]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	6713      	str	r3, [r2, #112]	; 0x70
 8004674:	4b55      	ldr	r3, [pc, #340]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a54      	ldr	r2, [pc, #336]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800467a:	f023 0304 	bic.w	r3, r3, #4
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fc fd24 	bl	80010d4 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fc fd20 	bl	80010d4 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e0cb      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a6:	4b49      	ldr	r3, [pc, #292]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0ee      	beq.n	8004690 <HAL_RCC_OscConfig+0x334>
 80046b2:	e014      	b.n	80046de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b4:	f7fc fd0e 	bl	80010d4 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046bc:	f7fc fd0a 	bl	80010d4 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e0b5      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d2:	4b3e      	ldr	r3, [pc, #248]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1ee      	bne.n	80046bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046de:	7dfb      	ldrb	r3, [r7, #23]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d105      	bne.n	80046f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e4:	4b39      	ldr	r3, [pc, #228]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	4a38      	ldr	r2, [pc, #224]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a1 	beq.w	800483c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046fa:	4b34      	ldr	r3, [pc, #208]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b08      	cmp	r3, #8
 8004704:	d05c      	beq.n	80047c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d141      	bne.n	8004792 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <HAL_RCC_OscConfig+0x478>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fc fcde 	bl	80010d4 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800471c:	f7fc fcda 	bl	80010d4 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e087      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472e:	4b27      	ldr	r3, [pc, #156]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	019b      	lsls	r3, r3, #6
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	3b01      	subs	r3, #1
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	061b      	lsls	r3, r3, #24
 800475e:	491b      	ldr	r1, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_RCC_OscConfig+0x478>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476a:	f7fc fcb3 	bl	80010d4 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004772:	f7fc fcaf 	bl	80010d4 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e05c      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x416>
 8004790:	e054      	b.n	800483c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_RCC_OscConfig+0x478>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fc fc9c 	bl	80010d4 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fc fc98 	bl	80010d4 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e045      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x444>
 80047be:	e03d      	b.n	800483c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e038      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40007000 	.word	0x40007000
 80047d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d8:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <HAL_RCC_OscConfig+0x4ec>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d028      	beq.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d121      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d11a      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004808:	4013      	ands	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800480e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004810:	4293      	cmp	r3, r2
 8004812:	d111      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	3b01      	subs	r3, #1
 8004822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d107      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800

0800484c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0cc      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004860:	4b68      	ldr	r3, [pc, #416]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d90c      	bls.n	8004888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b65      	ldr	r3, [pc, #404]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0b8      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d020      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a0:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4a58      	ldr	r2, [pc, #352]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b8:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a52      	ldr	r2, [pc, #328]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c4:	4b50      	ldr	r3, [pc, #320]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	494d      	ldr	r1, [pc, #308]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d044      	beq.n	800496c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	4b47      	ldr	r3, [pc, #284]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d119      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e07f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d003      	beq.n	800490a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004906:	2b03      	cmp	r3, #3
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490a:	4b3f      	ldr	r3, [pc, #252]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e06f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491a:	4b3b      	ldr	r3, [pc, #236]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e067      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492a:	4b37      	ldr	r3, [pc, #220]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f023 0203 	bic.w	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4934      	ldr	r1, [pc, #208]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	4313      	orrs	r3, r2
 800493a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800493c:	f7fc fbca 	bl	80010d4 <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	e00a      	b.n	800495a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004944:	f7fc fbc6 	bl	80010d4 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e04f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 020c 	and.w	r2, r3, #12
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	429a      	cmp	r2, r3
 800496a:	d1eb      	bne.n	8004944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800496c:	4b25      	ldr	r3, [pc, #148]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d20c      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e032      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4916      	ldr	r1, [pc, #88]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	490e      	ldr	r1, [pc, #56]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049d2:	f000 f821 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	490a      	ldr	r1, [pc, #40]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 80049e4:	5ccb      	ldrb	r3, [r1, r3]
 80049e6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fc fb2a 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40023c00 	.word	0x40023c00
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	08008e54 	.word	0x08008e54
 8004a10:	20000000 	.word	0x20000000
 8004a14:	20000004 	.word	0x20000004

08004a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a1c:	b094      	sub	sp, #80	; 0x50
 8004a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	647b      	str	r3, [r7, #68]	; 0x44
 8004a24:	2300      	movs	r3, #0
 8004a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a28:	2300      	movs	r3, #0
 8004a2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a30:	4b79      	ldr	r3, [pc, #484]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 030c 	and.w	r3, r3, #12
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d00d      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x40>
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	f200 80e1 	bhi.w	8004c04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x34>
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d003      	beq.n	8004a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a4a:	e0db      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a4c:	4b73      	ldr	r3, [pc, #460]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a50:	e0db      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a52:	4b73      	ldr	r3, [pc, #460]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a56:	e0d8      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a58:	4b6f      	ldr	r3, [pc, #444]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a62:	4b6d      	ldr	r3, [pc, #436]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d063      	beq.n	8004b36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	099b      	lsrs	r3, r3, #6
 8004a74:	2200      	movs	r2, #0
 8004a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a80:	633b      	str	r3, [r7, #48]	; 0x30
 8004a82:	2300      	movs	r3, #0
 8004a84:	637b      	str	r3, [r7, #52]	; 0x34
 8004a86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	f04f 0000 	mov.w	r0, #0
 8004a92:	f04f 0100 	mov.w	r1, #0
 8004a96:	0159      	lsls	r1, r3, #5
 8004a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9c:	0150      	lsls	r0, r2, #5
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	1a51      	subs	r1, r2, r1
 8004aa6:	6139      	str	r1, [r7, #16]
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004abc:	4659      	mov	r1, fp
 8004abe:	018b      	lsls	r3, r1, #6
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	018a      	lsls	r2, r1, #6
 8004aca:	4651      	mov	r1, sl
 8004acc:	ebb2 0801 	subs.w	r8, r2, r1
 8004ad0:	4659      	mov	r1, fp
 8004ad2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aea:	4690      	mov	r8, r2
 8004aec:	4699      	mov	r9, r3
 8004aee:	4623      	mov	r3, r4
 8004af0:	eb18 0303 	adds.w	r3, r8, r3
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	462b      	mov	r3, r5
 8004af8:	eb49 0303 	adc.w	r3, r9, r3
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	024b      	lsls	r3, r1, #9
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b14:	4621      	mov	r1, r4
 8004b16:	024a      	lsls	r2, r1, #9
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1e:	2200      	movs	r2, #0
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b28:	f7fb fb54 	bl	80001d4 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b34:	e058      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b36:	4b38      	ldr	r3, [pc, #224]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	099b      	lsrs	r3, r3, #6
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	4611      	mov	r1, r2
 8004b42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b50:	4642      	mov	r2, r8
 8004b52:	464b      	mov	r3, r9
 8004b54:	f04f 0000 	mov.w	r0, #0
 8004b58:	f04f 0100 	mov.w	r1, #0
 8004b5c:	0159      	lsls	r1, r3, #5
 8004b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b62:	0150      	lsls	r0, r2, #5
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4641      	mov	r1, r8
 8004b6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b6e:	4649      	mov	r1, r9
 8004b70:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b88:	ebb2 040a 	subs.w	r4, r2, sl
 8004b8c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	00eb      	lsls	r3, r5, #3
 8004b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b9e:	00e2      	lsls	r2, r4, #3
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	461d      	mov	r5, r3
 8004ba4:	4643      	mov	r3, r8
 8004ba6:	18e3      	adds	r3, r4, r3
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	464b      	mov	r3, r9
 8004bac:	eb45 0303 	adc.w	r3, r5, r3
 8004bb0:	607b      	str	r3, [r7, #4]
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	028b      	lsls	r3, r1, #10
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc8:	4621      	mov	r1, r4
 8004bca:	028a      	lsls	r2, r1, #10
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	61fa      	str	r2, [r7, #28]
 8004bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bdc:	f7fb fafa 	bl	80001d4 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4613      	mov	r3, r2
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c02:	e002      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3750      	adds	r7, #80	; 0x50
 8004c10:	46bd      	mov	sp, r7
 8004c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	00f42400 	.word	0x00f42400
 8004c20:	007a1200 	.word	0x007a1200

08004c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000000 	.word	0x20000000

08004c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c40:	f7ff fff0 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	0a9b      	lsrs	r3, r3, #10
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4903      	ldr	r1, [pc, #12]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08008e64 	.word	0x08008e64

08004c64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d035      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c8c:	4b67      	ldr	r3, [pc, #412]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c92:	f7fc fa1f 	bl	80010d4 <HAL_GetTick>
 8004c96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c9a:	f7fc fa1b 	bl	80010d4 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0ba      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cac:	4b60      	ldr	r3, [pc, #384]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f0      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	019a      	lsls	r2, r3, #6
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	071b      	lsls	r3, r3, #28
 8004cc4:	495a      	ldr	r1, [pc, #360]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ccc:	4b57      	ldr	r3, [pc, #348]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd2:	f7fc f9ff 	bl	80010d4 <HAL_GetTick>
 8004cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cda:	f7fc f9fb 	bl	80010d4 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e09a      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cec:	4b50      	ldr	r3, [pc, #320]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8083 	beq.w	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	4b49      	ldr	r3, [pc, #292]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	4a48      	ldr	r2, [pc, #288]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d14:	6413      	str	r3, [r2, #64]	; 0x40
 8004d16:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d22:	4b44      	ldr	r3, [pc, #272]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a43      	ldr	r2, [pc, #268]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2e:	f7fc f9d1 	bl	80010d4 <HAL_GetTick>
 8004d32:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d36:	f7fc f9cd 	bl	80010d4 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e06c      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d48:	4b3a      	ldr	r3, [pc, #232]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d54:	4b36      	ldr	r3, [pc, #216]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d02f      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d028      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d72:	4b2f      	ldr	r3, [pc, #188]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d7c:	4b2e      	ldr	r3, [pc, #184]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d82:	4b2d      	ldr	r3, [pc, #180]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d88:	4a29      	ldr	r2, [pc, #164]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d8e:	4b28      	ldr	r3, [pc, #160]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d114      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d9a:	f7fc f99b 	bl	80010d4 <HAL_GetTick>
 8004d9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da0:	e00a      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f7fc f997 	bl	80010d4 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e034      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ee      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd0:	d10d      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dd2:	4b17      	ldr	r3, [pc, #92]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de6:	4912      	ldr	r1, [pc, #72]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]
 8004dec:	e005      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	4a0f      	ldr	r2, [pc, #60]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004df4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004df8:	6093      	str	r3, [r2, #8]
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e06:	490a      	ldr	r1, [pc, #40]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	7c1a      	ldrb	r2, [r3, #16]
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e1e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	42470068 	.word	0x42470068
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40007000 	.word	0x40007000
 8004e38:	42470e40 	.word	0x42470e40
 8004e3c:	424711e0 	.word	0x424711e0

08004e40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d13e      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e5e:	4b23      	ldr	r3, [pc, #140]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d12f      	bne.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e74:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e76:	617b      	str	r3, [r7, #20]
          break;
 8004e78:	e02f      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e7a:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e86:	d108      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e88:	4b18      	ldr	r3, [pc, #96]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e90:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e96:	613b      	str	r3, [r7, #16]
 8004e98:	e007      	b.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea2:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb0:	099b      	lsrs	r3, r3, #6
 8004eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	fb02 f303 	mul.w	r3, r2, r3
 8004ebc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec4:	0f1b      	lsrs	r3, r3, #28
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	617b      	str	r3, [r7, #20]
          break;
 8004ed2:	e002      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
          break;
 8004ed8:	bf00      	nop
        }
      }
      break;
 8004eda:	bf00      	nop
    }
  }
  return frequency;
 8004edc:	697b      	ldr	r3, [r7, #20]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	00bb8000 	.word	0x00bb8000
 8004ef4:	007a1200 	.word	0x007a1200
 8004ef8:	00f42400 	.word	0x00f42400

08004efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e07b      	b.n	8005006 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d108      	bne.n	8004f28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f1e:	d009      	beq.n	8004f34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	61da      	str	r2, [r3, #28]
 8004f26:	e005      	b.n	8004f34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fb ff42 	bl	8000dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	ea42 0103 	orr.w	r1, r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	0c1b      	lsrs	r3, r3, #16
 8004fd2:	f003 0104 	and.w	r1, r3, #4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	f003 0210 	and.w	r2, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e041      	b.n	80050a4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fb ff17 	bl	8000e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f000 f94f 	bl	80052f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d001      	beq.n	80050c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e03c      	b.n	800513e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1e      	ldr	r2, [pc, #120]	; (800514c <HAL_TIM_Base_Start+0xa0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d018      	beq.n	8005108 <HAL_TIM_Base_Start+0x5c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050de:	d013      	beq.n	8005108 <HAL_TIM_Base_Start+0x5c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1a      	ldr	r2, [pc, #104]	; (8005150 <HAL_TIM_Base_Start+0xa4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00e      	beq.n	8005108 <HAL_TIM_Base_Start+0x5c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a19      	ldr	r2, [pc, #100]	; (8005154 <HAL_TIM_Base_Start+0xa8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d009      	beq.n	8005108 <HAL_TIM_Base_Start+0x5c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a17      	ldr	r2, [pc, #92]	; (8005158 <HAL_TIM_Base_Start+0xac>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_TIM_Base_Start+0x5c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a16      	ldr	r2, [pc, #88]	; (800515c <HAL_TIM_Base_Start+0xb0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d111      	bne.n	800512c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b06      	cmp	r3, #6
 8005118:	d010      	beq.n	800513c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512a:	e007      	b.n	800513c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40010000 	.word	0x40010000
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40014000 	.word	0x40014000

08005160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIM_ConfigClockSource+0x1c>
 8005178:	2302      	movs	r3, #2
 800517a:	e0b4      	b.n	80052e6 <HAL_TIM_ConfigClockSource+0x186>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800519a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b4:	d03e      	beq.n	8005234 <HAL_TIM_ConfigClockSource+0xd4>
 80051b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ba:	f200 8087 	bhi.w	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c2:	f000 8086 	beq.w	80052d2 <HAL_TIM_ConfigClockSource+0x172>
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d87f      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051cc:	2b70      	cmp	r3, #112	; 0x70
 80051ce:	d01a      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0xa6>
 80051d0:	2b70      	cmp	r3, #112	; 0x70
 80051d2:	d87b      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051d4:	2b60      	cmp	r3, #96	; 0x60
 80051d6:	d050      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x11a>
 80051d8:	2b60      	cmp	r3, #96	; 0x60
 80051da:	d877      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b50      	cmp	r3, #80	; 0x50
 80051de:	d03c      	beq.n	800525a <HAL_TIM_ConfigClockSource+0xfa>
 80051e0:	2b50      	cmp	r3, #80	; 0x50
 80051e2:	d873      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d058      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x13a>
 80051e8:	2b40      	cmp	r3, #64	; 0x40
 80051ea:	d86f      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051ec:	2b30      	cmp	r3, #48	; 0x30
 80051ee:	d064      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 80051f0:	2b30      	cmp	r3, #48	; 0x30
 80051f2:	d86b      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d060      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d867      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d05c      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 8005200:	2b10      	cmp	r3, #16
 8005202:	d05a      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 8005204:	e062      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6899      	ldr	r1, [r3, #8]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f000 f965 	bl	80054e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	609a      	str	r2, [r3, #8]
      break;
 8005232:	e04f      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	6899      	ldr	r1, [r3, #8]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f000 f94e 	bl	80054e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005256:	609a      	str	r2, [r3, #8]
      break;
 8005258:	e03c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	461a      	mov	r2, r3
 8005268:	f000 f8c2 	bl	80053f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2150      	movs	r1, #80	; 0x50
 8005272:	4618      	mov	r0, r3
 8005274:	f000 f91b 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 8005278:	e02c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	461a      	mov	r2, r3
 8005288:	f000 f8e1 	bl	800544e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2160      	movs	r1, #96	; 0x60
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f90b 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 8005298:	e01c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6859      	ldr	r1, [r3, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f000 f8a2 	bl	80053f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2140      	movs	r1, #64	; 0x40
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 f8fb 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 80052b8:	e00c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f000 f8f2 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 80052ca:	e003      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
      break;
 80052d0:	e000      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a34      	ldr	r2, [pc, #208]	; (80053d4 <TIM_Base_SetConfig+0xe4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00f      	beq.n	8005328 <TIM_Base_SetConfig+0x38>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530e:	d00b      	beq.n	8005328 <TIM_Base_SetConfig+0x38>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a31      	ldr	r2, [pc, #196]	; (80053d8 <TIM_Base_SetConfig+0xe8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_Base_SetConfig+0x38>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a30      	ldr	r2, [pc, #192]	; (80053dc <TIM_Base_SetConfig+0xec>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_Base_SetConfig+0x38>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a2f      	ldr	r2, [pc, #188]	; (80053e0 <TIM_Base_SetConfig+0xf0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a25      	ldr	r2, [pc, #148]	; (80053d4 <TIM_Base_SetConfig+0xe4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01b      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005348:	d017      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a22      	ldr	r2, [pc, #136]	; (80053d8 <TIM_Base_SetConfig+0xe8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d013      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a21      	ldr	r2, [pc, #132]	; (80053dc <TIM_Base_SetConfig+0xec>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00f      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a20      	ldr	r2, [pc, #128]	; (80053e0 <TIM_Base_SetConfig+0xf0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00b      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <TIM_Base_SetConfig+0xf4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d007      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <TIM_Base_SetConfig+0xf8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1d      	ldr	r2, [pc, #116]	; (80053ec <TIM_Base_SetConfig+0xfc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d108      	bne.n	800538c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <TIM_Base_SetConfig+0xe4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d103      	bne.n	80053c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	615a      	str	r2, [r3, #20]
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800

080053f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f023 0201 	bic.w	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800541a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f023 030a 	bic.w	r3, r3, #10
 800542c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	621a      	str	r2, [r3, #32]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800544e:	b480      	push	{r7}
 8005450:	b087      	sub	sp, #28
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f023 0210 	bic.w	r2, r3, #16
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	031b      	lsls	r3, r3, #12
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800548a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f043 0307 	orr.w	r3, r3, #7
 80054d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	609a      	str	r2, [r3, #8]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	021a      	lsls	r2, r3, #8
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	431a      	orrs	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4313      	orrs	r3, r2
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005538:	2302      	movs	r3, #2
 800553a:	e050      	b.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1c      	ldr	r2, [pc, #112]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d018      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005588:	d013      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a18      	ldr	r2, [pc, #96]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a13      	ldr	r2, [pc, #76]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10c      	bne.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40010000 	.word	0x40010000
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800
 80055f8:	40000c00 	.word	0x40000c00
 80055fc:	40014000 	.word	0x40014000

08005600 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005600:	b084      	sub	sp, #16
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	f107 001c 	add.w	r0, r7, #28
 800560e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	2b01      	cmp	r3, #1
 8005616:	d122      	bne.n	800565e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800562c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9c0 	bl	80059d8 <USB_CoreReset>
 8005658:	4603      	mov	r3, r0
 800565a:	73fb      	strb	r3, [r7, #15]
 800565c:	e01a      	b.n	8005694 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f9b4 	bl	80059d8 <USB_CoreReset>
 8005670:	4603      	mov	r3, r0
 8005672:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	639a      	str	r2, [r3, #56]	; 0x38
 8005686:	e005      	b.n	8005694 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	2b01      	cmp	r3, #1
 8005698:	d10b      	bne.n	80056b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f043 0206 	orr.w	r2, r3, #6
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f043 0220 	orr.w	r2, r3, #32
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056be:	b004      	add	sp, #16
 80056c0:	4770      	bx	lr

080056c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f043 0201 	orr.w	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f023 0201 	bic.w	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d115      	bne.n	8005754 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005734:	2001      	movs	r0, #1
 8005736:	f7fb fcd9 	bl	80010ec <HAL_Delay>
      ms++;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f93a 	bl	80059ba <USB_GetMode>
 8005746:	4603      	mov	r3, r0
 8005748:	2b01      	cmp	r3, #1
 800574a:	d01e      	beq.n	800578a <USB_SetCurrentMode+0x84>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b31      	cmp	r3, #49	; 0x31
 8005750:	d9f0      	bls.n	8005734 <USB_SetCurrentMode+0x2e>
 8005752:	e01a      	b.n	800578a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d115      	bne.n	8005786 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005766:	2001      	movs	r0, #1
 8005768:	f7fb fcc0 	bl	80010ec <HAL_Delay>
      ms++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f921 	bl	80059ba <USB_GetMode>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <USB_SetCurrentMode+0x84>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b31      	cmp	r3, #49	; 0x31
 8005782:	d9f0      	bls.n	8005766 <USB_SetCurrentMode+0x60>
 8005784:	e001      	b.n	800578a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e005      	b.n	8005796 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b32      	cmp	r3, #50	; 0x32
 800578e:	d101      	bne.n	8005794 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3301      	adds	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4a13      	ldr	r2, [pc, #76]	; (8005804 <USB_FlushTxFifo+0x64>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d901      	bls.n	80057c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e01b      	b.n	80057f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	daf2      	bge.n	80057ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	019b      	lsls	r3, r3, #6
 80057d0:	f043 0220 	orr.w	r2, r3, #32
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4a08      	ldr	r2, [pc, #32]	; (8005804 <USB_FlushTxFifo+0x64>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e006      	b.n	80057f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	d0f0      	beq.n	80057d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	00030d40 	.word	0x00030d40

08005808 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4a11      	ldr	r2, [pc, #68]	; (8005864 <USB_FlushRxFifo+0x5c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e018      	b.n	8005858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	daf2      	bge.n	8005814 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2210      	movs	r2, #16
 8005836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3301      	adds	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4a08      	ldr	r2, [pc, #32]	; (8005864 <USB_FlushRxFifo+0x5c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d901      	bls.n	800584a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e006      	b.n	8005858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2b10      	cmp	r3, #16
 8005854:	d0f0      	beq.n	8005838 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	00030d40 	.word	0x00030d40

08005868 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005868:	b480      	push	{r7}
 800586a:	b089      	sub	sp, #36	; 0x24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	4611      	mov	r1, r2
 8005874:	461a      	mov	r2, r3
 8005876:	460b      	mov	r3, r1
 8005878:	71fb      	strb	r3, [r7, #7]
 800587a:	4613      	mov	r3, r2
 800587c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005886:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800588a:	2b00      	cmp	r3, #0
 800588c:	d123      	bne.n	80058d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800588e:	88bb      	ldrh	r3, [r7, #4]
 8005890:	3303      	adds	r3, #3
 8005892:	089b      	lsrs	r3, r3, #2
 8005894:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005896:	2300      	movs	r3, #0
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	e018      	b.n	80058ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	031a      	lsls	r2, r3, #12
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a8:	461a      	mov	r2, r3
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	3301      	adds	r3, #1
 80058b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3301      	adds	r3, #1
 80058ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	3301      	adds	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	3301      	adds	r3, #1
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d3e2      	bcc.n	800589c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3724      	adds	r7, #36	; 0x24
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b08b      	sub	sp, #44	; 0x2c
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	089b      	lsrs	r3, r3, #2
 80058fe:	b29b      	uxth	r3, r3
 8005900:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800590a:	2300      	movs	r3, #0
 800590c:	623b      	str	r3, [r7, #32]
 800590e:	e014      	b.n	800593a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	601a      	str	r2, [r3, #0]
    pDest++;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	3301      	adds	r3, #1
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	3301      	adds	r3, #1
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	3301      	adds	r3, #1
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	3301      	adds	r3, #1
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	3301      	adds	r3, #1
 8005938:	623b      	str	r3, [r7, #32]
 800593a:	6a3a      	ldr	r2, [r7, #32]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	429a      	cmp	r2, r3
 8005940:	d3e6      	bcc.n	8005910 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005942:	8bfb      	ldrh	r3, [r7, #30]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01e      	beq.n	8005986 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005952:	461a      	mov	r2, r3
 8005954:	f107 0310 	add.w	r3, r7, #16
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
 8005968:	b2da      	uxtb	r2, r3
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	701a      	strb	r2, [r3, #0]
      i++;
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	3301      	adds	r3, #1
 8005972:	623b      	str	r3, [r7, #32]
      pDest++;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	3301      	adds	r3, #1
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800597a:	8bfb      	ldrh	r3, [r7, #30]
 800597c:	3b01      	subs	r3, #1
 800597e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005980:	8bfb      	ldrh	r3, [r7, #30]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1ea      	bne.n	800595c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005988:	4618      	mov	r0, r3
 800598a:	372c      	adds	r7, #44	; 0x2c
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4013      	ands	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059ac:	68fb      	ldr	r3, [r7, #12]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f003 0301 	and.w	r3, r3, #1
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3301      	adds	r3, #1
 80059e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4a13      	ldr	r2, [pc, #76]	; (8005a3c <USB_CoreReset+0x64>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d901      	bls.n	80059f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e01b      	b.n	8005a2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	daf2      	bge.n	80059e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f043 0201 	orr.w	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3301      	adds	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a09      	ldr	r2, [pc, #36]	; (8005a3c <USB_CoreReset+0x64>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d901      	bls.n	8005a20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e006      	b.n	8005a2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d0f0      	beq.n	8005a0e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	00030d40 	.word	0x00030d40

08005a40 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a40:	b084      	sub	sp, #16
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b086      	sub	sp, #24
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a60:	461a      	mov	r2, r3
 8005a62:	2300      	movs	r3, #0
 8005a64:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d018      	beq.n	8005ac8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d10a      	bne.n	8005ab2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aaa:	f043 0304 	orr.w	r3, r3, #4
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	e014      	b.n	8005adc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ac0:	f023 0304 	bic.w	r3, r3, #4
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	e009      	b.n	8005adc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ad6:	f023 0304 	bic.w	r3, r3, #4
 8005ada:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005adc:	2110      	movs	r1, #16
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff fe5e 	bl	80057a0 <USB_FlushTxFifo>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fe8a 	bl	8005808 <USB_FlushRxFifo>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e015      	b.n	8005b30 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b10:	461a      	mov	r2, r3
 8005b12:	f04f 33ff 	mov.w	r3, #4294967295
 8005b16:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b24:	461a      	mov	r2, r3
 8005b26:	2300      	movs	r3, #0
 8005b28:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d3e5      	bcc.n	8005b04 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f04f 32ff 	mov.w	r2, #4294967295
 8005b44:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00b      	beq.n	8005b6a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a13      	ldr	r2, [pc, #76]	; (8005bac <USB_HostInit+0x16c>)
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <USB_HostInit+0x170>)
 8005b64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b68:	e009      	b.n	8005b7e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2280      	movs	r2, #128	; 0x80
 8005b6e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a10      	ldr	r2, [pc, #64]	; (8005bb4 <USB_HostInit+0x174>)
 8005b74:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a0f      	ldr	r2, [pc, #60]	; (8005bb8 <USB_HostInit+0x178>)
 8005b7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f043 0210 	orr.w	r2, r3, #16
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699a      	ldr	r2, [r3, #24]
 8005b94:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <USB_HostInit+0x17c>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ba8:	b004      	add	sp, #16
 8005baa:	4770      	bx	lr
 8005bac:	01000200 	.word	0x01000200
 8005bb0:	00e00300 	.word	0x00e00300
 8005bb4:	00600080 	.word	0x00600080
 8005bb8:	004000e0 	.word	0x004000e0
 8005bbc:	a3200008 	.word	0xa3200008

08005bc0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	68f9      	ldr	r1, [r7, #12]
 8005bf4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d107      	bne.n	8005c12 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c0e:	6053      	str	r3, [r2, #4]
 8005c10:	e009      	b.n	8005c26 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d106      	bne.n	8005c26 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c24:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c62:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c64:	2064      	movs	r0, #100	; 0x64
 8005c66:	f7fb fa41 	bl	80010ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c76:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c78:	200a      	movs	r0, #10
 8005c7a:	f7fb fa37 	bl	80010ec <HAL_Delay>

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <USB_DriveVbus+0x44>
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d106      	bne.n	8005ccc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd6:	d109      	bne.n	8005cec <USB_DriveVbus+0x64>
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	0c5b      	lsrs	r3, r3, #17
 8005d18:	f003 0303 	and.w	r3, r3, #3
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	b29b      	uxth	r3, r3
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
	...

08005d4c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	4608      	mov	r0, r1
 8005d56:	4611      	mov	r1, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	70fb      	strb	r3, [r7, #3]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	70bb      	strb	r3, [r7, #2]
 8005d62:	4613      	mov	r3, r2
 8005d64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d80:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d87e      	bhi.n	8005e88 <USB_HC_Init+0x13c>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <USB_HC_Init+0x44>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005da1 	.word	0x08005da1
 8005d94:	08005e4b 	.word	0x08005e4b
 8005d98:	08005da1 	.word	0x08005da1
 8005d9c:	08005e0d 	.word	0x08005e0d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dac:	461a      	mov	r2, r3
 8005dae:	f240 439d 	movw	r3, #1181	; 0x49d
 8005db2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005db4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	da10      	bge.n	8005dde <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	78fa      	ldrb	r2, [r7, #3]
 8005dcc:	0151      	lsls	r1, r2, #5
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dda:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005ddc:	e057      	b.n	8005e8e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d051      	beq.n	8005e8e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	78fa      	ldrb	r2, [r7, #3]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e08:	60d3      	str	r3, [r2, #12]
      break;
 8005e0a:	e040      	b.n	8005e8e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	da34      	bge.n	8005e92 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	78fa      	ldrb	r2, [r7, #3]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e46:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e48:	e023      	b.n	8005e92 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	461a      	mov	r2, r3
 8005e58:	f240 2325 	movw	r3, #549	; 0x225
 8005e5c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e5e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da17      	bge.n	8005e96 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	78fa      	ldrb	r2, [r7, #3]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e80:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e84:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e86:	e006      	b.n	8005e96 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	77fb      	strb	r3, [r7, #31]
      break;
 8005e8c:	e004      	b.n	8005e98 <USB_HC_Init+0x14c>
      break;
 8005e8e:	bf00      	nop
 8005e90:	e002      	b.n	8005e98 <USB_HC_Init+0x14c>
      break;
 8005e92:	bf00      	nop
 8005e94:	e000      	b.n	8005e98 <USB_HC_Init+0x14c>
      break;
 8005e96:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	0151      	lsls	r1, r2, #5
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	440a      	add	r2, r1
 8005eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb2:	f043 0302 	orr.w	r3, r3, #2
 8005eb6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	6939      	ldr	r1, [r7, #16]
 8005ece:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ee2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da03      	bge.n	8005ef2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eee:	61bb      	str	r3, [r7, #24]
 8005ef0:	e001      	b.n	8005ef6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff feff 	bl	8005cfa <USB_GetHostSpeed>
 8005efc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005efe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d106      	bne.n	8005f14 <USB_HC_Init+0x1c8>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d003      	beq.n	8005f14 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	e001      	b.n	8005f18 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f18:	787b      	ldrb	r3, [r7, #1]
 8005f1a:	059b      	lsls	r3, r3, #22
 8005f1c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f20:	78bb      	ldrb	r3, [r7, #2]
 8005f22:	02db      	lsls	r3, r3, #11
 8005f24:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f28:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f2e:	049b      	lsls	r3, r3, #18
 8005f30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f34:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f36:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f3c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	0159      	lsls	r1, r3, #5
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	440b      	add	r3, r1
 8005f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f54:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d003      	beq.n	8005f66 <USB_HC_Init+0x21a>
 8005f5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d10f      	bne.n	8005f86 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	78fa      	ldrb	r2, [r7, #3]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f84:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08c      	sub	sp, #48	; 0x30
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d02d      	beq.n	8006016 <USB_HC_StartXfer+0x86>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	791b      	ldrb	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d129      	bne.n	8006016 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d117      	bne.n	8005ff8 <USB_HC_StartXfer+0x68>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	79db      	ldrb	r3, [r3, #7]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <USB_HC_StartXfer+0x48>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	79db      	ldrb	r3, [r3, #7]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d10f      	bne.n	8005ff8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	6a3a      	ldr	r2, [r7, #32]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10b      	bne.n	8006016 <USB_HC_StartXfer+0x86>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	795b      	ldrb	r3, [r3, #5]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d107      	bne.n	8006016 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	4619      	mov	r1, r3
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fa0f 	bl	8006430 <USB_DoPing>
      return HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	e0f8      	b.n	8006208 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d018      	beq.n	8006050 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	8912      	ldrh	r2, [r2, #8]
 8006026:	4413      	add	r3, r2
 8006028:	3b01      	subs	r3, #1
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	8912      	ldrh	r2, [r2, #8]
 800602e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006032:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006034:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006036:	8b7b      	ldrh	r3, [r7, #26]
 8006038:	429a      	cmp	r2, r3
 800603a:	d90b      	bls.n	8006054 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800603c:	8b7b      	ldrh	r3, [r7, #26]
 800603e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006040:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	8912      	ldrh	r2, [r2, #8]
 8006046:	fb03 f202 	mul.w	r2, r3, r2
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	611a      	str	r2, [r3, #16]
 800604e:	e001      	b.n	8006054 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006050:	2301      	movs	r3, #1
 8006052:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	78db      	ldrb	r3, [r3, #3]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800605c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	8912      	ldrh	r2, [r2, #8]
 8006062:	fb03 f202 	mul.w	r2, r3, r2
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	611a      	str	r2, [r3, #16]
 800606a:	e003      	b.n	8006074 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800607c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800607e:	04d9      	lsls	r1, r3, #19
 8006080:	4b63      	ldr	r3, [pc, #396]	; (8006210 <USB_HC_StartXfer+0x280>)
 8006082:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006084:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	7a9b      	ldrb	r3, [r3, #10]
 800608a:	075b      	lsls	r3, r3, #29
 800608c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006090:	69f9      	ldr	r1, [r7, #28]
 8006092:	0148      	lsls	r0, r1, #5
 8006094:	6a39      	ldr	r1, [r7, #32]
 8006096:	4401      	add	r1, r0
 8006098:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800609c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800609e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	68d9      	ldr	r1, [r3, #12]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b6:	460a      	mov	r2, r1
 80060b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bf0c      	ite	eq
 80060ca:	2301      	moveq	r3, #1
 80060cc:	2300      	movne	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	6a3a      	ldr	r2, [r7, #32]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	7e7b      	ldrb	r3, [r7, #25]
 8006102:	075b      	lsls	r3, r3, #29
 8006104:	69f9      	ldr	r1, [r7, #28]
 8006106:	0148      	lsls	r0, r1, #5
 8006108:	6a39      	ldr	r1, [r7, #32]
 800610a:	4401      	add	r1, r0
 800610c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006110:	4313      	orrs	r3, r2
 8006112:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	4413      	add	r3, r2
 800611c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800612a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	78db      	ldrb	r3, [r3, #3]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d004      	beq.n	800613e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	e003      	b.n	8006146 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006144:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800614c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	4413      	add	r3, r2
 8006156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615a:	461a      	mov	r2, r3
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006160:	79fb      	ldrb	r3, [r7, #7]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	e04e      	b.n	8006208 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	78db      	ldrb	r3, [r3, #3]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d149      	bne.n	8006206 <USB_HC_StartXfer+0x276>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d045      	beq.n	8006206 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	79db      	ldrb	r3, [r3, #7]
 800617e:	2b03      	cmp	r3, #3
 8006180:	d830      	bhi.n	80061e4 <USB_HC_StartXfer+0x254>
 8006182:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <USB_HC_StartXfer+0x1f8>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	08006199 	.word	0x08006199
 800618c:	080061bd 	.word	0x080061bd
 8006190:	08006199 	.word	0x08006199
 8006194:	080061bd 	.word	0x080061bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	3303      	adds	r3, #3
 800619e:	089b      	lsrs	r3, r3, #2
 80061a0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061a2:	8afa      	ldrh	r2, [r7, #22]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d91c      	bls.n	80061e8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80061ba:	e015      	b.n	80061e8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	3303      	adds	r3, #3
 80061c2:	089b      	lsrs	r3, r3, #2
 80061c4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80061c6:	8afa      	ldrh	r2, [r7, #22]
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d90a      	bls.n	80061ec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80061e2:	e003      	b.n	80061ec <USB_HC_StartXfer+0x25c>

      default:
        break;
 80061e4:	bf00      	nop
 80061e6:	e002      	b.n	80061ee <USB_HC_StartXfer+0x25e>
        break;
 80061e8:	bf00      	nop
 80061ea:	e000      	b.n	80061ee <USB_HC_StartXfer+0x25e>
        break;
 80061ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	68d9      	ldr	r1, [r3, #12]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	785a      	ldrb	r2, [r3, #1]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2000      	movs	r0, #0
 80061fe:	9000      	str	r0, [sp, #0]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff fb31 	bl	8005868 <USB_WritePacket>
  }

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3728      	adds	r7, #40	; 0x28
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	1ff80000 	.word	0x1ff80000

08006214 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	b29b      	uxth	r3, r3
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006236:	b480      	push	{r7}
 8006238:	b089      	sub	sp, #36	; 0x24
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	460b      	mov	r3, r1
 8006240:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	0c9b      	lsrs	r3, r3, #18
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	0fdb      	lsrs	r3, r3, #31
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b20      	cmp	r3, #32
 8006284:	d104      	bne.n	8006290 <USB_HC_Halt+0x5a>
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	e0c8      	b.n	8006422 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <USB_HC_Halt+0x66>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d163      	bne.n	8006364 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062ba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f040 80ab 	bne.w	8006420 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d133      	bne.n	800633e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	440a      	add	r2, r1
 800630c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006314:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3301      	adds	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006322:	d81d      	bhi.n	8006360 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800633a:	d0ec      	beq.n	8006316 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800633c:	e070      	b.n	8006420 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	440a      	add	r2, r1
 8006354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800635c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800635e:	e05f      	b.n	8006420 <USB_HC_Halt+0x1ea>
            break;
 8006360:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006362:	e05d      	b.n	8006420 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	69fa      	ldr	r2, [r7, #28]
 8006378:	440a      	add	r2, r1
 800637a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006382:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d133      	bne.n	80063fc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	0151      	lsls	r1, r2, #5
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	440a      	add	r2, r1
 80063ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063d2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3301      	adds	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063e0:	d81d      	bhi.n	800641e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063f8:	d0ec      	beq.n	80063d4 <USB_HC_Halt+0x19e>
 80063fa:	e011      	b.n	8006420 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	4413      	add	r3, r2
 8006404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	0151      	lsls	r1, r2, #5
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	440a      	add	r2, r1
 8006412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	e000      	b.n	8006420 <USB_HC_Halt+0x1ea>
          break;
 800641e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3724      	adds	r7, #36	; 0x24
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006444:	2301      	movs	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	04da      	lsls	r2, r3, #19
 800644c:	4b15      	ldr	r3, [pc, #84]	; (80064a4 <USB_DoPing+0x74>)
 800644e:	4013      	ands	r3, r2
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	440a      	add	r2, r1
 8006458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800645c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006460:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	4413      	add	r3, r2
 800646a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006478:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006480:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	4413      	add	r3, r2
 800648a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648e:	461a      	mov	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	1ff80000 	.word	0x1ff80000

080064a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff f911 	bl	80056e4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064c2:	2110      	movs	r1, #16
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff f96b 	bl	80057a0 <USB_FlushTxFifo>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff f997 	bl	8005808 <USB_FlushRxFifo>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064e4:	2300      	movs	r3, #0
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	e01f      	b.n	800652a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006500:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006508:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006510:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	4413      	add	r3, r2
 800651a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651e:	461a      	mov	r2, r3
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	3301      	adds	r3, #1
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	2b0f      	cmp	r3, #15
 800652e:	d9dc      	bls.n	80064ea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006530:	2300      	movs	r3, #0
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e034      	b.n	80065a0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	4413      	add	r3, r2
 800653e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800654c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006554:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800655c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	4413      	add	r3, r2
 8006566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656a:	461a      	mov	r2, r3
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3301      	adds	r3, #1
 8006574:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800657c:	d80c      	bhi.n	8006598 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006594:	d0ec      	beq.n	8006570 <USB_StopHost+0xc8>
 8006596:	e000      	b.n	800659a <USB_StopHost+0xf2>
        break;
 8006598:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	3301      	adds	r3, #1
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b0f      	cmp	r3, #15
 80065a4:	d9c7      	bls.n	8006536 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ac:	461a      	mov	r2, r3
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
 80065b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff f880 	bl	80056c2 <USB_EnableGlobalInt>

  return ret;
 80065c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3720      	adds	r7, #32
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80065cc:	b590      	push	{r4, r7, lr}
 80065ce:	b089      	sub	sp, #36	; 0x24
 80065d0:	af04      	add	r7, sp, #16
 80065d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065d4:	2301      	movs	r3, #1
 80065d6:	2202      	movs	r2, #2
 80065d8:	2102      	movs	r1, #2
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fc66 	bl	8006eac <USBH_FindInterface>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	2bff      	cmp	r3, #255	; 0xff
 80065e8:	d002      	beq.n	80065f0 <USBH_CDC_InterfaceInit+0x24>
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d901      	bls.n	80065f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065f0:	2302      	movs	r3, #2
 80065f2:	e13d      	b.n	8006870 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fc3b 	bl	8006e74 <USBH_SelectInterface>
 80065fe:	4603      	mov	r3, r0
 8006600:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006608:	2302      	movs	r3, #2
 800660a:	e131      	b.n	8006870 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006612:	2050      	movs	r0, #80	; 0x50
 8006614:	f002 fafa 	bl	8008c0c <malloc>
 8006618:	4603      	mov	r3, r0
 800661a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800662c:	2302      	movs	r3, #2
 800662e:	e11f      	b.n	8006870 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006630:	2250      	movs	r2, #80	; 0x50
 8006632:	2100      	movs	r1, #0
 8006634:	68b8      	ldr	r0, [r7, #8]
 8006636:	f002 faf9 	bl	8008c2c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	211a      	movs	r1, #26
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	4413      	add	r3, r2
 8006646:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	b25b      	sxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	da15      	bge.n	800667e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	211a      	movs	r1, #26
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	4413      	add	r3, r2
 800665e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006662:	781a      	ldrb	r2, [r3, #0]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	211a      	movs	r1, #26
 800666e:	fb01 f303 	mul.w	r3, r1, r3
 8006672:	4413      	add	r3, r2
 8006674:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006678:	881a      	ldrh	r2, [r3, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	785b      	ldrb	r3, [r3, #1]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 ff2c 	bl	80084e2 <USBH_AllocPipe>
 800668a:	4603      	mov	r3, r0
 800668c:	461a      	mov	r2, r3
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	7819      	ldrb	r1, [r3, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	7858      	ldrb	r0, [r3, #1]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	8952      	ldrh	r2, [r2, #10]
 80066aa:	9202      	str	r2, [sp, #8]
 80066ac:	2203      	movs	r2, #3
 80066ae:	9201      	str	r2, [sp, #4]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	4623      	mov	r3, r4
 80066b4:	4602      	mov	r2, r0
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 fee4 	bl	8008484 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2200      	movs	r2, #0
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f002 f9f3 	bl	8008ab0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80066ca:	2300      	movs	r3, #0
 80066cc:	2200      	movs	r2, #0
 80066ce:	210a      	movs	r1, #10
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fbeb 	bl	8006eac <USBH_FindInterface>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	2bff      	cmp	r3, #255	; 0xff
 80066de:	d002      	beq.n	80066e6 <USBH_CDC_InterfaceInit+0x11a>
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d901      	bls.n	80066ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066e6:	2302      	movs	r3, #2
 80066e8:	e0c2      	b.n	8006870 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	211a      	movs	r1, #26
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	4413      	add	r3, r2
 80066f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	b25b      	sxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	da16      	bge.n	8006730 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	211a      	movs	r1, #26
 8006708:	fb01 f303 	mul.w	r3, r1, r3
 800670c:	4413      	add	r3, r2
 800670e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006712:	781a      	ldrb	r2, [r3, #0]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	211a      	movs	r1, #26
 800671e:	fb01 f303 	mul.w	r3, r1, r3
 8006722:	4413      	add	r3, r2
 8006724:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006728:	881a      	ldrh	r2, [r3, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	835a      	strh	r2, [r3, #26]
 800672e:	e015      	b.n	800675c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	211a      	movs	r1, #26
 8006736:	fb01 f303 	mul.w	r3, r1, r3
 800673a:	4413      	add	r3, r2
 800673c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006740:	781a      	ldrb	r2, [r3, #0]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	211a      	movs	r1, #26
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006756:	881a      	ldrh	r2, [r3, #0]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	211a      	movs	r1, #26
 8006762:	fb01 f303 	mul.w	r3, r1, r3
 8006766:	4413      	add	r3, r2
 8006768:	f203 3356 	addw	r3, r3, #854	; 0x356
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b25b      	sxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	da16      	bge.n	80067a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	211a      	movs	r1, #26
 800677a:	fb01 f303 	mul.w	r3, r1, r3
 800677e:	4413      	add	r3, r2
 8006780:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006784:	781a      	ldrb	r2, [r3, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	211a      	movs	r1, #26
 8006790:	fb01 f303 	mul.w	r3, r1, r3
 8006794:	4413      	add	r3, r2
 8006796:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800679a:	881a      	ldrh	r2, [r3, #0]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	835a      	strh	r2, [r3, #26]
 80067a0:	e015      	b.n	80067ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	211a      	movs	r1, #26
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	211a      	movs	r1, #26
 80067be:	fb01 f303 	mul.w	r3, r1, r3
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067c8:	881a      	ldrh	r2, [r3, #0]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	7b9b      	ldrb	r3, [r3, #14]
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 fe84 	bl	80084e2 <USBH_AllocPipe>
 80067da:	4603      	mov	r3, r0
 80067dc:	461a      	mov	r2, r3
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	7bdb      	ldrb	r3, [r3, #15]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 fe7a 	bl	80084e2 <USBH_AllocPipe>
 80067ee:	4603      	mov	r3, r0
 80067f0:	461a      	mov	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	7b59      	ldrb	r1, [r3, #13]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	7b98      	ldrb	r0, [r3, #14]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	8b12      	ldrh	r2, [r2, #24]
 800680e:	9202      	str	r2, [sp, #8]
 8006810:	2202      	movs	r2, #2
 8006812:	9201      	str	r2, [sp, #4]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	4623      	mov	r3, r4
 8006818:	4602      	mov	r2, r0
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fe32 	bl	8008484 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	7b19      	ldrb	r1, [r3, #12]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	7bd8      	ldrb	r0, [r3, #15]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	8b52      	ldrh	r2, [r2, #26]
 8006838:	9202      	str	r2, [sp, #8]
 800683a:	2202      	movs	r2, #2
 800683c:	9201      	str	r2, [sp, #4]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	4623      	mov	r3, r4
 8006842:	4602      	mov	r2, r0
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 fe1d 	bl	8008484 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	7b5b      	ldrb	r3, [r3, #13]
 8006856:	2200      	movs	r2, #0
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f002 f928 	bl	8008ab0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	7b1b      	ldrb	r3, [r3, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f002 f921 	bl	8008ab0 <USBH_LL_SetToggle>

  return USBH_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	bd90      	pop	{r4, r7, pc}

08006878 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00e      	beq.n	80068b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fe12 	bl	80084c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 fe3d 	bl	8008524 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	7b1b      	ldrb	r3, [r3, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00e      	beq.n	80068d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	7b1b      	ldrb	r3, [r3, #12]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fdff 	bl	80084c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	7b1b      	ldrb	r3, [r3, #12]
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fe2a 	bl	8008524 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	7b5b      	ldrb	r3, [r3, #13]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00e      	beq.n	80068fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	7b5b      	ldrb	r3, [r3, #13]
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 fdec 	bl	80084c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	7b5b      	ldrb	r3, [r3, #13]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fe17 	bl	8008524 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	4618      	mov	r0, r3
 8006912:	f002 f983 	bl	8008c1c <free>
    phost->pActiveClass->pData = 0U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800691c:	2200      	movs	r2, #0
 800691e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3340      	adds	r3, #64	; 0x40
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f8b1 	bl	8006aaa <GetLineCoding>
 8006948:	4603      	mov	r3, r0
 800694a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d105      	bne.n	800695e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006958:	2102      	movs	r1, #2
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800695e:	7afb      	ldrb	r3, [r7, #11]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006988:	2b04      	cmp	r3, #4
 800698a:	d877      	bhi.n	8006a7c <USBH_CDC_Process+0x114>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <USBH_CDC_Process+0x2c>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069a9 	.word	0x080069a9
 8006998:	080069af 	.word	0x080069af
 800699c:	080069df 	.word	0x080069df
 80069a0:	08006a53 	.word	0x08006a53
 80069a4:	08006a61 	.word	0x08006a61
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]
      break;
 80069ac:	e06d      	b.n	8006a8a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f897 	bl	8006ae8 <SetLineCoding>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069cc:	e058      	b.n	8006a80 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80069ce:	7bbb      	ldrb	r3, [r7, #14]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d055      	beq.n	8006a80 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2204      	movs	r2, #4
 80069d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80069dc:	e050      	b.n	8006a80 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	3340      	adds	r3, #64	; 0x40
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f860 	bl	8006aaa <GetLineCoding>
 80069ea:	4603      	mov	r3, r0
 80069ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d126      	bne.n	8006a42 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a06:	791b      	ldrb	r3, [r3, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d13b      	bne.n	8006a84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a16:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d133      	bne.n	8006a84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a26:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d12b      	bne.n	8006a84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a34:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d124      	bne.n	8006a84 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f958 	bl	8006cf0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a40:	e020      	b.n	8006a84 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d01d      	beq.n	8006a84 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a50:	e018      	b.n	8006a84 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f867 	bl	8006b26 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f8da 	bl	8006c12 <CDC_ProcessReception>
      break;
 8006a5e:	e014      	b.n	8006a8a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a60:	2100      	movs	r1, #0
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 ffef 	bl	8007a46 <USBH_ClrFeature>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a6c:	7bbb      	ldrb	r3, [r7, #14]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a7a:	e005      	b.n	8006a88 <USBH_CDC_Process+0x120>

    default:
      break;
 8006a7c:	bf00      	nop
 8006a7e:	e004      	b.n	8006a8a <USBH_CDC_Process+0x122>
      break;
 8006a80:	bf00      	nop
 8006a82:	e002      	b.n	8006a8a <USBH_CDC_Process+0x122>
      break;
 8006a84:	bf00      	nop
 8006a86:	e000      	b.n	8006a8a <USBH_CDC_Process+0x122>
      break;
 8006a88:	bf00      	nop

  }

  return status;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	22a1      	movs	r2, #161	; 0xa1
 8006ab8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2221      	movs	r2, #33	; 0x21
 8006abe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2207      	movs	r2, #7
 8006ad0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2207      	movs	r2, #7
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 fa81 	bl	8007fe0 <USBH_CtlReq>
 8006ade:	4603      	mov	r3, r0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2221      	movs	r2, #33	; 0x21
 8006af6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2207      	movs	r2, #7
 8006b0e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2207      	movs	r2, #7
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 fa62 	bl	8007fe0 <USBH_CtlReq>
 8006b1c:	4603      	mov	r3, r0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b086      	sub	sp, #24
 8006b2a:	af02      	add	r7, sp, #8
 8006b2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d002      	beq.n	8006b4c <CDC_ProcessTransmission+0x26>
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d023      	beq.n	8006b92 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b4a:	e05e      	b.n	8006c0a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	8b12      	ldrh	r2, [r2, #24]
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d90b      	bls.n	8006b70 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	69d9      	ldr	r1, [r3, #28]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8b1a      	ldrh	r2, [r3, #24]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	7b5b      	ldrb	r3, [r3, #13]
 8006b64:	2001      	movs	r0, #1
 8006b66:	9000      	str	r0, [sp, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 fc48 	bl	80083fe <USBH_BulkSendData>
 8006b6e:	e00b      	b.n	8006b88 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	7b5b      	ldrb	r3, [r3, #13]
 8006b7e:	2001      	movs	r0, #1
 8006b80:	9000      	str	r0, [sp, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fc3b 	bl	80083fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b90:	e03b      	b.n	8006c0a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	7b5b      	ldrb	r3, [r3, #13]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 ff5f 	bl	8008a5c <USBH_LL_GetURBState>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d128      	bne.n	8006bfa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	8b12      	ldrh	r2, [r2, #24]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d90e      	bls.n	8006bd2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	8b12      	ldrh	r2, [r2, #24]
 8006bbc:	1a9a      	subs	r2, r3, r2
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	8b12      	ldrh	r2, [r2, #24]
 8006bca:	441a      	add	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	61da      	str	r2, [r3, #28]
 8006bd0:	e002      	b.n	8006bd8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006be8:	e00e      	b.n	8006c08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f868 	bl	8006cc8 <USBH_CDC_TransmitCallback>
      break;
 8006bf8:	e006      	b.n	8006c08 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006bfa:	7afb      	ldrb	r3, [r7, #11]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d103      	bne.n	8006c08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c08:	bf00      	nop
  }
}
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b086      	sub	sp, #24
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c24:	2300      	movs	r3, #0
 8006c26:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d002      	beq.n	8006c38 <CDC_ProcessReception+0x26>
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d00e      	beq.n	8006c54 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c36:	e043      	b.n	8006cc0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	6a19      	ldr	r1, [r3, #32]
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	8b5a      	ldrh	r2, [r3, #26]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	7b1b      	ldrb	r3, [r3, #12]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 fbff 	bl	8008448 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c52:	e035      	b.n	8006cc0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	7b1b      	ldrb	r3, [r3, #12]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 fefe 	bl	8008a5c <USBH_LL_GetURBState>
 8006c60:	4603      	mov	r3, r0
 8006c62:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c64:	7cfb      	ldrb	r3, [r7, #19]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d129      	bne.n	8006cbe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	7b1b      	ldrb	r3, [r3, #12]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 fe61 	bl	8008938 <USBH_LL_GetLastXferSize>
 8006c76:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d016      	beq.n	8006cb0 <CDC_ProcessReception+0x9e>
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	8b5b      	ldrh	r3, [r3, #26]
 8006c86:	461a      	mov	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d910      	bls.n	8006cb0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	1ad2      	subs	r2, r2, r3
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6a1a      	ldr	r2, [r3, #32]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	441a      	add	r2, r3
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2203      	movs	r2, #3
 8006caa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cae:	e006      	b.n	8006cbe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f80f 	bl	8006cdc <USBH_CDC_ReceiveCallback>
      break;
 8006cbe:	bf00      	nop
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e029      	b.n	8006d70 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	79fa      	ldrb	r2, [r7, #7]
 8006d20:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f81f 	bl	8006d78 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f001 fd31 	bl	80087d0 <USBH_LL_Init>

  return USBH_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e009      	b.n	8006d9e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	33e0      	adds	r3, #224	; 0xe0
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	2200      	movs	r2, #0
 8006d96:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b0f      	cmp	r3, #15
 8006da2:	d9f2      	bls.n	8006d8a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	e009      	b.n	8006dbe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc4:	d3f1      	bcc.n	8006daa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2240      	movs	r2, #64	; 0x40
 8006dea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d016      	beq.n	8006e62 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10e      	bne.n	8006e5c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e44:	1c59      	adds	r1, r3, #1
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	33de      	adds	r3, #222	; 0xde
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]
 8006e5a:	e004      	b.n	8006e66 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	73fb      	strb	r3, [r7, #15]
 8006e60:	e001      	b.n	8006e66 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e62:	2302      	movs	r3, #2
 8006e64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e8a:	78fa      	ldrb	r2, [r7, #3]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d204      	bcs.n	8006e9a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006e98:	e001      	b.n	8006e9e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	70fb      	strb	r3, [r7, #3]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70bb      	strb	r3, [r7, #2]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ed4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ed6:	e025      	b.n	8006f24 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	221a      	movs	r2, #26
 8006edc:	fb02 f303 	mul.w	r3, r2, r3
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3302      	adds	r3, #2
 8006ee8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	795b      	ldrb	r3, [r3, #5]
 8006eee:	78fa      	ldrb	r2, [r7, #3]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d002      	beq.n	8006efa <USBH_FindInterface+0x4e>
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	2bff      	cmp	r3, #255	; 0xff
 8006ef8:	d111      	bne.n	8006f1e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006efe:	78ba      	ldrb	r2, [r7, #2]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d002      	beq.n	8006f0a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f04:	78bb      	ldrb	r3, [r7, #2]
 8006f06:	2bff      	cmp	r3, #255	; 0xff
 8006f08:	d109      	bne.n	8006f1e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f0e:	787a      	ldrb	r2, [r7, #1]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d002      	beq.n	8006f1a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f14:	787b      	ldrb	r3, [r7, #1]
 8006f16:	2bff      	cmp	r3, #255	; 0xff
 8006f18:	d101      	bne.n	8006f1e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
 8006f1c:	e006      	b.n	8006f2c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	3301      	adds	r3, #1
 8006f22:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d9d6      	bls.n	8006ed8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f2a:	23ff      	movs	r3, #255	; 0xff
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 fc81 	bl	8008848 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f46:	2101      	movs	r1, #1
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fd9a 	bl	8008a82 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af04      	add	r7, sp, #16
 8006f5e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f60:	2302      	movs	r3, #2
 8006f62:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d102      	bne.n	8006f7a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2203      	movs	r2, #3
 8006f78:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b0b      	cmp	r3, #11
 8006f82:	f200 81be 	bhi.w	8007302 <USBH_Process+0x3aa>
 8006f86:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <USBH_Process+0x34>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fbd 	.word	0x08006fbd
 8006f90:	08006fef 	.word	0x08006fef
 8006f94:	08007057 	.word	0x08007057
 8006f98:	0800729d 	.word	0x0800729d
 8006f9c:	08007303 	.word	0x08007303
 8006fa0:	080070fb 	.word	0x080070fb
 8006fa4:	08007243 	.word	0x08007243
 8006fa8:	08007131 	.word	0x08007131
 8006fac:	08007151 	.word	0x08007151
 8006fb0:	08007171 	.word	0x08007171
 8006fb4:	080071b5 	.word	0x080071b5
 8006fb8:	08007285 	.word	0x08007285
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 819e 	beq.w	8007306 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006fd0:	20c8      	movs	r0, #200	; 0xc8
 8006fd2:	f001 fd9d 	bl	8008b10 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fc93 	bl	8008902 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006fec:	e18b      	b.n	8007306 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d107      	bne.n	8007008 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007006:	e18d      	b.n	8007324 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800700e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007012:	d914      	bls.n	800703e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800701a:	3301      	adds	r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800702a:	2b03      	cmp	r3, #3
 800702c:	d903      	bls.n	8007036 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	220d      	movs	r2, #13
 8007032:	701a      	strb	r2, [r3, #0]
      break;
 8007034:	e176      	b.n	8007324 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
      break;
 800703c:	e172      	b.n	8007324 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007044:	f103 020a 	add.w	r2, r3, #10
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800704e:	200a      	movs	r0, #10
 8007050:	f001 fd5e 	bl	8008b10 <USBH_Delay>
      break;
 8007054:	e166      	b.n	8007324 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007066:	2104      	movs	r1, #4
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800706c:	2064      	movs	r0, #100	; 0x64
 800706e:	f001 fd4f 	bl	8008b10 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 fc1e 	bl	80088b4 <USBH_LL_GetSpeed>
 8007078:	4603      	mov	r3, r0
 800707a:	461a      	mov	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2205      	movs	r2, #5
 8007086:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007088:	2100      	movs	r1, #0
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 fa29 	bl	80084e2 <USBH_AllocPipe>
 8007090:	4603      	mov	r3, r0
 8007092:	461a      	mov	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 fa21 	bl	80084e2 <USBH_AllocPipe>
 80070a0:	4603      	mov	r3, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7919      	ldrb	r1, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070bc:	b292      	uxth	r2, r2
 80070be:	9202      	str	r2, [sp, #8]
 80070c0:	2200      	movs	r2, #0
 80070c2:	9201      	str	r2, [sp, #4]
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	4603      	mov	r3, r0
 80070c8:	2280      	movs	r2, #128	; 0x80
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 f9da 	bl	8008484 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	7959      	ldrb	r1, [r3, #5]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070e4:	b292      	uxth	r2, r2
 80070e6:	9202      	str	r2, [sp, #8]
 80070e8:	2200      	movs	r2, #0
 80070ea:	9201      	str	r2, [sp, #4]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	4603      	mov	r3, r0
 80070f0:	2200      	movs	r2, #0
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f001 f9c6 	bl	8008484 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070f8:	e114      	b.n	8007324 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f918 	bl	8007330 <USBH_HandleEnum>
 8007100:	4603      	mov	r3, r0
 8007102:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	f040 80fe 	bne.w	800730a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800711c:	2b01      	cmp	r3, #1
 800711e:	d103      	bne.n	8007128 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2208      	movs	r2, #8
 8007124:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007126:	e0f0      	b.n	800730a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2207      	movs	r2, #7
 800712c:	701a      	strb	r2, [r3, #0]
      break;
 800712e:	e0ec      	b.n	800730a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 80e9 	beq.w	800730e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007142:	2101      	movs	r1, #1
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2208      	movs	r2, #8
 800714c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800714e:	e0de      	b.n	800730e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007156:	b29b      	uxth	r3, r3
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fc2c 	bl	80079b8 <USBH_SetCfg>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	f040 80d5 	bne.w	8007312 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2209      	movs	r2, #9
 800716c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800716e:	e0d0      	b.n	8007312 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d016      	beq.n	80071ac <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800717e:	2101      	movs	r1, #1
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fc3c 	bl	80079fe <USBH_SetFeature>
 8007186:	4603      	mov	r3, r0
 8007188:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d103      	bne.n	800719a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	220a      	movs	r2, #10
 8007196:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007198:	e0bd      	b.n	8007316 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b03      	cmp	r3, #3
 80071a0:	f040 80b9 	bne.w	8007316 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	220a      	movs	r2, #10
 80071a8:	701a      	strb	r2, [r3, #0]
      break;
 80071aa:	e0b4      	b.n	8007316 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	220a      	movs	r2, #10
 80071b0:	701a      	strb	r2, [r3, #0]
      break;
 80071b2:	e0b0      	b.n	8007316 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 80ad 	beq.w	800731a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]
 80071cc:	e016      	b.n	80071fc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80071ce:	7bfa      	ldrb	r2, [r7, #15]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	32de      	adds	r2, #222	; 0xde
 80071d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d8:	791a      	ldrb	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d108      	bne.n	80071f6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80071e4:	7bfa      	ldrb	r2, [r7, #15]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32de      	adds	r2, #222	; 0xde
 80071ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80071f4:	e005      	b.n	8007202 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	3301      	adds	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d0e5      	beq.n	80071ce <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d016      	beq.n	800723a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	4798      	blx	r3
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2206      	movs	r2, #6
 8007222:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800722a:	2103      	movs	r1, #3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007230:	e073      	b.n	800731a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	220d      	movs	r2, #13
 8007236:	701a      	strb	r2, [r3, #0]
      break;
 8007238:	e06f      	b.n	800731a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	220d      	movs	r2, #13
 800723e:	701a      	strb	r2, [r3, #0]
      break;
 8007240:	e06b      	b.n	800731a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d017      	beq.n	800727c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	4798      	blx	r3
 8007258:	4603      	mov	r3, r0
 800725a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	d103      	bne.n	800726c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	220b      	movs	r2, #11
 8007268:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800726a:	e058      	b.n	800731e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800726c:	7bbb      	ldrb	r3, [r7, #14]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d154      	bne.n	800731e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	220d      	movs	r2, #13
 8007278:	701a      	strb	r2, [r3, #0]
      break;
 800727a:	e050      	b.n	800731e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	220d      	movs	r2, #13
 8007280:	701a      	strb	r2, [r3, #0]
      break;
 8007282:	e04c      	b.n	800731e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d049      	beq.n	8007322 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
      }
      break;
 800729a:	e042      	b.n	8007322 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff fd67 	bl	8006d78 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d009      	beq.n	80072c8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072d8:	2105      	movs	r1, #5
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d107      	bne.n	80072fa <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff fe20 	bl	8006f38 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072f8:	e014      	b.n	8007324 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 faa4 	bl	8008848 <USBH_LL_Start>
      break;
 8007300:	e010      	b.n	8007324 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007302:	bf00      	nop
 8007304:	e00e      	b.n	8007324 <USBH_Process+0x3cc>
      break;
 8007306:	bf00      	nop
 8007308:	e00c      	b.n	8007324 <USBH_Process+0x3cc>
      break;
 800730a:	bf00      	nop
 800730c:	e00a      	b.n	8007324 <USBH_Process+0x3cc>
    break;
 800730e:	bf00      	nop
 8007310:	e008      	b.n	8007324 <USBH_Process+0x3cc>
      break;
 8007312:	bf00      	nop
 8007314:	e006      	b.n	8007324 <USBH_Process+0x3cc>
      break;
 8007316:	bf00      	nop
 8007318:	e004      	b.n	8007324 <USBH_Process+0x3cc>
      break;
 800731a:	bf00      	nop
 800731c:	e002      	b.n	8007324 <USBH_Process+0x3cc>
      break;
 800731e:	bf00      	nop
 8007320:	e000      	b.n	8007324 <USBH_Process+0x3cc>
      break;
 8007322:	bf00      	nop
  }
  return USBH_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop

08007330 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af04      	add	r7, sp, #16
 8007336:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007338:	2301      	movs	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800733c:	2301      	movs	r3, #1
 800733e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	785b      	ldrb	r3, [r3, #1]
 8007344:	2b07      	cmp	r3, #7
 8007346:	f200 81c1 	bhi.w	80076cc <USBH_HandleEnum+0x39c>
 800734a:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <USBH_HandleEnum+0x20>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	08007371 	.word	0x08007371
 8007354:	0800742f 	.word	0x0800742f
 8007358:	08007499 	.word	0x08007499
 800735c:	08007527 	.word	0x08007527
 8007360:	08007591 	.word	0x08007591
 8007364:	08007601 	.word	0x08007601
 8007368:	08007647 	.word	0x08007647
 800736c:	0800768d 	.word	0x0800768d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007370:	2108      	movs	r1, #8
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa50 	bl	8007818 <USBH_Get_DevDesc>
 8007378:	4603      	mov	r3, r0
 800737a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d130      	bne.n	80073e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	7919      	ldrb	r1, [r3, #4]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073a6:	b292      	uxth	r2, r2
 80073a8:	9202      	str	r2, [sp, #8]
 80073aa:	2200      	movs	r2, #0
 80073ac:	9201      	str	r2, [sp, #4]
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	4603      	mov	r3, r0
 80073b2:	2280      	movs	r2, #128	; 0x80
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 f865 	bl	8008484 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	7959      	ldrb	r1, [r3, #5]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073ce:	b292      	uxth	r2, r2
 80073d0:	9202      	str	r2, [sp, #8]
 80073d2:	2200      	movs	r2, #0
 80073d4:	9201      	str	r2, [sp, #4]
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	4603      	mov	r3, r0
 80073da:	2200      	movs	r2, #0
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 f851 	bl	8008484 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073e2:	e175      	b.n	80076d0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	f040 8172 	bne.w	80076d0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073f2:	3301      	adds	r3, #1
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007402:	2b03      	cmp	r3, #3
 8007404:	d903      	bls.n	800740e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	220d      	movs	r2, #13
 800740a:	701a      	strb	r2, [r3, #0]
      break;
 800740c:	e160      	b.n	80076d0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	795b      	ldrb	r3, [r3, #5]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 f885 	bl	8008524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	791b      	ldrb	r3, [r3, #4]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 f87f 	bl	8008524 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
      break;
 800742c:	e150      	b.n	80076d0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800742e:	2112      	movs	r1, #18
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f9f1 	bl	8007818 <USBH_Get_DevDesc>
 8007436:	4603      	mov	r3, r0
 8007438:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d103      	bne.n	8007448 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007446:	e145      	b.n	80076d4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	2b03      	cmp	r3, #3
 800744c:	f040 8142 	bne.w	80076d4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007456:	3301      	adds	r3, #1
 8007458:	b2da      	uxtb	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007466:	2b03      	cmp	r3, #3
 8007468:	d903      	bls.n	8007472 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	220d      	movs	r2, #13
 800746e:	701a      	strb	r2, [r3, #0]
      break;
 8007470:	e130      	b.n	80076d4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	795b      	ldrb	r3, [r3, #5]
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 f853 	bl	8008524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	791b      	ldrb	r3, [r3, #4]
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 f84d 	bl	8008524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	701a      	strb	r2, [r3, #0]
      break;
 8007496:	e11d      	b.n	80076d4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007498:	2101      	movs	r1, #1
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa68 	bl	8007970 <USBH_SetAddress>
 80074a0:	4603      	mov	r3, r0
 80074a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d132      	bne.n	8007510 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80074aa:	2002      	movs	r0, #2
 80074ac:	f001 fb30 	bl	8008b10 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2203      	movs	r2, #3
 80074bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	7919      	ldrb	r1, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074d2:	b292      	uxth	r2, r2
 80074d4:	9202      	str	r2, [sp, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	9201      	str	r2, [sp, #4]
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	4603      	mov	r3, r0
 80074de:	2280      	movs	r2, #128	; 0x80
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 ffcf 	bl	8008484 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	7959      	ldrb	r1, [r3, #5]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074fa:	b292      	uxth	r2, r2
 80074fc:	9202      	str	r2, [sp, #8]
 80074fe:	2200      	movs	r2, #0
 8007500:	9201      	str	r2, [sp, #4]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	4603      	mov	r3, r0
 8007506:	2200      	movs	r2, #0
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 ffbb 	bl	8008484 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800750e:	e0e3      	b.n	80076d8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	2b03      	cmp	r3, #3
 8007514:	f040 80e0 	bne.w	80076d8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	220d      	movs	r2, #13
 800751c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	705a      	strb	r2, [r3, #1]
      break;
 8007524:	e0d8      	b.n	80076d8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007526:	2109      	movs	r1, #9
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f99d 	bl	8007868 <USBH_Get_CfgDesc>
 800752e:	4603      	mov	r3, r0
 8007530:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d103      	bne.n	8007540 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2204      	movs	r2, #4
 800753c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800753e:	e0cd      	b.n	80076dc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	2b03      	cmp	r3, #3
 8007544:	f040 80ca 	bne.w	80076dc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800754e:	3301      	adds	r3, #1
 8007550:	b2da      	uxtb	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800755e:	2b03      	cmp	r3, #3
 8007560:	d903      	bls.n	800756a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	220d      	movs	r2, #13
 8007566:	701a      	strb	r2, [r3, #0]
      break;
 8007568:	e0b8      	b.n	80076dc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	795b      	ldrb	r3, [r3, #5]
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 ffd7 	bl	8008524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 ffd1 	bl	8008524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
      break;
 800758e:	e0a5      	b.n	80076dc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f965 	bl	8007868 <USBH_Get_CfgDesc>
 800759e:	4603      	mov	r3, r0
 80075a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d103      	bne.n	80075b0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2205      	movs	r2, #5
 80075ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075ae:	e097      	b.n	80076e0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	f040 8094 	bne.w	80076e0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075be:	3301      	adds	r3, #1
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d903      	bls.n	80075da <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	220d      	movs	r2, #13
 80075d6:	701a      	strb	r2, [r3, #0]
      break;
 80075d8:	e082      	b.n	80076e0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	795b      	ldrb	r3, [r3, #5]
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 ff9f 	bl	8008524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	791b      	ldrb	r3, [r3, #4]
 80075ea:	4619      	mov	r1, r3
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 ff99 	bl	8008524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	701a      	strb	r2, [r3, #0]
      break;
 80075fe:	e06f      	b.n	80076e0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007606:	2b00      	cmp	r3, #0
 8007608:	d019      	beq.n	800763e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007616:	23ff      	movs	r3, #255	; 0xff
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f949 	bl	80078b0 <USBH_Get_StringDesc>
 800761e:	4603      	mov	r3, r0
 8007620:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d103      	bne.n	8007630 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2206      	movs	r2, #6
 800762c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800762e:	e059      	b.n	80076e4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b03      	cmp	r3, #3
 8007634:	d156      	bne.n	80076e4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2206      	movs	r2, #6
 800763a:	705a      	strb	r2, [r3, #1]
      break;
 800763c:	e052      	b.n	80076e4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2206      	movs	r2, #6
 8007642:	705a      	strb	r2, [r3, #1]
      break;
 8007644:	e04e      	b.n	80076e4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800764c:	2b00      	cmp	r3, #0
 800764e:	d019      	beq.n	8007684 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800765c:	23ff      	movs	r3, #255	; 0xff
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f926 	bl	80078b0 <USBH_Get_StringDesc>
 8007664:	4603      	mov	r3, r0
 8007666:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2207      	movs	r2, #7
 8007672:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007674:	e038      	b.n	80076e8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b03      	cmp	r3, #3
 800767a:	d135      	bne.n	80076e8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2207      	movs	r2, #7
 8007680:	705a      	strb	r2, [r3, #1]
      break;
 8007682:	e031      	b.n	80076e8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2207      	movs	r2, #7
 8007688:	705a      	strb	r2, [r3, #1]
      break;
 800768a:	e02d      	b.n	80076e8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007692:	2b00      	cmp	r3, #0
 8007694:	d017      	beq.n	80076c6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076a2:	23ff      	movs	r3, #255	; 0xff
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f903 	bl	80078b0 <USBH_Get_StringDesc>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d102      	bne.n	80076ba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076b8:	e018      	b.n	80076ec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d115      	bne.n	80076ec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]
      break;
 80076c4:	e012      	b.n	80076ec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	73fb      	strb	r3, [r7, #15]
      break;
 80076ca:	e00f      	b.n	80076ec <USBH_HandleEnum+0x3bc>

    default:
      break;
 80076cc:	bf00      	nop
 80076ce:	e00e      	b.n	80076ee <USBH_HandleEnum+0x3be>
      break;
 80076d0:	bf00      	nop
 80076d2:	e00c      	b.n	80076ee <USBH_HandleEnum+0x3be>
      break;
 80076d4:	bf00      	nop
 80076d6:	e00a      	b.n	80076ee <USBH_HandleEnum+0x3be>
      break;
 80076d8:	bf00      	nop
 80076da:	e008      	b.n	80076ee <USBH_HandleEnum+0x3be>
      break;
 80076dc:	bf00      	nop
 80076de:	e006      	b.n	80076ee <USBH_HandleEnum+0x3be>
      break;
 80076e0:	bf00      	nop
 80076e2:	e004      	b.n	80076ee <USBH_HandleEnum+0x3be>
      break;
 80076e4:	bf00      	nop
 80076e6:	e002      	b.n	80076ee <USBH_HandleEnum+0x3be>
      break;
 80076e8:	bf00      	nop
 80076ea:	e000      	b.n	80076ee <USBH_HandleEnum+0x3be>
      break;
 80076ec:	bf00      	nop
  }
  return Status;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f804 	bl	800773a <USBH_HandleSof>
}
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b0b      	cmp	r3, #11
 800774a:	d10a      	bne.n	8007762 <USBH_HandleSof+0x28>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d005      	beq.n	8007762 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
  }
}
 8007762:	bf00      	nop
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800777a:	bf00      	nop
}
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007796:	bf00      	nop
}
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 f844 	bl	800887e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	791b      	ldrb	r3, [r3, #4]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fe91 	bl	8008524 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	795b      	ldrb	r3, [r3, #5]
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fe8b 	bl	8008524 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af02      	add	r7, sp, #8
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	b29b      	uxth	r3, r3
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	4613      	mov	r3, r2
 8007832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007836:	2100      	movs	r1, #0
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f864 	bl	8007906 <USBH_GetDescriptor>
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007854:	78fa      	ldrb	r2, [r7, #3]
 8007856:	b292      	uxth	r2, r2
 8007858:	4619      	mov	r1, r3
 800785a:	f000 f918 	bl	8007a8e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800785e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af02      	add	r7, sp, #8
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	331c      	adds	r3, #28
 8007878:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800787a:	887b      	ldrh	r3, [r7, #2]
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007884:	2100      	movs	r1, #0
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f83d 	bl	8007906 <USBH_GetDescriptor>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d107      	bne.n	80078a6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007896:	887b      	ldrh	r3, [r7, #2]
 8007898:	461a      	mov	r2, r3
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f987 	bl	8007bb0 <USBH_ParseCfgDesc>
 80078a2:	4603      	mov	r3, r0
 80078a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	461a      	mov	r2, r3
 80078bc:	460b      	mov	r3, r1
 80078be:	72fb      	strb	r3, [r7, #11]
 80078c0:	4613      	mov	r3, r2
 80078c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80078c4:	7afb      	ldrb	r3, [r7, #11]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80078cc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80078d4:	893b      	ldrh	r3, [r7, #8]
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	460b      	mov	r3, r1
 80078da:	2100      	movs	r1, #0
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f812 	bl	8007906 <USBH_GetDescriptor>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d107      	bne.n	80078fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078f2:	893a      	ldrh	r2, [r7, #8]
 80078f4:	6879      	ldr	r1, [r7, #4]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fb24 	bl	8007f44 <USBH_ParseStringDesc>
  }

  return status;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	607b      	str	r3, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	72fb      	strb	r3, [r7, #11]
 8007914:	4613      	mov	r3, r2
 8007916:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	789b      	ldrb	r3, [r3, #2]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d11c      	bne.n	800795a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007920:	7afb      	ldrb	r3, [r7, #11]
 8007922:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007926:	b2da      	uxtb	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2206      	movs	r2, #6
 8007930:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	893a      	ldrh	r2, [r7, #8]
 8007936:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007938:	893b      	ldrh	r3, [r7, #8]
 800793a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800793e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007942:	d104      	bne.n	800794e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f240 4209 	movw	r2, #1033	; 0x409
 800794a:	829a      	strh	r2, [r3, #20]
 800794c:	e002      	b.n	8007954 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8b3a      	ldrh	r2, [r7, #24]
 8007958:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800795a:	8b3b      	ldrh	r3, [r7, #24]
 800795c:	461a      	mov	r2, r3
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fb3d 	bl	8007fe0 <USBH_CtlReq>
 8007966:	4603      	mov	r3, r0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	789b      	ldrb	r3, [r3, #2]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d10f      	bne.n	80079a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2205      	movs	r2, #5
 800798e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b29a      	uxth	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079a4:	2200      	movs	r2, #0
 80079a6:	2100      	movs	r1, #0
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fb19 	bl	8007fe0 <USBH_CtlReq>
 80079ae:	4603      	mov	r3, r0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	789b      	ldrb	r3, [r3, #2]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d10e      	bne.n	80079ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2209      	movs	r2, #9
 80079d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	887a      	ldrh	r2, [r7, #2]
 80079dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079ea:	2200      	movs	r2, #0
 80079ec:	2100      	movs	r1, #0
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 faf6 	bl	8007fe0 <USBH_CtlReq>
 80079f4:	4603      	mov	r3, r0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	789b      	ldrb	r3, [r3, #2]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d10f      	bne.n	8007a32 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a1e:	78fb      	ldrb	r3, [r7, #3]
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a32:	2200      	movs	r2, #0
 8007a34:	2100      	movs	r1, #0
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fad2 	bl	8007fe0 <USBH_CtlReq>
 8007a3c:	4603      	mov	r3, r0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	789b      	ldrb	r3, [r3, #2]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d10f      	bne.n	8007a7a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007a6c:	78fb      	ldrb	r3, [r7, #3]
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 faae 	bl	8007fe0 <USBH_CtlReq>
 8007a84:	4603      	mov	r3, r0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	781a      	ldrb	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	785a      	ldrb	r2, [r3, #1]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	3302      	adds	r3, #2
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	3303      	adds	r3, #3
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	791a      	ldrb	r2, [r3, #4]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	795a      	ldrb	r2, [r3, #5]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	799a      	ldrb	r2, [r3, #6]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	79da      	ldrb	r2, [r3, #7]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	79db      	ldrb	r3, [r3, #7]
 8007aec:	2b20      	cmp	r3, #32
 8007aee:	dc11      	bgt.n	8007b14 <USBH_ParseDevDesc+0x86>
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	db16      	blt.n	8007b22 <USBH_ParseDevDesc+0x94>
 8007af4:	3b08      	subs	r3, #8
 8007af6:	2201      	movs	r2, #1
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <USBH_ParseDevDesc+0x8a>
 8007b12:	e006      	b.n	8007b22 <USBH_ParseDevDesc+0x94>
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d104      	bne.n	8007b22 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	79da      	ldrb	r2, [r3, #7]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	71da      	strb	r2, [r3, #7]
      break;
 8007b20:	e003      	b.n	8007b2a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2240      	movs	r2, #64	; 0x40
 8007b26:	71da      	strb	r2, [r3, #7]
      break;
 8007b28:	bf00      	nop
  }

  if (length > 8U)
 8007b2a:	88fb      	ldrh	r3, [r7, #6]
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d939      	bls.n	8007ba4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	3308      	adds	r3, #8
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	3309      	adds	r3, #9
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	4313      	orrs	r3, r2
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	330a      	adds	r3, #10
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	330b      	adds	r3, #11
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	4313      	orrs	r3, r2
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	330d      	adds	r3, #13
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	021b      	lsls	r3, r3, #8
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	7b9a      	ldrb	r2, [r3, #14]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	7bda      	ldrb	r2, [r3, #15]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	7c1a      	ldrb	r2, [r3, #16]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	7c5a      	ldrb	r2, [r3, #17]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	745a      	strb	r2, [r3, #17]
  }
}
 8007ba4:	bf00      	nop
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08c      	sub	sp, #48	; 0x30
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007bc4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	785a      	ldrb	r2, [r3, #1]
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	3303      	adds	r3, #3
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	021b      	lsls	r3, r3, #8
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	4313      	orrs	r3, r2
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c0c:	bf28      	it	cs
 8007c0e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	791a      	ldrb	r2, [r3, #4]
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	795a      	ldrb	r2, [r3, #5]
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	799a      	ldrb	r2, [r3, #6]
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	79da      	ldrb	r2, [r3, #7]
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	7a1a      	ldrb	r2, [r3, #8]
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	d002      	beq.n	8007c4e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	2209      	movs	r2, #9
 8007c4c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c4e:	88fb      	ldrh	r3, [r7, #6]
 8007c50:	2b09      	cmp	r3, #9
 8007c52:	f240 809d 	bls.w	8007d90 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c56:	2309      	movs	r3, #9
 8007c58:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c5e:	e081      	b.n	8007d64 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c60:	f107 0316 	add.w	r3, r7, #22
 8007c64:	4619      	mov	r1, r3
 8007c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c68:	f000 f99f 	bl	8007faa <USBH_GetNextDesc>
 8007c6c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d176      	bne.n	8007d64 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b09      	cmp	r3, #9
 8007c7c:	d002      	beq.n	8007c84 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	2209      	movs	r2, #9
 8007c82:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c88:	221a      	movs	r2, #26
 8007c8a:	fb02 f303 	mul.w	r3, r2, r3
 8007c8e:	3308      	adds	r3, #8
 8007c90:	6a3a      	ldr	r2, [r7, #32]
 8007c92:	4413      	add	r3, r2
 8007c94:	3302      	adds	r3, #2
 8007c96:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c9a:	69f8      	ldr	r0, [r7, #28]
 8007c9c:	f000 f87e 	bl	8007d9c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007caa:	e043      	b.n	8007d34 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007cac:	f107 0316 	add.w	r3, r7, #22
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb4:	f000 f979 	bl	8007faa <USBH_GetNextDesc>
 8007cb8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	2b05      	cmp	r3, #5
 8007cc0:	d138      	bne.n	8007d34 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	795b      	ldrb	r3, [r3, #5]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d10f      	bne.n	8007cea <USBH_ParseCfgDesc+0x13a>
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	799b      	ldrb	r3, [r3, #6]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d10b      	bne.n	8007cea <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	79db      	ldrb	r3, [r3, #7]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10f      	bne.n	8007cfa <USBH_ParseCfgDesc+0x14a>
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b09      	cmp	r3, #9
 8007ce0:	d00b      	beq.n	8007cfa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	2209      	movs	r2, #9
 8007ce6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ce8:	e007      	b.n	8007cfa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	2b07      	cmp	r3, #7
 8007cf0:	d004      	beq.n	8007cfc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	2207      	movs	r2, #7
 8007cf6:	701a      	strb	r2, [r3, #0]
 8007cf8:	e000      	b.n	8007cfc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cfa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d00:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d04:	3201      	adds	r2, #1
 8007d06:	00d2      	lsls	r2, r2, #3
 8007d08:	211a      	movs	r1, #26
 8007d0a:	fb01 f303 	mul.w	r3, r1, r3
 8007d0e:	4413      	add	r3, r2
 8007d10:	3308      	adds	r3, #8
 8007d12:	6a3a      	ldr	r2, [r7, #32]
 8007d14:	4413      	add	r3, r2
 8007d16:	3304      	adds	r3, #4
 8007d18:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d1c:	69b9      	ldr	r1, [r7, #24]
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 f86b 	bl	8007dfa <USBH_ParseEPDesc>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007d2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d2e:	3301      	adds	r3, #1
 8007d30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	791b      	ldrb	r3, [r3, #4]
 8007d38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d204      	bcs.n	8007d4a <USBH_ParseCfgDesc+0x19a>
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	885a      	ldrh	r2, [r3, #2]
 8007d44:	8afb      	ldrh	r3, [r7, #22]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d8b0      	bhi.n	8007cac <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	791b      	ldrb	r3, [r3, #4]
 8007d4e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d201      	bcs.n	8007d5a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e01c      	b.n	8007d94 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d5e:	3301      	adds	r3, #1
 8007d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d805      	bhi.n	8007d78 <USBH_ParseCfgDesc+0x1c8>
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	885a      	ldrh	r2, [r3, #2]
 8007d70:	8afb      	ldrh	r3, [r7, #22]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	f63f af74 	bhi.w	8007c60 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	791b      	ldrb	r3, [r3, #4]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	bf28      	it	cs
 8007d80:	2302      	movcs	r3, #2
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d201      	bcs.n	8007d90 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e001      	b.n	8007d94 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3730      	adds	r7, #48	; 0x30
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	785a      	ldrb	r2, [r3, #1]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	789a      	ldrb	r2, [r3, #2]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	78da      	ldrb	r2, [r3, #3]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	791a      	ldrb	r2, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	795a      	ldrb	r2, [r3, #5]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	799a      	ldrb	r2, [r3, #6]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	79da      	ldrb	r2, [r3, #7]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	7a1a      	ldrb	r2, [r3, #8]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	721a      	strb	r2, [r3, #8]
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b087      	sub	sp, #28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	781a      	ldrb	r2, [r3, #0]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	785a      	ldrb	r2, [r3, #1]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	789a      	ldrb	r2, [r3, #2]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	78da      	ldrb	r2, [r3, #3]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3305      	adds	r3, #5
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	021b      	lsls	r3, r3, #8
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	799a      	ldrb	r2, [r3, #6]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	889b      	ldrh	r3, [r3, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d102      	bne.n	8007e5c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007e56:	2303      	movs	r3, #3
 8007e58:	75fb      	strb	r3, [r7, #23]
 8007e5a:	e033      	b.n	8007ec4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	889b      	ldrh	r3, [r3, #4]
 8007e60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e64:	f023 0307 	bic.w	r3, r3, #7
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	889b      	ldrh	r3, [r3, #4]
 8007e72:	b21a      	sxth	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3304      	adds	r3, #4
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	b299      	uxth	r1, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3305      	adds	r3, #5
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	021b      	lsls	r3, r3, #8
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d110      	bne.n	8007eb6 <USBH_ParseEPDesc+0xbc>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3304      	adds	r3, #4
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	b299      	uxth	r1, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3305      	adds	r3, #5
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	021b      	lsls	r3, r3, #8
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	430b      	orrs	r3, r1
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	b21b      	sxth	r3, r3
 8007eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eb2:	b21b      	sxth	r3, r3
 8007eb4:	e001      	b.n	8007eba <USBH_ParseEPDesc+0xc0>
 8007eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	b21b      	sxth	r3, r3
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d116      	bne.n	8007efc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	78db      	ldrb	r3, [r3, #3]
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d005      	beq.n	8007ee6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	78db      	ldrb	r3, [r3, #3]
 8007ede:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d127      	bne.n	8007f36 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	799b      	ldrb	r3, [r3, #6]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <USBH_ParseEPDesc+0xfc>
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	799b      	ldrb	r3, [r3, #6]
 8007ef2:	2b10      	cmp	r3, #16
 8007ef4:	d91f      	bls.n	8007f36 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	75fb      	strb	r3, [r7, #23]
 8007efa:	e01c      	b.n	8007f36 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	78db      	ldrb	r3, [r3, #3]
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d10a      	bne.n	8007f1e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	799b      	ldrb	r3, [r3, #6]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <USBH_ParseEPDesc+0x11e>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	799b      	ldrb	r3, [r3, #6]
 8007f14:	2b10      	cmp	r3, #16
 8007f16:	d90e      	bls.n	8007f36 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	75fb      	strb	r3, [r7, #23]
 8007f1c:	e00b      	b.n	8007f36 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	78db      	ldrb	r3, [r3, #3]
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d105      	bne.n	8007f36 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	799b      	ldrb	r3, [r3, #6]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f32:	2303      	movs	r3, #3
 8007f34:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	371c      	adds	r7, #28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b087      	sub	sp, #28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	3301      	adds	r3, #1
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d120      	bne.n	8007f9e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	1e9a      	subs	r2, r3, #2
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	4293      	cmp	r3, r2
 8007f66:	bf28      	it	cs
 8007f68:	4613      	movcs	r3, r2
 8007f6a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3302      	adds	r3, #2
 8007f70:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007f72:	2300      	movs	r3, #0
 8007f74:	82fb      	strh	r3, [r7, #22]
 8007f76:	e00b      	b.n	8007f90 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007f78:	8afb      	ldrh	r3, [r7, #22]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	781a      	ldrb	r2, [r3, #0]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	3301      	adds	r3, #1
 8007f88:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007f8a:	8afb      	ldrh	r3, [r7, #22]
 8007f8c:	3302      	adds	r3, #2
 8007f8e:	82fb      	strh	r3, [r7, #22]
 8007f90:	8afa      	ldrh	r2, [r7, #22]
 8007f92:	8abb      	ldrh	r3, [r7, #20]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d3ef      	bcc.n	8007f78 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	701a      	strb	r2, [r3, #0]
  }
}
 8007f9e:	bf00      	nop
 8007fa0:	371c      	adds	r7, #28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	881a      	ldrh	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	4413      	add	r3, r2
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4413      	add	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	789b      	ldrb	r3, [r3, #2]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d002      	beq.n	8008000 <USBH_CtlReq+0x20>
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d00f      	beq.n	800801e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ffe:	e027      	b.n	8008050 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	88fa      	ldrh	r2, [r7, #6]
 800800a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2202      	movs	r2, #2
 8008016:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008018:	2301      	movs	r3, #1
 800801a:	75fb      	strb	r3, [r7, #23]
      break;
 800801c:	e018      	b.n	8008050 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 f81c 	bl	800805c <USBH_HandleControl>
 8008024:	4603      	mov	r3, r0
 8008026:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <USBH_CtlReq+0x54>
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	2b03      	cmp	r3, #3
 8008032:	d106      	bne.n	8008042 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	761a      	strb	r2, [r3, #24]
      break;
 8008040:	e005      	b.n	800804e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d102      	bne.n	800804e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2201      	movs	r2, #1
 800804c:	709a      	strb	r2, [r3, #2]
      break;
 800804e:	bf00      	nop
  }
  return status;
 8008050:	7dfb      	ldrb	r3, [r7, #23]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af02      	add	r7, sp, #8
 8008062:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008064:	2301      	movs	r3, #1
 8008066:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008068:	2300      	movs	r3, #0
 800806a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	7e1b      	ldrb	r3, [r3, #24]
 8008070:	3b01      	subs	r3, #1
 8008072:	2b0a      	cmp	r3, #10
 8008074:	f200 8156 	bhi.w	8008324 <USBH_HandleControl+0x2c8>
 8008078:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <USBH_HandleControl+0x24>)
 800807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807e:	bf00      	nop
 8008080:	080080ad 	.word	0x080080ad
 8008084:	080080c7 	.word	0x080080c7
 8008088:	08008131 	.word	0x08008131
 800808c:	08008157 	.word	0x08008157
 8008090:	0800818f 	.word	0x0800818f
 8008094:	080081b9 	.word	0x080081b9
 8008098:	0800820b 	.word	0x0800820b
 800809c:	0800822d 	.word	0x0800822d
 80080a0:	08008269 	.word	0x08008269
 80080a4:	0800828f 	.word	0x0800828f
 80080a8:	080082cd 	.word	0x080082cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f103 0110 	add.w	r1, r3, #16
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	795b      	ldrb	r3, [r3, #5]
 80080b6:	461a      	mov	r2, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f943 	bl	8008344 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2202      	movs	r2, #2
 80080c2:	761a      	strb	r2, [r3, #24]
      break;
 80080c4:	e139      	b.n	800833a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	795b      	ldrb	r3, [r3, #5]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fcc5 	bl	8008a5c <USBH_LL_GetURBState>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d11e      	bne.n	800811a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7c1b      	ldrb	r3, [r3, #16]
 80080e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	8adb      	ldrh	r3, [r3, #22]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80080ee:	7b7b      	ldrb	r3, [r7, #13]
 80080f0:	2b80      	cmp	r3, #128	; 0x80
 80080f2:	d103      	bne.n	80080fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2203      	movs	r2, #3
 80080f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080fa:	e115      	b.n	8008328 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2205      	movs	r2, #5
 8008100:	761a      	strb	r2, [r3, #24]
      break;
 8008102:	e111      	b.n	8008328 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008104:	7b7b      	ldrb	r3, [r7, #13]
 8008106:	2b80      	cmp	r3, #128	; 0x80
 8008108:	d103      	bne.n	8008112 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2209      	movs	r2, #9
 800810e:	761a      	strb	r2, [r3, #24]
      break;
 8008110:	e10a      	b.n	8008328 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2207      	movs	r2, #7
 8008116:	761a      	strb	r2, [r3, #24]
      break;
 8008118:	e106      	b.n	8008328 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b04      	cmp	r3, #4
 800811e:	d003      	beq.n	8008128 <USBH_HandleControl+0xcc>
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2b02      	cmp	r3, #2
 8008124:	f040 8100 	bne.w	8008328 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	220b      	movs	r2, #11
 800812c:	761a      	strb	r2, [r3, #24]
      break;
 800812e:	e0fb      	b.n	8008328 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008136:	b29a      	uxth	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6899      	ldr	r1, [r3, #8]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	899a      	ldrh	r2, [r3, #12]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	791b      	ldrb	r3, [r3, #4]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f93a 	bl	80083c2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2204      	movs	r2, #4
 8008152:	761a      	strb	r2, [r3, #24]
      break;
 8008154:	e0f1      	b.n	800833a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	791b      	ldrb	r3, [r3, #4]
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fc7d 	bl	8008a5c <USBH_LL_GetURBState>
 8008162:	4603      	mov	r3, r0
 8008164:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d102      	bne.n	8008172 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2209      	movs	r2, #9
 8008170:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b05      	cmp	r3, #5
 8008176:	d102      	bne.n	800817e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008178:	2303      	movs	r3, #3
 800817a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800817c:	e0d6      	b.n	800832c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b04      	cmp	r3, #4
 8008182:	f040 80d3 	bne.w	800832c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	220b      	movs	r2, #11
 800818a:	761a      	strb	r2, [r3, #24]
      break;
 800818c:	e0ce      	b.n	800832c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6899      	ldr	r1, [r3, #8]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	899a      	ldrh	r2, [r3, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	795b      	ldrb	r3, [r3, #5]
 800819a:	2001      	movs	r0, #1
 800819c:	9000      	str	r0, [sp, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f8ea 	bl	8008378 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2206      	movs	r2, #6
 80081b4:	761a      	strb	r2, [r3, #24]
      break;
 80081b6:	e0c0      	b.n	800833a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	795b      	ldrb	r3, [r3, #5]
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fc4c 	bl	8008a5c <USBH_LL_GetURBState>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d103      	bne.n	80081d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2207      	movs	r2, #7
 80081d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081d4:	e0ac      	b.n	8008330 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b05      	cmp	r3, #5
 80081da:	d105      	bne.n	80081e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	220c      	movs	r2, #12
 80081e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80081e2:	2303      	movs	r3, #3
 80081e4:	73fb      	strb	r3, [r7, #15]
      break;
 80081e6:	e0a3      	b.n	8008330 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d103      	bne.n	80081f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2205      	movs	r2, #5
 80081f2:	761a      	strb	r2, [r3, #24]
      break;
 80081f4:	e09c      	b.n	8008330 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	f040 8099 	bne.w	8008330 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	220b      	movs	r2, #11
 8008202:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008204:	2302      	movs	r3, #2
 8008206:	73fb      	strb	r3, [r7, #15]
      break;
 8008208:	e092      	b.n	8008330 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	791b      	ldrb	r3, [r3, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	2100      	movs	r1, #0
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f8d5 	bl	80083c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800821e:	b29a      	uxth	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2208      	movs	r2, #8
 8008228:	761a      	strb	r2, [r3, #24]

      break;
 800822a:	e086      	b.n	800833a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	791b      	ldrb	r3, [r3, #4]
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fc12 	bl	8008a5c <USBH_LL_GetURBState>
 8008238:	4603      	mov	r3, r0
 800823a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800823c:	7bbb      	ldrb	r3, [r7, #14]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d105      	bne.n	800824e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	220d      	movs	r2, #13
 8008246:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800824c:	e072      	b.n	8008334 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b04      	cmp	r3, #4
 8008252:	d103      	bne.n	800825c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	220b      	movs	r2, #11
 8008258:	761a      	strb	r2, [r3, #24]
      break;
 800825a:	e06b      	b.n	8008334 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	2b05      	cmp	r3, #5
 8008260:	d168      	bne.n	8008334 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008262:	2303      	movs	r3, #3
 8008264:	73fb      	strb	r3, [r7, #15]
      break;
 8008266:	e065      	b.n	8008334 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	795b      	ldrb	r3, [r3, #5]
 800826c:	2201      	movs	r2, #1
 800826e:	9200      	str	r2, [sp, #0]
 8008270:	2200      	movs	r2, #0
 8008272:	2100      	movs	r1, #0
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f87f 	bl	8008378 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008280:	b29a      	uxth	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	220a      	movs	r2, #10
 800828a:	761a      	strb	r2, [r3, #24]
      break;
 800828c:	e055      	b.n	800833a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	795b      	ldrb	r3, [r3, #5]
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fbe1 	bl	8008a5c <USBH_LL_GetURBState>
 800829a:	4603      	mov	r3, r0
 800829c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d105      	bne.n	80082b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	220d      	movs	r2, #13
 80082ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082ae:	e043      	b.n	8008338 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d103      	bne.n	80082be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2209      	movs	r2, #9
 80082ba:	761a      	strb	r2, [r3, #24]
      break;
 80082bc:	e03c      	b.n	8008338 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d139      	bne.n	8008338 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	220b      	movs	r2, #11
 80082c8:	761a      	strb	r2, [r3, #24]
      break;
 80082ca:	e035      	b.n	8008338 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	7e5b      	ldrb	r3, [r3, #25]
 80082d0:	3301      	adds	r3, #1
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	765a      	strb	r2, [r3, #25]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7e5b      	ldrb	r3, [r3, #25]
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d806      	bhi.n	80082ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80082ec:	e025      	b.n	800833a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082f4:	2106      	movs	r1, #6
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	795b      	ldrb	r3, [r3, #5]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f90c 	bl	8008524 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	791b      	ldrb	r3, [r3, #4]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f906 	bl	8008524 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800831e:	2302      	movs	r3, #2
 8008320:	73fb      	strb	r3, [r7, #15]
      break;
 8008322:	e00a      	b.n	800833a <USBH_HandleControl+0x2de>

    default:
      break;
 8008324:	bf00      	nop
 8008326:	e008      	b.n	800833a <USBH_HandleControl+0x2de>
      break;
 8008328:	bf00      	nop
 800832a:	e006      	b.n	800833a <USBH_HandleControl+0x2de>
      break;
 800832c:	bf00      	nop
 800832e:	e004      	b.n	800833a <USBH_HandleControl+0x2de>
      break;
 8008330:	bf00      	nop
 8008332:	e002      	b.n	800833a <USBH_HandleControl+0x2de>
      break;
 8008334:	bf00      	nop
 8008336:	e000      	b.n	800833a <USBH_HandleControl+0x2de>
      break;
 8008338:	bf00      	nop
  }

  return status;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af04      	add	r7, sp, #16
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008352:	79f9      	ldrb	r1, [r7, #7]
 8008354:	2300      	movs	r3, #0
 8008356:	9303      	str	r3, [sp, #12]
 8008358:	2308      	movs	r3, #8
 800835a:	9302      	str	r3, [sp, #8]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	2300      	movs	r3, #0
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	2300      	movs	r3, #0
 8008366:	2200      	movs	r2, #0
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fb46 	bl	80089fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af04      	add	r7, sp, #16
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	4611      	mov	r1, r2
 8008384:	461a      	mov	r2, r3
 8008386:	460b      	mov	r3, r1
 8008388:	80fb      	strh	r3, [r7, #6]
 800838a:	4613      	mov	r3, r2
 800838c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800839c:	7979      	ldrb	r1, [r7, #5]
 800839e:	7e3b      	ldrb	r3, [r7, #24]
 80083a0:	9303      	str	r3, [sp, #12]
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	9302      	str	r3, [sp, #8]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	2301      	movs	r3, #1
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	2300      	movs	r3, #0
 80083b0:	2200      	movs	r2, #0
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f000 fb21 	bl	80089fa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b088      	sub	sp, #32
 80083c6:	af04      	add	r7, sp, #16
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	4611      	mov	r1, r2
 80083ce:	461a      	mov	r2, r3
 80083d0:	460b      	mov	r3, r1
 80083d2:	80fb      	strh	r3, [r7, #6]
 80083d4:	4613      	mov	r3, r2
 80083d6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083d8:	7979      	ldrb	r1, [r7, #5]
 80083da:	2300      	movs	r3, #0
 80083dc:	9303      	str	r3, [sp, #12]
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	9302      	str	r3, [sp, #8]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	2301      	movs	r3, #1
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	2300      	movs	r3, #0
 80083ec:	2201      	movs	r2, #1
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 fb03 	bl	80089fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083f4:	2300      	movs	r3, #0

}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b088      	sub	sp, #32
 8008402:	af04      	add	r7, sp, #16
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	4611      	mov	r1, r2
 800840a:	461a      	mov	r2, r3
 800840c:	460b      	mov	r3, r1
 800840e:	80fb      	strh	r3, [r7, #6]
 8008410:	4613      	mov	r3, r2
 8008412:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008422:	7979      	ldrb	r1, [r7, #5]
 8008424:	7e3b      	ldrb	r3, [r7, #24]
 8008426:	9303      	str	r3, [sp, #12]
 8008428:	88fb      	ldrh	r3, [r7, #6]
 800842a:	9302      	str	r3, [sp, #8]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	2301      	movs	r3, #1
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	2302      	movs	r3, #2
 8008436:	2200      	movs	r2, #0
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 fade 	bl	80089fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af04      	add	r7, sp, #16
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4611      	mov	r1, r2
 8008454:	461a      	mov	r2, r3
 8008456:	460b      	mov	r3, r1
 8008458:	80fb      	strh	r3, [r7, #6]
 800845a:	4613      	mov	r3, r2
 800845c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800845e:	7979      	ldrb	r1, [r7, #5]
 8008460:	2300      	movs	r3, #0
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	9302      	str	r3, [sp, #8]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	2301      	movs	r3, #1
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	2302      	movs	r3, #2
 8008472:	2201      	movs	r2, #1
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 fac0 	bl	80089fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af04      	add	r7, sp, #16
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	4608      	mov	r0, r1
 800848e:	4611      	mov	r1, r2
 8008490:	461a      	mov	r2, r3
 8008492:	4603      	mov	r3, r0
 8008494:	70fb      	strb	r3, [r7, #3]
 8008496:	460b      	mov	r3, r1
 8008498:	70bb      	strb	r3, [r7, #2]
 800849a:	4613      	mov	r3, r2
 800849c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800849e:	7878      	ldrb	r0, [r7, #1]
 80084a0:	78ba      	ldrb	r2, [r7, #2]
 80084a2:	78f9      	ldrb	r1, [r7, #3]
 80084a4:	8b3b      	ldrh	r3, [r7, #24]
 80084a6:	9302      	str	r3, [sp, #8]
 80084a8:	7d3b      	ldrb	r3, [r7, #20]
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	7c3b      	ldrb	r3, [r7, #16]
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	4603      	mov	r3, r0
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fa53 	bl	800895e <USBH_LL_OpenPipe>

  return USBH_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b082      	sub	sp, #8
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	460b      	mov	r3, r1
 80084cc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fa72 	bl	80089bc <USBH_LL_ClosePipe>

  return USBH_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	460b      	mov	r3, r1
 80084ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f836 	bl	8008560 <USBH_GetFreePipe>
 80084f4:	4603      	mov	r3, r0
 80084f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80084f8:	89fb      	ldrh	r3, [r7, #14]
 80084fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00a      	beq.n	8008518 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008502:	78fa      	ldrb	r2, [r7, #3]
 8008504:	89fb      	ldrh	r3, [r7, #14]
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	33e0      	adds	r3, #224	; 0xe0
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008518:	89fb      	ldrh	r3, [r7, #14]
 800851a:	b2db      	uxtb	r3, r3
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	2b0f      	cmp	r3, #15
 8008534:	d80d      	bhi.n	8008552 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008536:	78fb      	ldrb	r3, [r7, #3]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	33e0      	adds	r3, #224	; 0xe0
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008548:	6879      	ldr	r1, [r7, #4]
 800854a:	33e0      	adds	r3, #224	; 0xe0
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	440b      	add	r3, r1
 8008550:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
 8008570:	e00f      	b.n	8008592 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	33e0      	adds	r3, #224	; 0xe0
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d102      	bne.n	800858c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	b29b      	uxth	r3, r3
 800858a:	e007      	b.n	800859c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	3301      	adds	r3, #1
 8008590:	73fb      	strb	r3, [r7, #15]
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	2b0f      	cmp	r3, #15
 8008596:	d9ec      	bls.n	8008572 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008598:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085ac:	2201      	movs	r2, #1
 80085ae:	490e      	ldr	r1, [pc, #56]	; (80085e8 <MX_USB_HOST_Init+0x40>)
 80085b0:	480e      	ldr	r0, [pc, #56]	; (80085ec <MX_USB_HOST_Init+0x44>)
 80085b2:	f7fe fba7 	bl	8006d04 <USBH_Init>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085bc:	f7f8 fa8c 	bl	8000ad8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80085c0:	490b      	ldr	r1, [pc, #44]	; (80085f0 <MX_USB_HOST_Init+0x48>)
 80085c2:	480a      	ldr	r0, [pc, #40]	; (80085ec <MX_USB_HOST_Init+0x44>)
 80085c4:	f7fe fc2c 	bl	8006e20 <USBH_RegisterClass>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80085ce:	f7f8 fa83 	bl	8000ad8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80085d2:	4806      	ldr	r0, [pc, #24]	; (80085ec <MX_USB_HOST_Init+0x44>)
 80085d4:	f7fe fcb0 	bl	8006f38 <USBH_Start>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80085de:	f7f8 fa7b 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80085e2:	bf00      	nop
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	08008609 	.word	0x08008609
 80085ec:	20000284 	.word	0x20000284
 80085f0:	2000000c 	.word	0x2000000c

080085f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80085f8:	4802      	ldr	r0, [pc, #8]	; (8008604 <MX_USB_HOST_Process+0x10>)
 80085fa:	f7fe fcad 	bl	8006f58 <USBH_Process>
}
 80085fe:	bf00      	nop
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000284 	.word	0x20000284

08008608 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	3b01      	subs	r3, #1
 8008618:	2b04      	cmp	r3, #4
 800861a:	d819      	bhi.n	8008650 <USBH_UserProcess+0x48>
 800861c:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <USBH_UserProcess+0x1c>)
 800861e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008622:	bf00      	nop
 8008624:	08008651 	.word	0x08008651
 8008628:	08008641 	.word	0x08008641
 800862c:	08008651 	.word	0x08008651
 8008630:	08008649 	.word	0x08008649
 8008634:	08008639 	.word	0x08008639
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008638:	4b09      	ldr	r3, [pc, #36]	; (8008660 <USBH_UserProcess+0x58>)
 800863a:	2203      	movs	r2, #3
 800863c:	701a      	strb	r2, [r3, #0]
  break;
 800863e:	e008      	b.n	8008652 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <USBH_UserProcess+0x58>)
 8008642:	2202      	movs	r2, #2
 8008644:	701a      	strb	r2, [r3, #0]
  break;
 8008646:	e004      	b.n	8008652 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008648:	4b05      	ldr	r3, [pc, #20]	; (8008660 <USBH_UserProcess+0x58>)
 800864a:	2201      	movs	r2, #1
 800864c:	701a      	strb	r2, [r3, #0]
  break;
 800864e:	e000      	b.n	8008652 <USBH_UserProcess+0x4a>

  default:
  break;
 8008650:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008652:	bf00      	nop
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	2000065c 	.word	0x2000065c

08008664 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08a      	sub	sp, #40	; 0x28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800866c:	f107 0314 	add.w	r3, r7, #20
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	605a      	str	r2, [r3, #4]
 8008676:	609a      	str	r2, [r3, #8]
 8008678:	60da      	str	r2, [r3, #12]
 800867a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008684:	d147      	bne.n	8008716 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008686:	2300      	movs	r3, #0
 8008688:	613b      	str	r3, [r7, #16]
 800868a:	4b25      	ldr	r3, [pc, #148]	; (8008720 <HAL_HCD_MspInit+0xbc>)
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	4a24      	ldr	r2, [pc, #144]	; (8008720 <HAL_HCD_MspInit+0xbc>)
 8008690:	f043 0301 	orr.w	r3, r3, #1
 8008694:	6313      	str	r3, [r2, #48]	; 0x30
 8008696:	4b22      	ldr	r3, [pc, #136]	; (8008720 <HAL_HCD_MspInit+0xbc>)
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80086a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086a8:	2300      	movs	r3, #0
 80086aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80086b0:	f107 0314 	add.w	r3, r7, #20
 80086b4:	4619      	mov	r1, r3
 80086b6:	481b      	ldr	r0, [pc, #108]	; (8008724 <HAL_HCD_MspInit+0xc0>)
 80086b8:	f7f9 faaa 	bl	8001c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80086bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80086c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c2:	2302      	movs	r3, #2
 80086c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086ca:	2303      	movs	r3, #3
 80086cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086ce:	230a      	movs	r3, #10
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d2:	f107 0314 	add.w	r3, r7, #20
 80086d6:	4619      	mov	r1, r3
 80086d8:	4812      	ldr	r0, [pc, #72]	; (8008724 <HAL_HCD_MspInit+0xc0>)
 80086da:	f7f9 fa99 	bl	8001c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086de:	4b10      	ldr	r3, [pc, #64]	; (8008720 <HAL_HCD_MspInit+0xbc>)
 80086e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e2:	4a0f      	ldr	r2, [pc, #60]	; (8008720 <HAL_HCD_MspInit+0xbc>)
 80086e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e8:	6353      	str	r3, [r2, #52]	; 0x34
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <HAL_HCD_MspInit+0xbc>)
 80086f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f2:	4a0b      	ldr	r2, [pc, #44]	; (8008720 <HAL_HCD_MspInit+0xbc>)
 80086f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086f8:	6453      	str	r3, [r2, #68]	; 0x44
 80086fa:	4b09      	ldr	r3, [pc, #36]	; (8008720 <HAL_HCD_MspInit+0xbc>)
 80086fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008706:	2200      	movs	r2, #0
 8008708:	2100      	movs	r1, #0
 800870a:	2043      	movs	r0, #67	; 0x43
 800870c:	f7f9 fa49 	bl	8001ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008710:	2043      	movs	r0, #67	; 0x43
 8008712:	f7f9 fa62 	bl	8001bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008716:	bf00      	nop
 8008718:	3728      	adds	r7, #40	; 0x28
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	40023800 	.word	0x40023800
 8008724:	40020000 	.word	0x40020000

08008728 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe ffed 	bl	8007716 <USBH_LL_IncTimer>
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff f825 	bl	80077a2 <USBH_LL_Connect>
}
 8008758:	bf00      	nop
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff f82e 	bl	80077d0 <USBH_LL_Disconnect>
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
 8008788:	4613      	mov	r3, r2
 800878a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe ffdf 	bl	800776a <USBH_LL_PortEnabled>
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe ffdf 	bl	8007786 <USBH_LL_PortDisabled>
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d12a      	bne.n	8008838 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80087e2:	4a18      	ldr	r2, [pc, #96]	; (8008844 <USBH_LL_Init+0x74>)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a15      	ldr	r2, [pc, #84]	; (8008844 <USBH_LL_Init+0x74>)
 80087ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087f2:	4b14      	ldr	r3, [pc, #80]	; (8008844 <USBH_LL_Init+0x74>)
 80087f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80087fa:	4b12      	ldr	r3, [pc, #72]	; (8008844 <USBH_LL_Init+0x74>)
 80087fc:	2208      	movs	r2, #8
 80087fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008800:	4b10      	ldr	r3, [pc, #64]	; (8008844 <USBH_LL_Init+0x74>)
 8008802:	2201      	movs	r2, #1
 8008804:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008806:	4b0f      	ldr	r3, [pc, #60]	; (8008844 <USBH_LL_Init+0x74>)
 8008808:	2200      	movs	r2, #0
 800880a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800880c:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <USBH_LL_Init+0x74>)
 800880e:	2202      	movs	r2, #2
 8008810:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008812:	4b0c      	ldr	r3, [pc, #48]	; (8008844 <USBH_LL_Init+0x74>)
 8008814:	2200      	movs	r2, #0
 8008816:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008818:	480a      	ldr	r0, [pc, #40]	; (8008844 <USBH_LL_Init+0x74>)
 800881a:	f7f9 fbb0 	bl	8001f7e <HAL_HCD_Init>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008824:	f7f8 f958 	bl	8000ad8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008828:	4806      	ldr	r0, [pc, #24]	; (8008844 <USBH_LL_Init+0x74>)
 800882a:	f7f9 ff94 	bl	8002756 <HAL_HCD_GetCurrentFrame>
 800882e:	4603      	mov	r3, r0
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7fe ff60 	bl	80076f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20000660 	.word	0x20000660

08008848 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800885e:	4618      	mov	r0, r3
 8008860:	f7f9 ff03 	bl	800266a <HAL_HCD_Start>
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	4618      	mov	r0, r3
 800886c:	f000 f95c 	bl	8008b28 <USBH_Get_USB_Status>
 8008870:	4603      	mov	r3, r0
 8008872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008874:	7bbb      	ldrb	r3, [r7, #14]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008894:	4618      	mov	r0, r3
 8008896:	f7f9 ff0b 	bl	80026b0 <HAL_HCD_Stop>
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 f941 	bl	8008b28 <USBH_Get_USB_Status>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088bc:	2301      	movs	r3, #1
 80088be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7f9 ff53 	bl	8002772 <HAL_HCD_GetCurrentSpeed>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d00c      	beq.n	80088ec <USBH_LL_GetSpeed+0x38>
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d80d      	bhi.n	80088f2 <USBH_LL_GetSpeed+0x3e>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <USBH_LL_GetSpeed+0x2c>
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d003      	beq.n	80088e6 <USBH_LL_GetSpeed+0x32>
 80088de:	e008      	b.n	80088f2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80088e0:	2300      	movs	r3, #0
 80088e2:	73fb      	strb	r3, [r7, #15]
    break;
 80088e4:	e008      	b.n	80088f8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80088e6:	2301      	movs	r3, #1
 80088e8:	73fb      	strb	r3, [r7, #15]
    break;
 80088ea:	e005      	b.n	80088f8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80088ec:	2302      	movs	r3, #2
 80088ee:	73fb      	strb	r3, [r7, #15]
    break;
 80088f0:	e002      	b.n	80088f8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80088f2:	2301      	movs	r3, #1
 80088f4:	73fb      	strb	r3, [r7, #15]
    break;
 80088f6:	bf00      	nop
  }
  return  speed;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008918:	4618      	mov	r0, r3
 800891a:	f7f9 fee6 	bl	80026ea <HAL_HCD_ResetPort>
 800891e:	4603      	mov	r3, r0
 8008920:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 f8ff 	bl	8008b28 <USBH_Get_USB_Status>
 800892a:	4603      	mov	r3, r0
 800892c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800892e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800894a:	78fa      	ldrb	r2, [r7, #3]
 800894c:	4611      	mov	r1, r2
 800894e:	4618      	mov	r0, r3
 8008950:	f7f9 feed 	bl	800272e <HAL_HCD_HC_GetXferCount>
 8008954:	4603      	mov	r3, r0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800895e:	b590      	push	{r4, r7, lr}
 8008960:	b089      	sub	sp, #36	; 0x24
 8008962:	af04      	add	r7, sp, #16
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	4608      	mov	r0, r1
 8008968:	4611      	mov	r1, r2
 800896a:	461a      	mov	r2, r3
 800896c:	4603      	mov	r3, r0
 800896e:	70fb      	strb	r3, [r7, #3]
 8008970:	460b      	mov	r3, r1
 8008972:	70bb      	strb	r3, [r7, #2]
 8008974:	4613      	mov	r3, r2
 8008976:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008986:	787c      	ldrb	r4, [r7, #1]
 8008988:	78ba      	ldrb	r2, [r7, #2]
 800898a:	78f9      	ldrb	r1, [r7, #3]
 800898c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800898e:	9302      	str	r3, [sp, #8]
 8008990:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	f897 3020 	ldrb.w	r3, [r7, #32]
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	4623      	mov	r3, r4
 800899e:	f7f9 fb50 	bl	8002042 <HAL_HCD_HC_Init>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 f8bd 	bl	8008b28 <USBH_Get_USB_Status>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd90      	pop	{r4, r7, pc}

080089bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	4611      	mov	r1, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f9 fbc0 	bl	8002160 <HAL_HCD_HC_Halt>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f89e 	bl	8008b28 <USBH_Get_USB_Status>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80089fa:	b590      	push	{r4, r7, lr}
 80089fc:	b089      	sub	sp, #36	; 0x24
 80089fe:	af04      	add	r7, sp, #16
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	4608      	mov	r0, r1
 8008a04:	4611      	mov	r1, r2
 8008a06:	461a      	mov	r2, r3
 8008a08:	4603      	mov	r3, r0
 8008a0a:	70fb      	strb	r3, [r7, #3]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70bb      	strb	r3, [r7, #2]
 8008a10:	4613      	mov	r3, r2
 8008a12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a22:	787c      	ldrb	r4, [r7, #1]
 8008a24:	78ba      	ldrb	r2, [r7, #2]
 8008a26:	78f9      	ldrb	r1, [r7, #3]
 8008a28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a2c:	9303      	str	r3, [sp, #12]
 8008a2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a30:	9302      	str	r3, [sp, #8]
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	4623      	mov	r3, r4
 8008a3e:	f7f9 fbb3 	bl	80021a8 <HAL_HCD_HC_SubmitRequest>
 8008a42:	4603      	mov	r3, r0
 8008a44:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 f86d 	bl	8008b28 <USBH_Get_USB_Status>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd90      	pop	{r4, r7, pc}

08008a5c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a6e:	78fa      	ldrb	r2, [r7, #3]
 8008a70:	4611      	mov	r1, r2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7f9 fe47 	bl	8002706 <HAL_HCD_HC_GetURBState>
 8008a78:	4603      	mov	r3, r0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d103      	bne.n	8008aa0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f870 	bl	8008b80 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008aa0:	20c8      	movs	r0, #200	; 0xc8
 8008aa2:	f7f8 fb23 	bl	80010ec <HAL_Delay>
  return USBH_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
 8008abc:	4613      	mov	r3, r2
 8008abe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ac6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	212c      	movs	r1, #44	; 0x2c
 8008ace:	fb01 f303 	mul.w	r3, r1, r3
 8008ad2:	4413      	add	r3, r2
 8008ad4:	333b      	adds	r3, #59	; 0x3b
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d009      	beq.n	8008af0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	212c      	movs	r1, #44	; 0x2c
 8008ae2:	fb01 f303 	mul.w	r3, r1, r3
 8008ae6:	4413      	add	r3, r2
 8008ae8:	3354      	adds	r3, #84	; 0x54
 8008aea:	78ba      	ldrb	r2, [r7, #2]
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	e008      	b.n	8008b02 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	212c      	movs	r1, #44	; 0x2c
 8008af6:	fb01 f303 	mul.w	r3, r1, r3
 8008afa:	4413      	add	r3, r2
 8008afc:	3355      	adds	r3, #85	; 0x55
 8008afe:	78ba      	ldrb	r2, [r7, #2]
 8008b00:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7f8 fae7 	bl	80010ec <HAL_Delay>
}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d817      	bhi.n	8008b6c <USBH_Get_USB_Status+0x44>
 8008b3c:	a201      	add	r2, pc, #4	; (adr r2, 8008b44 <USBH_Get_USB_Status+0x1c>)
 8008b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b42:	bf00      	nop
 8008b44:	08008b55 	.word	0x08008b55
 8008b48:	08008b5b 	.word	0x08008b5b
 8008b4c:	08008b61 	.word	0x08008b61
 8008b50:	08008b67 	.word	0x08008b67
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]
    break;
 8008b58:	e00b      	b.n	8008b72 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5e:	e008      	b.n	8008b72 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b60:	2301      	movs	r3, #1
 8008b62:	73fb      	strb	r3, [r7, #15]
    break;
 8008b64:	e005      	b.n	8008b72 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b66:	2302      	movs	r3, #2
 8008b68:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6a:	e002      	b.n	8008b72 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b70:	bf00      	nop
  }
  return usb_status;
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b8a:	79fb      	ldrb	r3, [r7, #7]
 8008b8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b8e:	79fb      	ldrb	r3, [r7, #7]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d102      	bne.n	8008b9a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73fb      	strb	r3, [r7, #15]
 8008b98:	e001      	b.n	8008b9e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	4803      	ldr	r0, [pc, #12]	; (8008bb4 <MX_DriverVbusFS+0x34>)
 8008ba6:	f7f9 f9b7 	bl	8001f18 <HAL_GPIO_WritePin>
}
 8008baa:	bf00      	nop
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	40020800 	.word	0x40020800

08008bb8 <__errno>:
 8008bb8:	4b01      	ldr	r3, [pc, #4]	; (8008bc0 <__errno+0x8>)
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	2000002c 	.word	0x2000002c

08008bc4 <__libc_init_array>:
 8008bc4:	b570      	push	{r4, r5, r6, lr}
 8008bc6:	4d0d      	ldr	r5, [pc, #52]	; (8008bfc <__libc_init_array+0x38>)
 8008bc8:	4c0d      	ldr	r4, [pc, #52]	; (8008c00 <__libc_init_array+0x3c>)
 8008bca:	1b64      	subs	r4, r4, r5
 8008bcc:	10a4      	asrs	r4, r4, #2
 8008bce:	2600      	movs	r6, #0
 8008bd0:	42a6      	cmp	r6, r4
 8008bd2:	d109      	bne.n	8008be8 <__libc_init_array+0x24>
 8008bd4:	4d0b      	ldr	r5, [pc, #44]	; (8008c04 <__libc_init_array+0x40>)
 8008bd6:	4c0c      	ldr	r4, [pc, #48]	; (8008c08 <__libc_init_array+0x44>)
 8008bd8:	f000 f92e 	bl	8008e38 <_init>
 8008bdc:	1b64      	subs	r4, r4, r5
 8008bde:	10a4      	asrs	r4, r4, #2
 8008be0:	2600      	movs	r6, #0
 8008be2:	42a6      	cmp	r6, r4
 8008be4:	d105      	bne.n	8008bf2 <__libc_init_array+0x2e>
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
 8008be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bec:	4798      	blx	r3
 8008bee:	3601      	adds	r6, #1
 8008bf0:	e7ee      	b.n	8008bd0 <__libc_init_array+0xc>
 8008bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf6:	4798      	blx	r3
 8008bf8:	3601      	adds	r6, #1
 8008bfa:	e7f2      	b.n	8008be2 <__libc_init_array+0x1e>
 8008bfc:	08008e74 	.word	0x08008e74
 8008c00:	08008e74 	.word	0x08008e74
 8008c04:	08008e74 	.word	0x08008e74
 8008c08:	08008e78 	.word	0x08008e78

08008c0c <malloc>:
 8008c0c:	4b02      	ldr	r3, [pc, #8]	; (8008c18 <malloc+0xc>)
 8008c0e:	4601      	mov	r1, r0
 8008c10:	6818      	ldr	r0, [r3, #0]
 8008c12:	f000 b87f 	b.w	8008d14 <_malloc_r>
 8008c16:	bf00      	nop
 8008c18:	2000002c 	.word	0x2000002c

08008c1c <free>:
 8008c1c:	4b02      	ldr	r3, [pc, #8]	; (8008c28 <free+0xc>)
 8008c1e:	4601      	mov	r1, r0
 8008c20:	6818      	ldr	r0, [r3, #0]
 8008c22:	f000 b80b 	b.w	8008c3c <_free_r>
 8008c26:	bf00      	nop
 8008c28:	2000002c 	.word	0x2000002c

08008c2c <memset>:
 8008c2c:	4402      	add	r2, r0
 8008c2e:	4603      	mov	r3, r0
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d100      	bne.n	8008c36 <memset+0xa>
 8008c34:	4770      	bx	lr
 8008c36:	f803 1b01 	strb.w	r1, [r3], #1
 8008c3a:	e7f9      	b.n	8008c30 <memset+0x4>

08008c3c <_free_r>:
 8008c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c3e:	2900      	cmp	r1, #0
 8008c40:	d044      	beq.n	8008ccc <_free_r+0x90>
 8008c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c46:	9001      	str	r0, [sp, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c4e:	bfb8      	it	lt
 8008c50:	18e4      	addlt	r4, r4, r3
 8008c52:	f000 f8e3 	bl	8008e1c <__malloc_lock>
 8008c56:	4a1e      	ldr	r2, [pc, #120]	; (8008cd0 <_free_r+0x94>)
 8008c58:	9801      	ldr	r0, [sp, #4]
 8008c5a:	6813      	ldr	r3, [r2, #0]
 8008c5c:	b933      	cbnz	r3, 8008c6c <_free_r+0x30>
 8008c5e:	6063      	str	r3, [r4, #4]
 8008c60:	6014      	str	r4, [r2, #0]
 8008c62:	b003      	add	sp, #12
 8008c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c68:	f000 b8de 	b.w	8008e28 <__malloc_unlock>
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	d908      	bls.n	8008c82 <_free_r+0x46>
 8008c70:	6825      	ldr	r5, [r4, #0]
 8008c72:	1961      	adds	r1, r4, r5
 8008c74:	428b      	cmp	r3, r1
 8008c76:	bf01      	itttt	eq
 8008c78:	6819      	ldreq	r1, [r3, #0]
 8008c7a:	685b      	ldreq	r3, [r3, #4]
 8008c7c:	1949      	addeq	r1, r1, r5
 8008c7e:	6021      	streq	r1, [r4, #0]
 8008c80:	e7ed      	b.n	8008c5e <_free_r+0x22>
 8008c82:	461a      	mov	r2, r3
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	b10b      	cbz	r3, 8008c8c <_free_r+0x50>
 8008c88:	42a3      	cmp	r3, r4
 8008c8a:	d9fa      	bls.n	8008c82 <_free_r+0x46>
 8008c8c:	6811      	ldr	r1, [r2, #0]
 8008c8e:	1855      	adds	r5, r2, r1
 8008c90:	42a5      	cmp	r5, r4
 8008c92:	d10b      	bne.n	8008cac <_free_r+0x70>
 8008c94:	6824      	ldr	r4, [r4, #0]
 8008c96:	4421      	add	r1, r4
 8008c98:	1854      	adds	r4, r2, r1
 8008c9a:	42a3      	cmp	r3, r4
 8008c9c:	6011      	str	r1, [r2, #0]
 8008c9e:	d1e0      	bne.n	8008c62 <_free_r+0x26>
 8008ca0:	681c      	ldr	r4, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	6053      	str	r3, [r2, #4]
 8008ca6:	4421      	add	r1, r4
 8008ca8:	6011      	str	r1, [r2, #0]
 8008caa:	e7da      	b.n	8008c62 <_free_r+0x26>
 8008cac:	d902      	bls.n	8008cb4 <_free_r+0x78>
 8008cae:	230c      	movs	r3, #12
 8008cb0:	6003      	str	r3, [r0, #0]
 8008cb2:	e7d6      	b.n	8008c62 <_free_r+0x26>
 8008cb4:	6825      	ldr	r5, [r4, #0]
 8008cb6:	1961      	adds	r1, r4, r5
 8008cb8:	428b      	cmp	r3, r1
 8008cba:	bf04      	itt	eq
 8008cbc:	6819      	ldreq	r1, [r3, #0]
 8008cbe:	685b      	ldreq	r3, [r3, #4]
 8008cc0:	6063      	str	r3, [r4, #4]
 8008cc2:	bf04      	itt	eq
 8008cc4:	1949      	addeq	r1, r1, r5
 8008cc6:	6021      	streq	r1, [r4, #0]
 8008cc8:	6054      	str	r4, [r2, #4]
 8008cca:	e7ca      	b.n	8008c62 <_free_r+0x26>
 8008ccc:	b003      	add	sp, #12
 8008cce:	bd30      	pop	{r4, r5, pc}
 8008cd0:	20000964 	.word	0x20000964

08008cd4 <sbrk_aligned>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	4e0e      	ldr	r6, [pc, #56]	; (8008d10 <sbrk_aligned+0x3c>)
 8008cd8:	460c      	mov	r4, r1
 8008cda:	6831      	ldr	r1, [r6, #0]
 8008cdc:	4605      	mov	r5, r0
 8008cde:	b911      	cbnz	r1, 8008ce6 <sbrk_aligned+0x12>
 8008ce0:	f000 f88c 	bl	8008dfc <_sbrk_r>
 8008ce4:	6030      	str	r0, [r6, #0]
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f000 f887 	bl	8008dfc <_sbrk_r>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	d00a      	beq.n	8008d08 <sbrk_aligned+0x34>
 8008cf2:	1cc4      	adds	r4, r0, #3
 8008cf4:	f024 0403 	bic.w	r4, r4, #3
 8008cf8:	42a0      	cmp	r0, r4
 8008cfa:	d007      	beq.n	8008d0c <sbrk_aligned+0x38>
 8008cfc:	1a21      	subs	r1, r4, r0
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 f87c 	bl	8008dfc <_sbrk_r>
 8008d04:	3001      	adds	r0, #1
 8008d06:	d101      	bne.n	8008d0c <sbrk_aligned+0x38>
 8008d08:	f04f 34ff 	mov.w	r4, #4294967295
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	bd70      	pop	{r4, r5, r6, pc}
 8008d10:	20000968 	.word	0x20000968

08008d14 <_malloc_r>:
 8008d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d18:	1ccd      	adds	r5, r1, #3
 8008d1a:	f025 0503 	bic.w	r5, r5, #3
 8008d1e:	3508      	adds	r5, #8
 8008d20:	2d0c      	cmp	r5, #12
 8008d22:	bf38      	it	cc
 8008d24:	250c      	movcc	r5, #12
 8008d26:	2d00      	cmp	r5, #0
 8008d28:	4607      	mov	r7, r0
 8008d2a:	db01      	blt.n	8008d30 <_malloc_r+0x1c>
 8008d2c:	42a9      	cmp	r1, r5
 8008d2e:	d905      	bls.n	8008d3c <_malloc_r+0x28>
 8008d30:	230c      	movs	r3, #12
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	2600      	movs	r6, #0
 8008d36:	4630      	mov	r0, r6
 8008d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d3c:	4e2e      	ldr	r6, [pc, #184]	; (8008df8 <_malloc_r+0xe4>)
 8008d3e:	f000 f86d 	bl	8008e1c <__malloc_lock>
 8008d42:	6833      	ldr	r3, [r6, #0]
 8008d44:	461c      	mov	r4, r3
 8008d46:	bb34      	cbnz	r4, 8008d96 <_malloc_r+0x82>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4638      	mov	r0, r7
 8008d4c:	f7ff ffc2 	bl	8008cd4 <sbrk_aligned>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	4604      	mov	r4, r0
 8008d54:	d14d      	bne.n	8008df2 <_malloc_r+0xde>
 8008d56:	6834      	ldr	r4, [r6, #0]
 8008d58:	4626      	mov	r6, r4
 8008d5a:	2e00      	cmp	r6, #0
 8008d5c:	d140      	bne.n	8008de0 <_malloc_r+0xcc>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	4631      	mov	r1, r6
 8008d62:	4638      	mov	r0, r7
 8008d64:	eb04 0803 	add.w	r8, r4, r3
 8008d68:	f000 f848 	bl	8008dfc <_sbrk_r>
 8008d6c:	4580      	cmp	r8, r0
 8008d6e:	d13a      	bne.n	8008de6 <_malloc_r+0xd2>
 8008d70:	6821      	ldr	r1, [r4, #0]
 8008d72:	3503      	adds	r5, #3
 8008d74:	1a6d      	subs	r5, r5, r1
 8008d76:	f025 0503 	bic.w	r5, r5, #3
 8008d7a:	3508      	adds	r5, #8
 8008d7c:	2d0c      	cmp	r5, #12
 8008d7e:	bf38      	it	cc
 8008d80:	250c      	movcc	r5, #12
 8008d82:	4629      	mov	r1, r5
 8008d84:	4638      	mov	r0, r7
 8008d86:	f7ff ffa5 	bl	8008cd4 <sbrk_aligned>
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	d02b      	beq.n	8008de6 <_malloc_r+0xd2>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	442b      	add	r3, r5
 8008d92:	6023      	str	r3, [r4, #0]
 8008d94:	e00e      	b.n	8008db4 <_malloc_r+0xa0>
 8008d96:	6822      	ldr	r2, [r4, #0]
 8008d98:	1b52      	subs	r2, r2, r5
 8008d9a:	d41e      	bmi.n	8008dda <_malloc_r+0xc6>
 8008d9c:	2a0b      	cmp	r2, #11
 8008d9e:	d916      	bls.n	8008dce <_malloc_r+0xba>
 8008da0:	1961      	adds	r1, r4, r5
 8008da2:	42a3      	cmp	r3, r4
 8008da4:	6025      	str	r5, [r4, #0]
 8008da6:	bf18      	it	ne
 8008da8:	6059      	strne	r1, [r3, #4]
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	bf08      	it	eq
 8008dae:	6031      	streq	r1, [r6, #0]
 8008db0:	5162      	str	r2, [r4, r5]
 8008db2:	604b      	str	r3, [r1, #4]
 8008db4:	4638      	mov	r0, r7
 8008db6:	f104 060b 	add.w	r6, r4, #11
 8008dba:	f000 f835 	bl	8008e28 <__malloc_unlock>
 8008dbe:	f026 0607 	bic.w	r6, r6, #7
 8008dc2:	1d23      	adds	r3, r4, #4
 8008dc4:	1af2      	subs	r2, r6, r3
 8008dc6:	d0b6      	beq.n	8008d36 <_malloc_r+0x22>
 8008dc8:	1b9b      	subs	r3, r3, r6
 8008dca:	50a3      	str	r3, [r4, r2]
 8008dcc:	e7b3      	b.n	8008d36 <_malloc_r+0x22>
 8008dce:	6862      	ldr	r2, [r4, #4]
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	bf0c      	ite	eq
 8008dd4:	6032      	streq	r2, [r6, #0]
 8008dd6:	605a      	strne	r2, [r3, #4]
 8008dd8:	e7ec      	b.n	8008db4 <_malloc_r+0xa0>
 8008dda:	4623      	mov	r3, r4
 8008ddc:	6864      	ldr	r4, [r4, #4]
 8008dde:	e7b2      	b.n	8008d46 <_malloc_r+0x32>
 8008de0:	4634      	mov	r4, r6
 8008de2:	6876      	ldr	r6, [r6, #4]
 8008de4:	e7b9      	b.n	8008d5a <_malloc_r+0x46>
 8008de6:	230c      	movs	r3, #12
 8008de8:	603b      	str	r3, [r7, #0]
 8008dea:	4638      	mov	r0, r7
 8008dec:	f000 f81c 	bl	8008e28 <__malloc_unlock>
 8008df0:	e7a1      	b.n	8008d36 <_malloc_r+0x22>
 8008df2:	6025      	str	r5, [r4, #0]
 8008df4:	e7de      	b.n	8008db4 <_malloc_r+0xa0>
 8008df6:	bf00      	nop
 8008df8:	20000964 	.word	0x20000964

08008dfc <_sbrk_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4d06      	ldr	r5, [pc, #24]	; (8008e18 <_sbrk_r+0x1c>)
 8008e00:	2300      	movs	r3, #0
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	602b      	str	r3, [r5, #0]
 8008e08:	f7f8 f88c 	bl	8000f24 <_sbrk>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_sbrk_r+0x1a>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_sbrk_r+0x1a>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	2000096c 	.word	0x2000096c

08008e1c <__malloc_lock>:
 8008e1c:	4801      	ldr	r0, [pc, #4]	; (8008e24 <__malloc_lock+0x8>)
 8008e1e:	f000 b809 	b.w	8008e34 <__retarget_lock_acquire_recursive>
 8008e22:	bf00      	nop
 8008e24:	20000970 	.word	0x20000970

08008e28 <__malloc_unlock>:
 8008e28:	4801      	ldr	r0, [pc, #4]	; (8008e30 <__malloc_unlock+0x8>)
 8008e2a:	f000 b804 	b.w	8008e36 <__retarget_lock_release_recursive>
 8008e2e:	bf00      	nop
 8008e30:	20000970 	.word	0x20000970

08008e34 <__retarget_lock_acquire_recursive>:
 8008e34:	4770      	bx	lr

08008e36 <__retarget_lock_release_recursive>:
 8008e36:	4770      	bx	lr

08008e38 <_init>:
 8008e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3a:	bf00      	nop
 8008e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e3e:	bc08      	pop	{r3}
 8008e40:	469e      	mov	lr, r3
 8008e42:	4770      	bx	lr

08008e44 <_fini>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	bf00      	nop
 8008e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4a:	bc08      	pop	{r3}
 8008e4c:	469e      	mov	lr, r3
 8008e4e:	4770      	bx	lr
