
Vaja3_ADC_trigger_timer_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e78  08008e78  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008e78  08008e78  00018e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e80  08008e80  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e80  08008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e84  08008e84  00018e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000090  08008f18  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08008f18  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c83e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d7  00000000  00000000  0003c8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  000409d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  000421e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b25f  00000000  00000000  00043848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001edef  00000000  00000000  0005eaa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1fd5  00000000  00000000  0007d896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f86b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006860  00000000  00000000  0011f8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000090 	.word	0x20000090
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008e44 	.word	0x08008e44

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000094 	.word	0x20000094
 80001d0:	08008e44 	.word	0x08008e44

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd9a 	bl	8001014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f820 	bl	8000524 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e4:	f000 f888 	bl	80005f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 fa08 	bl	80008fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ec:	f000 f8f4 	bl	80006d8 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f0:	f000 f920 	bl	8000734 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f4:	f000 f94c 	bl	8000790 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f8:	f000 f97a 	bl	80007f0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004fc:	f008 f85a 	bl	80085b4 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000500:	f000 f898 	bl	8000634 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000504:	f000 f9aa 	bl	800085c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <main+0x44>)
 800050a:	f000 fe5d 	bl	80011c8 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <main+0x48>)
 8000510:	f004 fdd2 	bl	80050b8 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000514:	f008 f874 	bl	8008600 <MX_USB_HOST_Process>
 8000518:	e7fc      	b.n	8000514 <main+0x3c>
 800051a:	bf00      	nop
 800051c:	200000ac 	.word	0x200000ac
 8000520:	20000230 	.word	0x20000230

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f008 fb80 	bl	8008c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a20      	ldr	r2, [pc, #128]	; (80005f4 <SystemClock_Config+0xd0>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800059c:	2360      	movs	r3, #96	; 0x60
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80005a0:	2306      	movs	r3, #6
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fedb 	bl	8004368 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b8:	f000 fa92 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2101      	movs	r1, #1
 80005d8:	4618      	mov	r0, r3
 80005da:	f004 f93d 	bl	8004858 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e4:	f000 fa7c 	bl	8000ae0 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800060c:	2301      	movs	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000610:	2332      	movs	r3, #50	; 0x32
 8000612:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fb28 	bl	8004c70 <HAL_RCCEx_PeriphCLKConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000626:	f000 fa5b 	bl	8000ae0 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000646:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xa0>)
 800064a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000658:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000662:	2200      	movs	r2, #0
 8000664:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000678:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000686:	2201      	movs	r2, #1
 8000688:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000694:	2201      	movs	r2, #1
 8000696:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800069a:	f000 fd51 	bl	8001140 <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80006a4:	f000 fa1c 	bl	8000ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_ADC1_Init+0x9c>)
 80006ba:	f000 ff75 	bl	80015a8 <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006c4:	f000 fa0c 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000ac 	.word	0x200000ac
 80006d4:	40012000 	.word	0x40012000

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f003 f843 	bl	80037a0 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f9de 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000f4 	.word	0x200000f4
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_I2S2_Init+0x54>)
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <MX_I2S2_Init+0x58>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2S2_Init+0x54>)
 8000740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000744:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_I2S2_Init+0x54>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_I2S2_Init+0x54>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_I2S2_Init+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_I2S2_Init+0x54>)
 800075a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800075e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_I2S2_Init+0x54>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_I2S2_Init+0x54>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_I2S2_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_I2S2_Init+0x54>)
 8000774:	f003 f958 	bl	8003a28 <HAL_I2S_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800077e:	f000 f9af 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000148 	.word	0x20000148
 800078c:	40003800 	.word	0x40003800

08000790 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_I2S3_Init+0x54>)
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <MX_I2S3_Init+0x58>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2S3_Init+0x54>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <MX_I2S3_Init+0x5c>)
 80007ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007d0:	f003 f92a 	bl	8003a28 <HAL_I2S_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007da:	f000 f981 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000190 	.word	0x20000190
 80007e8:	40003c00 	.word	0x40003c00
 80007ec:	00017700 	.word	0x00017700

080007f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_SPI1_Init+0x64>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_SPI1_Init+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_SPI1_Init+0x64>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_SPI1_Init+0x64>)
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_SPI1_Init+0x64>)
 800083c:	220a      	movs	r2, #10
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_SPI1_Init+0x64>)
 8000842:	f004 fb61 	bl	8004f08 <HAL_SPI_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800084c:	f000 f948 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200001d8 	.word	0x200001d8
 8000858:	40013000 	.word	0x40013000

0800085c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_TIM1_Init+0x98>)
 800087a:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <MX_TIM1_Init+0x9c>)
 800087c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000;
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_TIM1_Init+0x98>)
 8000880:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000884:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_TIM1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_TIM1_Init+0x98>)
 800088e:	2264      	movs	r2, #100	; 0x64
 8000890:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_TIM1_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_TIM1_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008a4:	4813      	ldr	r0, [pc, #76]	; (80008f4 <MX_TIM1_Init+0x98>)
 80008a6:	f004 fbb8 	bl	800501a <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008b0:	f000 f916 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_TIM1_Init+0x98>)
 80008c2:	f004 fc53 	bl	800516c <HAL_TIM_ConfigClockSource>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008cc:	f000 f908 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008d0:	2320      	movs	r3, #32
 80008d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM1_Init+0x98>)
 80008de:	f004 fe27 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 f8fa 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000230 	.word	0x20000230
 80008f8:	40010000 	.word	0x40010000

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	4b61      	ldr	r3, [pc, #388]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a60      	ldr	r2, [pc, #384]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	4b5a      	ldr	r3, [pc, #360]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a59      	ldr	r2, [pc, #356]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b53      	ldr	r3, [pc, #332]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a52      	ldr	r2, [pc, #328]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b50      	ldr	r3, [pc, #320]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b4c      	ldr	r3, [pc, #304]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a4b      	ldr	r2, [pc, #300]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b49      	ldr	r3, [pc, #292]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a44      	ldr	r2, [pc, #272]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a3d      	ldr	r2, [pc, #244]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2108      	movs	r1, #8
 80009be:	4838      	ldr	r0, [pc, #224]	; (8000aa0 <MX_GPIO_Init+0x1a4>)
 80009c0:	f001 fab0 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2101      	movs	r1, #1
 80009c8:	4836      	ldr	r0, [pc, #216]	; (8000aa4 <MX_GPIO_Init+0x1a8>)
 80009ca:	f001 faab 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ce:	2200      	movs	r2, #0
 80009d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009d4:	4834      	ldr	r0, [pc, #208]	; (8000aa8 <MX_GPIO_Init+0x1ac>)
 80009d6:	f001 faa5 	bl	8001f24 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009da:	2304      	movs	r3, #4
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	482c      	ldr	r0, [pc, #176]	; (8000aa0 <MX_GPIO_Init+0x1a4>)
 80009ee:	f001 f915 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009f2:	2308      	movs	r3, #8
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4825      	ldr	r0, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0x1a4>)
 8000a0a:	f001 f907 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000a0e:	2332      	movs	r3, #50	; 0x32
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a12:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <MX_GPIO_Init+0x1a4>)
 8000a24:	f001 f8fa 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4819      	ldr	r0, [pc, #100]	; (8000aa4 <MX_GPIO_Init+0x1a8>)
 8000a40:	f001 f8ec 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a48:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4814      	ldr	r0, [pc, #80]	; (8000aac <MX_GPIO_Init+0x1b0>)
 8000a5a:	f001 f8df 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a5e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a62:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_GPIO_Init+0x1ac>)
 8000a78:	f001 f8d0 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_GPIO_Init+0x1ac>)
 8000a90:	f001 f8c4 	bl	8001c1c <HAL_GPIO_Init>

}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40020000 	.word	0x40020000

08000ab0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)

{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	adcVal = HAL_ADC_GetValue(hadc1);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 fd53 	bl	8001564 <HAL_ADC_GetValue>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_ADC_ConvCpltCallback+0x28>)
 8000ac4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <HAL_ADC_ConvCpltCallback+0x2c>)
 8000acc:	f001 fa43 	bl	8001f56 <HAL_GPIO_TogglePin>
	UNUSED(hadc1);

	}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000278 	.word	0x20000278
 8000adc:	40020c00 	.word	0x40020c00

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <HAL_MspInit+0x4c>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2a:	2007      	movs	r0, #7
 8000b2c:	f001 f834 	bl	8001b98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <HAL_ADC_MspInit+0x8c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12f      	bne.n	8000bbe <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <HAL_ADC_MspInit+0x90>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_ADC_MspInit+0x90>)
 8000b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_ADC_MspInit+0x90>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_ADC_MspInit+0x90>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <HAL_ADC_MspInit+0x90>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_ADC_MspInit+0x90>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b96:	2302      	movs	r3, #2
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <HAL_ADC_MspInit+0x94>)
 8000baa:	f001 f837 	bl	8001c1c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2012      	movs	r0, #18
 8000bb4:	f000 fffb 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000bb8:	2012      	movs	r0, #18
 8000bba:	f001 f814 	bl	8001be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012000 	.word	0x40012000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12c      	bne.n	8000c50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c18:	2312      	movs	r3, #18
 8000c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c24:	2304      	movs	r3, #4
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <HAL_I2C_MspInit+0x8c>)
 8000c30:	f000 fff4 	bl	8001c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c42:	6413      	str	r3, [r2, #64]	; 0x40
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020400 	.word	0x40020400

08000c64 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a51      	ldr	r2, [pc, #324]	; (8000dc8 <HAL_I2S_MspInit+0x164>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d14b      	bne.n	8000d1e <HAL_I2S_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a4f      	ldr	r2, [pc, #316]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	623b      	str	r3, [r7, #32]
 8000ca0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
 8000ca6:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a48      	ldr	r2, [pc, #288]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	4b42      	ldr	r3, [pc, #264]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a41      	ldr	r2, [pc, #260]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b3f      	ldr	r3, [pc, #252]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
 8000cd8:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cea:	2305      	movs	r3, #5
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4836      	ldr	r0, [pc, #216]	; (8000dd0 <HAL_I2S_MspInit+0x16c>)
 8000cf6:	f000 ff91 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000cfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	482f      	ldr	r0, [pc, #188]	; (8000dd4 <HAL_I2S_MspInit+0x170>)
 8000d18:	f000 ff80 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d1c:	e04f      	b.n	8000dbe <HAL_I2S_MspInit+0x15a>
  else if(hi2s->Instance==SPI3)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a2d      	ldr	r2, [pc, #180]	; (8000dd8 <HAL_I2S_MspInit+0x174>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d14a      	bne.n	8000dbe <HAL_I2S_MspInit+0x15a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a26      	ldr	r2, [pc, #152]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4a1f      	ldr	r2, [pc, #124]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_I2S_MspInit+0x168>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4811      	ldr	r0, [pc, #68]	; (8000ddc <HAL_I2S_MspInit+0x178>)
 8000d98:	f000 ff40 	bl	8001c1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d9c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dae:	2306      	movs	r3, #6
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_I2S_MspInit+0x16c>)
 8000dba:	f000 ff2f 	bl	8001c1c <HAL_GPIO_Init>
}
 8000dbe:	bf00      	nop
 8000dc0:	3738      	adds	r7, #56	; 0x38
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40003800 	.word	0x40003800
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40003c00 	.word	0x40003c00
 8000ddc:	40020000 	.word	0x40020000

08000de0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_SPI_MspInit+0x84>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d12b      	bne.n	8000e5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000e3a:	23e0      	movs	r3, #224	; 0xe0
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_SPI_MspInit+0x8c>)
 8000e56:	f000 fee1 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40013000 	.word	0x40013000
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000

08000e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_TIM_Base_MspInit+0x3c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d10d      	bne.n	8000e9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_TIM_Base_MspInit+0x40>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <HAL_TIM_Base_MspInit+0x40>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_TIM_Base_MspInit+0x40>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 f8da 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <ADC_IRQHandler+0x10>)
 8000f0e:	f000 fa19 	bl	8001344 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000ac 	.word	0x200000ac

08000f1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <OTG_FS_IRQHandler+0x10>)
 8000f22:	f001 fa9d 	bl	8002460 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000660 	.word	0x20000660

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f007 fe30 	bl	8008bc4 <__errno>
 8000f64:	4603      	mov	r3, r0
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20010000 	.word	0x20010000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	2000027c 	.word	0x2000027c
 8000f98:	20000978 	.word	0x20000978

08000f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <SystemInit+0x20>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <SystemInit+0x20>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fc6:	490e      	ldr	r1, [pc, #56]	; (8001000 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fdc:	4c0b      	ldr	r4, [pc, #44]	; (800100c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fea:	f7ff ffd7 	bl	8000f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fee:	f007 fdef 	bl	8008bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff2:	f7ff fa71 	bl	80004d8 <main>
  bx  lr    
 8000ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001000:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001004:	08008e88 	.word	0x08008e88
  ldr r2, =_sbss
 8001008:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800100c:	20000974 	.word	0x20000974

08001010 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <DMA1_Stream0_IRQHandler>
	...

08001014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <HAL_Init+0x40>)
 800101e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_Init+0x40>)
 800102a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_Init+0x40>)
 8001036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 fdab 	bl	8001b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f808 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001048:	f7ff fd50 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023c00 	.word	0x40023c00

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x54>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x58>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fdc3 	bl	8001c02 <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 fd8b 	bl	8001bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_InitTick+0x5c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000280 	.word	0x20000280

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000280 	.word	0x20000280

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff ffee 	bl	80010e0 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffde 	bl	80010e0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008

08001140 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e033      	b.n	80011be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	2b00      	cmp	r3, #0
 800115c:	d109      	bne.n	8001172 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fcec 	bl	8000b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	2b00      	cmp	r3, #0
 800117c:	d118      	bne.n	80011b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001186:	f023 0302 	bic.w	r3, r3, #2
 800118a:	f043 0202 	orr.w	r2, r3, #2
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 fb2a 	bl	80017ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f023 0303 	bic.w	r3, r3, #3
 80011a6:	f043 0201 	orr.w	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
 80011ae:	e001      	b.n	80011b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_Start_IT+0x1a>
 80011de:	2302      	movs	r3, #2
 80011e0:	e0a1      	b.n	8001326 <HAL_ADC_Start_IT+0x15e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d018      	beq.n	800122a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0201 	orr.w	r2, r2, #1
 8001206:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001208:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <HAL_ADC_Start_IT+0x16c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <HAL_ADC_Start_IT+0x170>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	0c9a      	lsrs	r2, r3, #18
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800121c:	e002      	b.n	8001224 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	3b01      	subs	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f9      	bne.n	800121e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b01      	cmp	r3, #1
 8001236:	d169      	bne.n	800130c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001262:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001276:	d106      	bne.n	8001286 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	f023 0206 	bic.w	r2, r3, #6
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	645a      	str	r2, [r3, #68]	; 0x44
 8001284:	e002      	b.n	800128c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <HAL_ADC_Start_IT+0x174>)
 8001296:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012a0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012b0:	f043 0320 	orr.w	r3, r3, #32
 80012b4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d129      	bne.n	8001324 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	e020      	b.n	8001324 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <HAL_ADC_Start_IT+0x178>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d11b      	bne.n	8001324 <HAL_ADC_Start_IT+0x15c>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d114      	bne.n	8001324 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	e00b      	b.n	8001324 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f043 0210 	orr.w	r2, r3, #16
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	f043 0201 	orr.w	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000000 	.word	0x20000000
 8001338:	431bde83 	.word	0x431bde83
 800133c:	40012300 	.word	0x40012300
 8001340:	40012000 	.word	0x40012000

08001344 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f003 0320 	and.w	r3, r3, #32
 8001372:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d049      	beq.n	800140e <HAL_ADC_IRQHandler+0xca>
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d046      	beq.n	800140e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	2b00      	cmp	r3, #0
 800138a:	d105      	bne.n	8001398 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d12b      	bne.n	80013fe <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d127      	bne.n	80013fe <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d006      	beq.n	80013ca <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d119      	bne.n	80013fe <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0220 	bic.w	r2, r2, #32
 80013d8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d105      	bne.n	80013fe <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f043 0201 	orr.w	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fb56 	bl	8000ab0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f06f 0212 	mvn.w	r2, #18
 800140c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d057      	beq.n	80014d4 <HAL_ADC_IRQHandler+0x190>
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d054      	beq.n	80014d4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	d105      	bne.n	8001442 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d139      	bne.n	80014c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001456:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001468:	2b00      	cmp	r3, #0
 800146a:	d12b      	bne.n	80014c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001476:	2b00      	cmp	r3, #0
 8001478:	d124      	bne.n	80014c4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001484:	2b00      	cmp	r3, #0
 8001486:	d11d      	bne.n	80014c4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800148c:	2b00      	cmp	r3, #0
 800148e:	d119      	bne.n	80014c4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800149e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fa8d 	bl	80019e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f06f 020c 	mvn.w	r2, #12
 80014d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d017      	beq.n	800151a <HAL_ADC_IRQHandler+0x1d6>
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d014      	beq.n	800151a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d10d      	bne.n	800151a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f837 	bl	800157e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f06f 0201 	mvn.w	r2, #1
 8001518:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001528:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d015      	beq.n	800155c <HAL_ADC_IRQHandler+0x218>
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d012      	beq.n	800155c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f043 0202 	orr.w	r2, r3, #2
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f06f 0220 	mvn.w	r2, #32
 800154a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f820 	bl	8001592 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f06f 0220 	mvn.w	r2, #32
 800155a:	601a      	str	r2, [r3, #0]
  }
}
 800155c:	bf00      	nop
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1c>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e105      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x228>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	d925      	bls.n	8001620 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68d9      	ldr	r1, [r3, #12]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	3b1e      	subs	r3, #30
 80015ea:	2207      	movs	r2, #7
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43da      	mvns	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	400a      	ands	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68d9      	ldr	r1, [r3, #12]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	4603      	mov	r3, r0
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4403      	add	r3, r0
 8001612:	3b1e      	subs	r3, #30
 8001614:	409a      	lsls	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	e022      	b.n	8001666 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6919      	ldr	r1, [r3, #16]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	2207      	movs	r2, #7
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	400a      	ands	r2, r1
 8001642:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6919      	ldr	r1, [r3, #16]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	4618      	mov	r0, r3
 8001656:	4603      	mov	r3, r0
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4403      	add	r3, r0
 800165c:	409a      	lsls	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b06      	cmp	r3, #6
 800166c:	d824      	bhi.n	80016b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	3b05      	subs	r3, #5
 8001680:	221f      	movs	r2, #31
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	400a      	ands	r2, r1
 800168e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	3b05      	subs	r3, #5
 80016aa:	fa00 f203 	lsl.w	r2, r0, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
 80016b6:	e04c      	b.n	8001752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	d824      	bhi.n	800170a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	3b23      	subs	r3, #35	; 0x23
 80016d2:	221f      	movs	r2, #31
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43da      	mvns	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	400a      	ands	r2, r1
 80016e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	3b23      	subs	r3, #35	; 0x23
 80016fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
 8001708:	e023      	b.n	8001752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3b41      	subs	r3, #65	; 0x41
 800171c:	221f      	movs	r2, #31
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	400a      	ands	r2, r1
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b41      	subs	r3, #65	; 0x41
 8001746:	fa00 f203 	lsl.w	r2, r0, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <HAL_ADC_ConfigChannel+0x234>)
 8001754:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <HAL_ADC_ConfigChannel+0x238>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d109      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1cc>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b12      	cmp	r3, #18
 8001766:	d105      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_ADC_ConfigChannel+0x238>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d123      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x21e>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b10      	cmp	r3, #16
 8001784:	d003      	beq.n	800178e <HAL_ADC_ConfigChannel+0x1e6>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b11      	cmp	r3, #17
 800178c:	d11b      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d111      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_ADC_ConfigChannel+0x23c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_ADC_ConfigChannel+0x240>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	0c9a      	lsrs	r2, r3, #18
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b8:	e002      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3b01      	subs	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f9      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40012300 	.word	0x40012300
 80017e0:	40012000 	.word	0x40012000
 80017e4:	20000000 	.word	0x20000000
 80017e8:	431bde83 	.word	0x431bde83

080017ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f4:	4b79      	ldr	r3, [pc, #484]	; (80019dc <ADC_Init+0x1f0>)
 80017f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	431a      	orrs	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	021a      	lsls	r2, r3, #8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6899      	ldr	r1, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <ADC_Init+0x1f4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d022      	beq.n	80018ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001892:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6899      	ldr	r1, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6899      	ldr	r1, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	e00f      	b.n	80018ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0202 	bic.w	r2, r2, #2
 80018f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7e1b      	ldrb	r3, [r3, #24]
 8001904:	005a      	lsls	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01b      	beq.n	8001950 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001926:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001936:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6859      	ldr	r1, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	3b01      	subs	r3, #1
 8001944:	035a      	lsls	r2, r3, #13
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	e007      	b.n	8001960 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	3b01      	subs	r3, #1
 800197c:	051a      	lsls	r2, r3, #20
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6899      	ldr	r1, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019a2:	025a      	lsls	r2, r3, #9
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6899      	ldr	r1, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	029a      	lsls	r2, r3, #10
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40012300 	.word	0x40012300
 80019e0:	0f000001 	.word	0x0f000001

080019e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	60d3      	str	r3, [r2, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db0b      	blt.n	8001a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	4907      	ldr	r1, [pc, #28]	; (8001a94 <__NVIC_EnableIRQ+0x38>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b64:	d301      	bcc.n	8001b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00f      	b.n	8001b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <SysTick_Config+0x40>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b72:	210f      	movs	r1, #15
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f7ff ff8e 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SysTick_Config+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <SysTick_Config+0x40>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff29 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc0:	f7ff ff3e 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	6978      	ldr	r0, [r7, #20]
 8001bcc:	f7ff ff8e 	bl	8001aec <NVIC_EncodePriority>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff5d 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff31 	bl	8001a5c <__NVIC_EnableIRQ>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffa2 	bl	8001b54 <SysTick_Config>
 8001c10:	4603      	mov	r3, r0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e159      	b.n	8001eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8148 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a2 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b57      	ldr	r3, [pc, #348]	; (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a56      	ldr	r2, [pc, #344]	; (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b54      	ldr	r3, [pc, #336]	; (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a52      	ldr	r2, [pc, #328]	; (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a49      	ldr	r2, [pc, #292]	; (8001f0c <HAL_GPIO_Init+0x2f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x202>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <HAL_GPIO_Init+0x2f4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x1fe>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a47      	ldr	r2, [pc, #284]	; (8001f14 <HAL_GPIO_Init+0x2f8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x1fa>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a46      	ldr	r2, [pc, #280]	; (8001f18 <HAL_GPIO_Init+0x2fc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x1f6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a45      	ldr	r2, [pc, #276]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x1f2>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e0e:	2307      	movs	r3, #7
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4935      	ldr	r1, [pc, #212]	; (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a24      	ldr	r2, [pc, #144]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f aea2 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
 8001f30:	4613      	mov	r3, r2
 8001f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f34:	787b      	ldrb	r3, [r7, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f40:	e003      	b.n	8001f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	041a      	lsls	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	619a      	str	r2, [r3, #24]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f68:	887a      	ldrh	r2, [r7, #2]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	041a      	lsls	r2, r3, #16
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	400b      	ands	r3, r1
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8c:	b08f      	sub	sp, #60	; 0x3c
 8001f8e:	af0a      	add	r7, sp, #40	; 0x28
 8001f90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e054      	b.n	8002046 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f006 fb5a 	bl	8008670 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fb88 	bl	80056f0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	687e      	ldr	r6, [r7, #4]
 8001fe8:	466d      	mov	r5, sp
 8001fea:	f106 0410 	add.w	r4, r6, #16
 8001fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ffa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ffe:	1d33      	adds	r3, r6, #4
 8002000:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002002:	6838      	ldr	r0, [r7, #0]
 8002004:	f003 fb02 	bl	800560c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fb7f 	bl	8005712 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	687e      	ldr	r6, [r7, #4]
 800201c:	466d      	mov	r5, sp
 800201e:	f106 0410 	add.w	r4, r6, #16
 8002022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800202e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002032:	1d33      	adds	r3, r6, #4
 8002034:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002036:	6838      	ldr	r0, [r7, #0]
 8002038:	f003 fd08 	bl	8005a4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800204e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800204e:	b590      	push	{r4, r7, lr}
 8002050:	b089      	sub	sp, #36	; 0x24
 8002052:	af04      	add	r7, sp, #16
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	4608      	mov	r0, r1
 8002058:	4611      	mov	r1, r2
 800205a:	461a      	mov	r2, r3
 800205c:	4603      	mov	r3, r0
 800205e:	70fb      	strb	r3, [r7, #3]
 8002060:	460b      	mov	r3, r1
 8002062:	70bb      	strb	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_HCD_HC_Init+0x28>
 8002072:	2302      	movs	r3, #2
 8002074:	e076      	b.n	8002164 <HAL_HCD_HC_Init+0x116>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	333d      	adds	r3, #61	; 0x3d
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	3338      	adds	r3, #56	; 0x38
 800209e:	787a      	ldrb	r2, [r7, #1]
 80020a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3340      	adds	r3, #64	; 0x40
 80020b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020b2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3339      	adds	r3, #57	; 0x39
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	333f      	adds	r3, #63	; 0x3f
 80020d4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	78ba      	ldrb	r2, [r7, #2]
 80020de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020e2:	b2d0      	uxtb	r0, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	333a      	adds	r3, #58	; 0x3a
 80020f0:	4602      	mov	r2, r0
 80020f2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80020f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	da09      	bge.n	8002110 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	333b      	adds	r3, #59	; 0x3b
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e008      	b.n	8002122 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	333b      	adds	r3, #59	; 0x3b
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	333c      	adds	r3, #60	; 0x3c
 8002130:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002134:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	787c      	ldrb	r4, [r7, #1]
 800213c:	78ba      	ldrb	r2, [r7, #2]
 800213e:	78f9      	ldrb	r1, [r7, #3]
 8002140:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002142:	9302      	str	r3, [sp, #8]
 8002144:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4623      	mov	r3, r4
 8002152:	f003 fe01 	bl	8005d58 <USB_HC_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bd90      	pop	{r4, r7, pc}

0800216c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_HCD_HC_Halt+0x1e>
 8002186:	2302      	movs	r3, #2
 8002188:	e00f      	b.n	80021aa <HAL_HCD_HC_Halt+0x3e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f004 f851 	bl	8006242 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	70fb      	strb	r3, [r7, #3]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70bb      	strb	r3, [r7, #2]
 80021ca:	4613      	mov	r3, r2
 80021cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	333b      	adds	r3, #59	; 0x3b
 80021dc:	78ba      	ldrb	r2, [r7, #2]
 80021de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	333f      	adds	r3, #63	; 0x3f
 80021ee:	787a      	ldrb	r2, [r7, #1]
 80021f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021f2:	7c3b      	ldrb	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d112      	bne.n	800221e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3342      	adds	r3, #66	; 0x42
 8002206:	2203      	movs	r2, #3
 8002208:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	333d      	adds	r3, #61	; 0x3d
 8002218:	7f3a      	ldrb	r2, [r7, #28]
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e008      	b.n	8002230 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3342      	adds	r3, #66	; 0x42
 800222c:	2202      	movs	r2, #2
 800222e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	2b03      	cmp	r3, #3
 8002234:	f200 80c6 	bhi.w	80023c4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	08002251 	.word	0x08002251
 8002244:	080023b1 	.word	0x080023b1
 8002248:	080022b5 	.word	0x080022b5
 800224c:	08002333 	.word	0x08002333
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002250:	7c3b      	ldrb	r3, [r7, #16]
 8002252:	2b01      	cmp	r3, #1
 8002254:	f040 80b8 	bne.w	80023c8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002258:	78bb      	ldrb	r3, [r7, #2]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 80b4 	bne.w	80023c8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002260:	8b3b      	ldrh	r3, [r7, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d108      	bne.n	8002278 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	3355      	adds	r3, #85	; 0x55
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	212c      	movs	r1, #44	; 0x2c
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3355      	adds	r3, #85	; 0x55
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3342      	adds	r3, #66	; 0x42
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800229e:	e093      	b.n	80023c8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3342      	adds	r3, #66	; 0x42
 80022ae:	2202      	movs	r2, #2
 80022b0:	701a      	strb	r2, [r3, #0]
      break;
 80022b2:	e089      	b.n	80023c8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022b4:	78bb      	ldrb	r3, [r7, #2]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d11d      	bne.n	80022f6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3355      	adds	r3, #85	; 0x55
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3342      	adds	r3, #66	; 0x42
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022e0:	e073      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	3342      	adds	r3, #66	; 0x42
 80022f0:	2202      	movs	r2, #2
 80022f2:	701a      	strb	r2, [r3, #0]
      break;
 80022f4:	e069      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3354      	adds	r3, #84	; 0x54
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3342      	adds	r3, #66	; 0x42
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
      break;
 800231c:	e055      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3342      	adds	r3, #66	; 0x42
 800232c:	2202      	movs	r2, #2
 800232e:	701a      	strb	r2, [r3, #0]
      break;
 8002330:	e04b      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002332:	78bb      	ldrb	r3, [r7, #2]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d11d      	bne.n	8002374 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	3355      	adds	r3, #85	; 0x55
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3342      	adds	r3, #66	; 0x42
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800235e:	e034      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3342      	adds	r3, #66	; 0x42
 800236e:	2202      	movs	r2, #2
 8002370:	701a      	strb	r2, [r3, #0]
      break;
 8002372:	e02a      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	3354      	adds	r3, #84	; 0x54
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	3342      	adds	r3, #66	; 0x42
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
      break;
 800239a:	e016      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	3342      	adds	r3, #66	; 0x42
 80023aa:	2202      	movs	r2, #2
 80023ac:	701a      	strb	r2, [r3, #0]
      break;
 80023ae:	e00c      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	3342      	adds	r3, #66	; 0x42
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
      break;
 80023c2:	e002      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80023c4:	bf00      	nop
 80023c6:	e000      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80023c8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3344      	adds	r3, #68	; 0x44
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	8b3a      	ldrh	r2, [r7, #24]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	202c      	movs	r0, #44	; 0x2c
 80023e4:	fb00 f303 	mul.w	r3, r0, r3
 80023e8:	440b      	add	r3, r1
 80023ea:	334c      	adds	r3, #76	; 0x4c
 80023ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	3360      	adds	r3, #96	; 0x60
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3350      	adds	r3, #80	; 0x50
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3339      	adds	r3, #57	; 0x39
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3361      	adds	r3, #97	; 0x61
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	222c      	movs	r2, #44	; 0x2c
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	3338      	adds	r3, #56	; 0x38
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	18d1      	adds	r1, r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	f003 fda4 	bl	8005f9c <USB_HC_StartXfer>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop

08002460 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f003 faa5 	bl	80059c6 <USB_GetMode>
 800247c:	4603      	mov	r3, r0
 800247e:	2b01      	cmp	r3, #1
 8002480:	f040 80f6 	bne.w	8002670 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 fa89 	bl	80059a0 <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80ec 	beq.w	800266e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fa80 	bl	80059a0 <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024aa:	d104      	bne.n	80024b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 fa70 	bl	80059a0 <USB_ReadInterrupts>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ca:	d104      	bne.n	80024d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fa60 	bl	80059a0 <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ea:	d104      	bne.n	80024f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 fa50 	bl	80059a0 <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b02      	cmp	r3, #2
 8002508:	d103      	bne.n	8002512 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2202      	movs	r2, #2
 8002510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 fa42 	bl	80059a0 <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002526:	d11c      	bne.n	8002562 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002530:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002542:	2110      	movs	r1, #16
 8002544:	6938      	ldr	r0, [r7, #16]
 8002546:	f003 f931 	bl	80057ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800254a:	6938      	ldr	r0, [r7, #16]
 800254c:	f003 f962 	bl	8005814 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fb38 	bl	8005bcc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f006 f905 	bl	800876c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fa1a 	bl	80059a0 <USB_ReadInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002572:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002576:	d102      	bne.n	800257e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f001 f89e 	bl	80036ba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 fa0c 	bl	80059a0 <USB_ReadInterrupts>
 8002588:	4603      	mov	r3, r0
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b08      	cmp	r3, #8
 8002590:	d106      	bne.n	80025a0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f006 f8ce 	bl	8008734 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2208      	movs	r2, #8
 800259e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 f9fb 	bl	80059a0 <USB_ReadInterrupts>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d101      	bne.n	80025b8 <HAL_HCD_IRQHandler+0x158>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_HCD_IRQHandler+0x15a>
 80025b8:	2300      	movs	r3, #0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d012      	beq.n	80025e4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0210 	bic.w	r2, r2, #16
 80025cc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 ffa1 	bl	8003516 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0210 	orr.w	r2, r2, #16
 80025e2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 f9d9 	bl	80059a0 <USB_ReadInterrupts>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025f8:	d13a      	bne.n	8002670 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 fe0e 	bl	8006220 <USB_HC_ReadInterrupt>
 8002604:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	e025      	b.n	8002658 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d018      	beq.n	8002652 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002636:	d106      	bne.n	8002646 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8ab 	bl	800279a <HCD_HC_IN_IRQHandler>
 8002644:	e005      	b.n	8002652 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fbf9 	bl	8002e44 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	429a      	cmp	r2, r3
 8002660:	d3d4      	bcc.n	800260c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800266a:	615a      	str	r2, [r3, #20]
 800266c:	e000      	b.n	8002670 <HAL_HCD_IRQHandler+0x210>
      return;
 800266e:	bf00      	nop
    }
  }
}
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_HCD_Start+0x16>
 8002688:	2302      	movs	r3, #2
 800268a:	e013      	b.n	80026b4 <HAL_HCD_Start+0x3e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f003 fafa 	bl	8005c94 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 f812 	bl	80056ce <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_HCD_Stop+0x16>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e00d      	b.n	80026ee <HAL_HCD_Stop+0x32>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fee8 	bl	80064b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f003 fa9c 	bl	8005c40 <USB_ResetPort>
 8002708:	4603      	mov	r3, r0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3360      	adds	r3, #96	; 0x60
 800272c:	781b      	ldrb	r3, [r3, #0]
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3350      	adds	r3, #80	; 0x50
 8002754:	681b      	ldr	r3, [r3, #0]
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fae0 	bl	8005d34 <USB_GetCurrentFrame>
 8002774:	4603      	mov	r3, r0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f003 fabb 	bl	8005d06 <USB_GetHostSpeed>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d11a      	bne.n	8002800 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	461a      	mov	r2, r3
 80027d8:	2304      	movs	r3, #4
 80027da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3361      	adds	r3, #97	; 0x61
 80027ea:	2206      	movs	r2, #6
 80027ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 fd22 	bl	8006242 <USB_HC_Halt>
 80027fe:	e0af      	b.n	8002960 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002816:	d11b      	bne.n	8002850 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	461a      	mov	r2, r3
 8002826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800282a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3361      	adds	r3, #97	; 0x61
 800283a:	2207      	movs	r2, #7
 800283c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f003 fcfa 	bl	8006242 <USB_HC_Halt>
 800284e:	e087      	b.n	8002960 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b20      	cmp	r3, #32
 8002864:	d109      	bne.n	800287a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	461a      	mov	r2, r3
 8002874:	2320      	movs	r3, #32
 8002876:	6093      	str	r3, [r2, #8]
 8002878:	e072      	b.n	8002960 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b08      	cmp	r3, #8
 800288e:	d11a      	bne.n	80028c6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	461a      	mov	r2, r3
 800289e:	2308      	movs	r3, #8
 80028a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3361      	adds	r3, #97	; 0x61
 80028b0:	2205      	movs	r2, #5
 80028b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fcbf 	bl	8006242 <USB_HC_Halt>
 80028c4:	e04c      	b.n	8002960 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028dc:	d11b      	bne.n	8002916 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	461a      	mov	r2, r3
 80028ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3361      	adds	r3, #97	; 0x61
 8002900:	2208      	movs	r2, #8
 8002902:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fc97 	bl	8006242 <USB_HC_Halt>
 8002914:	e024      	b.n	8002960 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002928:	2b80      	cmp	r3, #128	; 0x80
 800292a:	d119      	bne.n	8002960 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	461a      	mov	r2, r3
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3361      	adds	r3, #97	; 0x61
 800294c:	2206      	movs	r2, #6
 800294e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fc71 	bl	8006242 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002976:	d112      	bne.n	800299e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fc5d 	bl	8006242 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	461a      	mov	r2, r3
 8002996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800299a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800299c:	e24e      	b.n	8002e3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	f040 80df 	bne.w	8002b74 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d019      	beq.n	80029f2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3348      	adds	r3, #72	; 0x48
 80029cc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	0159      	lsls	r1, r3, #5
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	440b      	add	r3, r1
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029e0:	1ad2      	subs	r2, r2, r3
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	202c      	movs	r0, #44	; 0x2c
 80029e8:	fb00 f303 	mul.w	r3, r0, r3
 80029ec:	440b      	add	r3, r1
 80029ee:	3350      	adds	r3, #80	; 0x50
 80029f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	3361      	adds	r3, #97	; 0x61
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	335c      	adds	r3, #92	; 0x5c
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	461a      	mov	r2, r3
 8002a24:	2301      	movs	r3, #1
 8002a26:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	333f      	adds	r3, #63	; 0x3f
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d009      	beq.n	8002a50 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	333f      	adds	r3, #63	; 0x3f
 8002a4a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d111      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fbf1 	bl	8006242 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2310      	movs	r3, #16
 8002a70:	6093      	str	r3, [r2, #8]
 8002a72:	e03a      	b.n	8002aea <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	333f      	adds	r3, #63	; 0x3f
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d009      	beq.n	8002a9c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	333f      	adds	r3, #63	; 0x3f
 8002a96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d126      	bne.n	8002aea <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	0151      	lsls	r1, r2, #5
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002aba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3360      	adds	r3, #96	; 0x60
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	b2d9      	uxtb	r1, r3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	202c      	movs	r0, #44	; 0x2c
 8002ad8:	fb00 f303 	mul.w	r3, r0, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3360      	adds	r3, #96	; 0x60
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f005 fe4f 	bl	8008788 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d12b      	bne.n	8002b4a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	3348      	adds	r3, #72	; 0x48
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	202c      	movs	r0, #44	; 0x2c
 8002b08:	fb00 f202 	mul.w	r2, r0, r2
 8002b0c:	440a      	add	r2, r1
 8002b0e:	3240      	adds	r2, #64	; 0x40
 8002b10:	8812      	ldrh	r2, [r2, #0]
 8002b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 818e 	beq.w	8002e3c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3354      	adds	r3, #84	; 0x54
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	f083 0301 	eor.w	r3, r3, #1
 8002b34:	b2d8      	uxtb	r0, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3354      	adds	r3, #84	; 0x54
 8002b44:	4602      	mov	r2, r0
 8002b46:	701a      	strb	r2, [r3, #0]
}
 8002b48:	e178      	b.n	8002e3c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3354      	adds	r3, #84	; 0x54
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	f083 0301 	eor.w	r3, r3, #1
 8002b5e:	b2d8      	uxtb	r0, r3
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3354      	adds	r3, #84	; 0x54
 8002b6e:	4602      	mov	r2, r0
 8002b70:	701a      	strb	r2, [r3, #0]
}
 8002b72:	e163      	b.n	8002e3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	f040 80f6 	bne.w	8002d78 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3361      	adds	r3, #97	; 0x61
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d109      	bne.n	8002bb4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3360      	adds	r3, #96	; 0x60
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e0c9      	b.n	8002d48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3361      	adds	r3, #97	; 0x61
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d109      	bne.n	8002bdc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3360      	adds	r3, #96	; 0x60
 8002bd6:	2205      	movs	r2, #5
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e0b5      	b.n	8002d48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3361      	adds	r3, #97	; 0x61
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d009      	beq.n	8002c04 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3361      	adds	r3, #97	; 0x61
 8002bfe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d150      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	335c      	adds	r3, #92	; 0x5c
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	202c      	movs	r0, #44	; 0x2c
 8002c1c:	fb00 f303 	mul.w	r3, r0, r3
 8002c20:	440b      	add	r3, r1
 8002c22:	335c      	adds	r3, #92	; 0x5c
 8002c24:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	335c      	adds	r3, #92	; 0x5c
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d912      	bls.n	8002c60 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	335c      	adds	r3, #92	; 0x5c
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3360      	adds	r3, #96	; 0x60
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c5e:	e073      	b.n	8002d48 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3360      	adds	r3, #96	; 0x60
 8002c6e:	2202      	movs	r2, #2
 8002c70:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c88:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c90:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ca4:	e050      	b.n	8002d48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3361      	adds	r3, #97	; 0x61
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d122      	bne.n	8002d00 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3360      	adds	r3, #96	; 0x60
 8002cc8:	2202      	movs	r2, #2
 8002cca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ce2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e023      	b.n	8002d48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3361      	adds	r3, #97	; 0x61
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b07      	cmp	r3, #7
 8002d12:	d119      	bne.n	8002d48 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	335c      	adds	r3, #92	; 0x5c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	202c      	movs	r0, #44	; 0x2c
 8002d2c:	fb00 f303 	mul.w	r3, r0, r3
 8002d30:	440b      	add	r3, r1
 8002d32:	335c      	adds	r3, #92	; 0x5c
 8002d34:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3360      	adds	r3, #96	; 0x60
 8002d44:	2204      	movs	r2, #4
 8002d46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	461a      	mov	r2, r3
 8002d56:	2302      	movs	r3, #2
 8002d58:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	b2d9      	uxtb	r1, r3
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	202c      	movs	r0, #44	; 0x2c
 8002d64:	fb00 f303 	mul.w	r3, r0, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3360      	adds	r3, #96	; 0x60
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f005 fd09 	bl	8008788 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d76:	e061      	b.n	8002e3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d156      	bne.n	8002e3c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	333f      	adds	r3, #63	; 0x3f
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d111      	bne.n	8002dc6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	335c      	adds	r3, #92	; 0x5c
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 fa3f 	bl	8006242 <USB_HC_Halt>
 8002dc4:	e031      	b.n	8002e2a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	333f      	adds	r3, #63	; 0x3f
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	333f      	adds	r3, #63	; 0x3f
 8002de8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d11d      	bne.n	8002e2a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	335c      	adds	r3, #92	; 0x5c
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d110      	bne.n	8002e2a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3361      	adds	r3, #97	; 0x61
 8002e16:	2203      	movs	r2, #3
 8002e18:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fa0c 	bl	8006242 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	461a      	mov	r2, r3
 8002e38:	2310      	movs	r3, #16
 8002e3a:	6093      	str	r3, [r2, #8]
}
 8002e3c:	bf00      	nop
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11a      	bne.n	8002eaa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	461a      	mov	r2, r3
 8002e82:	2304      	movs	r3, #4
 8002e84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3361      	adds	r3, #97	; 0x61
 8002e94:	2206      	movs	r2, #6
 8002e96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 f9cd 	bl	8006242 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002ea8:	e331      	b.n	800350e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d12e      	bne.n	8002f1e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2320      	movs	r3, #32
 8002ed0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	333d      	adds	r3, #61	; 0x3d
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	f040 8313 	bne.w	800350e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	333d      	adds	r3, #61	; 0x3d
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3360      	adds	r3, #96	; 0x60
 8002f08:	2202      	movs	r2, #2
 8002f0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 f993 	bl	8006242 <USB_HC_Halt>
}
 8002f1c:	e2f7      	b.n	800350e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f34:	d112      	bne.n	8002f5c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	461a      	mov	r2, r3
 8002f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 f974 	bl	8006242 <USB_HC_Halt>
}
 8002f5a:	e2d8      	b.n	800350e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d140      	bne.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	335c      	adds	r3, #92	; 0x5c
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d111      	bne.n	8002fbe <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	333d      	adds	r3, #61	; 0x3d
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2340      	movs	r3, #64	; 0x40
 8002fbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2301      	movs	r3, #1
 8002fce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3361      	adds	r3, #97	; 0x61
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f003 f928 	bl	8006242 <USB_HC_Halt>
}
 8002ff2:	e28c      	b.n	800350e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d12c      	bne.n	8003064 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3361      	adds	r3, #97	; 0x61
 8003018:	2204      	movs	r2, #4
 800301a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	333d      	adds	r3, #61	; 0x3d
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	335c      	adds	r3, #92	; 0x5c
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f003 f8f9 	bl	8006242 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	461a      	mov	r2, r3
 800305e:	2340      	movs	r3, #64	; 0x40
 8003060:	6093      	str	r3, [r2, #8]
}
 8003062:	e254      	b.n	800350e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b08      	cmp	r3, #8
 8003078:	d11a      	bne.n	80030b0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	4413      	add	r3, r2
 8003082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003086:	461a      	mov	r2, r3
 8003088:	2308      	movs	r3, #8
 800308a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3361      	adds	r3, #97	; 0x61
 800309a:	2205      	movs	r2, #5
 800309c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 f8ca 	bl	8006242 <USB_HC_Halt>
}
 80030ae:	e22e      	b.n	800350e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d140      	bne.n	8003148 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	335c      	adds	r3, #92	; 0x5c
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3361      	adds	r3, #97	; 0x61
 80030e6:	2203      	movs	r2, #3
 80030e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	333d      	adds	r3, #61	; 0x3d
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d112      	bne.n	8003124 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	212c      	movs	r1, #44	; 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	333c      	adds	r3, #60	; 0x3c
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d108      	bne.n	8003124 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	333d      	adds	r3, #61	; 0x3d
 8003120:	2201      	movs	r2, #1
 8003122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f003 f887 	bl	8006242 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4413      	add	r3, r2
 800313c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003140:	461a      	mov	r2, r3
 8003142:	2310      	movs	r3, #16
 8003144:	6093      	str	r3, [r2, #8]
}
 8003146:	e1e2      	b.n	800350e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b80      	cmp	r3, #128	; 0x80
 800315c:	d164      	bne.n	8003228 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d111      	bne.n	800318a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	212c      	movs	r1, #44	; 0x2c
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	3361      	adds	r3, #97	; 0x61
 8003174:	2206      	movs	r2, #6
 8003176:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f003 f85d 	bl	8006242 <USB_HC_Halt>
 8003188:	e044      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	335c      	adds	r3, #92	; 0x5c
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	202c      	movs	r0, #44	; 0x2c
 80031a2:	fb00 f303 	mul.w	r3, r0, r3
 80031a6:	440b      	add	r3, r1
 80031a8:	335c      	adds	r3, #92	; 0x5c
 80031aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	335c      	adds	r3, #92	; 0x5c
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d920      	bls.n	8003202 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	335c      	adds	r3, #92	; 0x5c
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	3360      	adds	r3, #96	; 0x60
 80031e0:	2204      	movs	r2, #4
 80031e2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	b2d9      	uxtb	r1, r3
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	202c      	movs	r0, #44	; 0x2c
 80031ee:	fb00 f303 	mul.w	r3, r0, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3360      	adds	r3, #96	; 0x60
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f005 fac4 	bl	8008788 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003200:	e008      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3360      	adds	r3, #96	; 0x60
 8003210:	2202      	movs	r2, #2
 8003212:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	461a      	mov	r2, r3
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	6093      	str	r3, [r2, #8]
}
 8003226:	e172      	b.n	800350e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	d11b      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3361      	adds	r3, #97	; 0x61
 800324e:	2208      	movs	r2, #8
 8003250:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f002 fff0 	bl	8006242 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	4413      	add	r3, r2
 800326a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326e:	461a      	mov	r2, r3
 8003270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003274:	6093      	str	r3, [r2, #8]
}
 8003276:	e14a      	b.n	800350e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	f040 813f 	bne.w	800350e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3361      	adds	r3, #97	; 0x61
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d17d      	bne.n	80033a0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3360      	adds	r3, #96	; 0x60
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	333f      	adds	r3, #63	; 0x3f
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d00a      	beq.n	80032e0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	333f      	adds	r3, #63	; 0x3f
 80032d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032da:	2b03      	cmp	r3, #3
 80032dc:	f040 8100 	bne.w	80034e0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d113      	bne.n	8003310 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3355      	adds	r3, #85	; 0x55
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	f083 0301 	eor.w	r3, r3, #1
 80032fc:	b2d8      	uxtb	r0, r3
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	3355      	adds	r3, #85	; 0x55
 800330c:	4602      	mov	r2, r0
 800330e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b01      	cmp	r3, #1
 8003316:	f040 80e3 	bne.w	80034e0 <HCD_HC_OUT_IRQHandler+0x69c>
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	334c      	adds	r3, #76	; 0x4c
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80d8 	beq.w	80034e0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	334c      	adds	r3, #76	; 0x4c
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	202c      	movs	r0, #44	; 0x2c
 8003346:	fb00 f202 	mul.w	r2, r0, r2
 800334a:	440a      	add	r2, r1
 800334c:	3240      	adds	r2, #64	; 0x40
 800334e:	8812      	ldrh	r2, [r2, #0]
 8003350:	4413      	add	r3, r2
 8003352:	3b01      	subs	r3, #1
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	202c      	movs	r0, #44	; 0x2c
 800335a:	fb00 f202 	mul.w	r2, r0, r2
 800335e:	440a      	add	r2, r1
 8003360:	3240      	adds	r2, #64	; 0x40
 8003362:	8812      	ldrh	r2, [r2, #0]
 8003364:	fbb3 f3f2 	udiv	r3, r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80b5 	beq.w	80034e0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3355      	adds	r3, #85	; 0x55
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	f083 0301 	eor.w	r3, r3, #1
 800338a:	b2d8      	uxtb	r0, r3
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	212c      	movs	r1, #44	; 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	3355      	adds	r3, #85	; 0x55
 800339a:	4602      	mov	r2, r0
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e09f      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	212c      	movs	r1, #44	; 0x2c
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	3361      	adds	r3, #97	; 0x61
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d109      	bne.n	80033c8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3360      	adds	r3, #96	; 0x60
 80033c2:	2202      	movs	r2, #2
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e08b      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	212c      	movs	r1, #44	; 0x2c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	3361      	adds	r3, #97	; 0x61
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d109      	bne.n	80033f0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3360      	adds	r3, #96	; 0x60
 80033ea:	2202      	movs	r2, #2
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	e077      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3361      	adds	r3, #97	; 0x61
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b05      	cmp	r3, #5
 8003402:	d109      	bne.n	8003418 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3360      	adds	r3, #96	; 0x60
 8003412:	2205      	movs	r2, #5
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	e063      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	3361      	adds	r3, #97	; 0x61
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b06      	cmp	r3, #6
 800342a:	d009      	beq.n	8003440 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	212c      	movs	r1, #44	; 0x2c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	3361      	adds	r3, #97	; 0x61
 800343a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800343c:	2b08      	cmp	r3, #8
 800343e:	d14f      	bne.n	80034e0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	335c      	adds	r3, #92	; 0x5c
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	202c      	movs	r0, #44	; 0x2c
 8003458:	fb00 f303 	mul.w	r3, r0, r3
 800345c:	440b      	add	r3, r1
 800345e:	335c      	adds	r3, #92	; 0x5c
 8003460:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	335c      	adds	r3, #92	; 0x5c
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d912      	bls.n	800349c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	335c      	adds	r3, #92	; 0x5c
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3360      	adds	r3, #96	; 0x60
 8003496:	2204      	movs	r2, #4
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	e021      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	3360      	adds	r3, #96	; 0x60
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034c4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034cc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034da:	461a      	mov	r2, r3
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ec:	461a      	mov	r2, r3
 80034ee:	2302      	movs	r3, #2
 80034f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	b2d9      	uxtb	r1, r3
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	202c      	movs	r0, #44	; 0x2c
 80034fc:	fb00 f303 	mul.w	r3, r0, r3
 8003500:	4413      	add	r3, r2
 8003502:	3360      	adds	r3, #96	; 0x60
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f005 f93d 	bl	8008788 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800350e:	bf00      	nop
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b08a      	sub	sp, #40	; 0x28
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	0c5b      	lsrs	r3, r3, #17
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800354a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d004      	beq.n	800355c <HCD_RXQLVL_IRQHandler+0x46>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b05      	cmp	r3, #5
 8003556:	f000 80a9 	beq.w	80036ac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800355a:	e0aa      	b.n	80036b2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80a6 	beq.w	80036b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	3344      	adds	r3, #68	; 0x44
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 809b 	beq.w	80036b0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	212c      	movs	r1, #44	; 0x2c
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	3350      	adds	r3, #80	; 0x50
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	441a      	add	r2, r3
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	202c      	movs	r0, #44	; 0x2c
 8003594:	fb00 f303 	mul.w	r3, r0, r3
 8003598:	440b      	add	r3, r1
 800359a:	334c      	adds	r3, #76	; 0x4c
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d87a      	bhi.n	8003698 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	3344      	adds	r3, #68	; 0x44
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	b292      	uxth	r2, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f002 f998 	bl	80058f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3344      	adds	r3, #68	; 0x44
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	441a      	add	r2, r3
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	202c      	movs	r0, #44	; 0x2c
 80035da:	fb00 f303 	mul.w	r3, r0, r3
 80035de:	440b      	add	r3, r1
 80035e0:	3344      	adds	r3, #68	; 0x44
 80035e2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	3350      	adds	r3, #80	; 0x50
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	441a      	add	r2, r3
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	202c      	movs	r0, #44	; 0x2c
 80035fe:	fb00 f303 	mul.w	r3, r0, r3
 8003602:	440b      	add	r3, r1
 8003604:	3350      	adds	r3, #80	; 0x50
 8003606:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	0cdb      	lsrs	r3, r3, #19
 8003618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800361c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	3340      	adds	r3, #64	; 0x40
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4293      	cmp	r3, r2
 8003634:	d13c      	bne.n	80036b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d039      	beq.n	80036b0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003652:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800365a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	4413      	add	r3, r2
 8003664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003668:	461a      	mov	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	3354      	adds	r3, #84	; 0x54
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	f083 0301 	eor.w	r3, r3, #1
 8003682:	b2d8      	uxtb	r0, r3
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	212c      	movs	r1, #44	; 0x2c
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	3354      	adds	r3, #84	; 0x54
 8003692:	4602      	mov	r2, r0
 8003694:	701a      	strb	r2, [r3, #0]
      break;
 8003696:	e00b      	b.n	80036b0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	212c      	movs	r1, #44	; 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	3360      	adds	r3, #96	; 0x60
 80036a6:	2204      	movs	r2, #4
 80036a8:	701a      	strb	r2, [r3, #0]
      break;
 80036aa:	e001      	b.n	80036b0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80036ac:	bf00      	nop
 80036ae:	e000      	b.n	80036b2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80036b0:	bf00      	nop
  }
}
 80036b2:	bf00      	nop
 80036b4:	3728      	adds	r7, #40	; 0x28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80036e6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d10b      	bne.n	800370a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f005 f827 	bl	8008750 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b08      	cmp	r3, #8
 8003712:	d132      	bne.n	800377a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f043 0308 	orr.w	r3, r3, #8
 800371a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b04      	cmp	r3, #4
 8003724:	d126      	bne.n	8003774 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d113      	bne.n	8003756 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003734:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003738:	d106      	bne.n	8003748 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2102      	movs	r1, #2
 8003740:	4618      	mov	r0, r3
 8003742:	f002 fa43 	bl	8005bcc <USB_InitFSLSPClkSel>
 8003746:	e011      	b.n	800376c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2101      	movs	r1, #1
 800374e:	4618      	mov	r0, r3
 8003750:	f002 fa3c 	bl	8005bcc <USB_InitFSLSPClkSel>
 8003754:	e00a      	b.n	800376c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d106      	bne.n	800376c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003764:	461a      	mov	r2, r3
 8003766:	f64e 2360 	movw	r3, #60000	; 0xea60
 800376a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f005 f819 	bl	80087a4 <HAL_HCD_PortEnabled_Callback>
 8003772:	e002      	b.n	800377a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f005 f823 	bl	80087c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b20      	cmp	r3, #32
 8003782:	d103      	bne.n	800378c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f043 0320 	orr.w	r3, r3, #32
 800378a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003792:	461a      	mov	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	6013      	str	r3, [r2, #0]
}
 8003798:	bf00      	nop
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e12b      	b.n	8003a0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fa04 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	; 0x24
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003802:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003804:	f001 fa20 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8003808:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4a81      	ldr	r2, [pc, #516]	; (8003a14 <HAL_I2C_Init+0x274>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d807      	bhi.n	8003824 <HAL_I2C_Init+0x84>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4a80      	ldr	r2, [pc, #512]	; (8003a18 <HAL_I2C_Init+0x278>)
 8003818:	4293      	cmp	r3, r2
 800381a:	bf94      	ite	ls
 800381c:	2301      	movls	r3, #1
 800381e:	2300      	movhi	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e006      	b.n	8003832 <HAL_I2C_Init+0x92>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a7d      	ldr	r2, [pc, #500]	; (8003a1c <HAL_I2C_Init+0x27c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	bf94      	ite	ls
 800382c:	2301      	movls	r3, #1
 800382e:	2300      	movhi	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0e7      	b.n	8003a0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4a78      	ldr	r2, [pc, #480]	; (8003a20 <HAL_I2C_Init+0x280>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	0c9b      	lsrs	r3, r3, #18
 8003844:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4a6a      	ldr	r2, [pc, #424]	; (8003a14 <HAL_I2C_Init+0x274>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d802      	bhi.n	8003874 <HAL_I2C_Init+0xd4>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	3301      	adds	r3, #1
 8003872:	e009      	b.n	8003888 <HAL_I2C_Init+0xe8>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	4a69      	ldr	r2, [pc, #420]	; (8003a24 <HAL_I2C_Init+0x284>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	099b      	lsrs	r3, r3, #6
 8003886:	3301      	adds	r3, #1
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	430b      	orrs	r3, r1
 800388e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800389a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	495c      	ldr	r1, [pc, #368]	; (8003a14 <HAL_I2C_Init+0x274>)
 80038a4:	428b      	cmp	r3, r1
 80038a6:	d819      	bhi.n	80038dc <HAL_I2C_Init+0x13c>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1e59      	subs	r1, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038b6:	1c59      	adds	r1, r3, #1
 80038b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038bc:	400b      	ands	r3, r1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_I2C_Init+0x138>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1e59      	subs	r1, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d6:	e051      	b.n	800397c <HAL_I2C_Init+0x1dc>
 80038d8:	2304      	movs	r3, #4
 80038da:	e04f      	b.n	800397c <HAL_I2C_Init+0x1dc>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d111      	bne.n	8003908 <HAL_I2C_Init+0x168>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1e58      	subs	r0, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6859      	ldr	r1, [r3, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	440b      	add	r3, r1
 80038f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	e012      	b.n	800392e <HAL_I2C_Init+0x18e>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1e58      	subs	r0, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	0099      	lsls	r1, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	fbb0 f3f3 	udiv	r3, r0, r3
 800391e:	3301      	adds	r3, #1
 8003920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003924:	2b00      	cmp	r3, #0
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_I2C_Init+0x196>
 8003932:	2301      	movs	r3, #1
 8003934:	e022      	b.n	800397c <HAL_I2C_Init+0x1dc>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10e      	bne.n	800395c <HAL_I2C_Init+0x1bc>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1e58      	subs	r0, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	460b      	mov	r3, r1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	440b      	add	r3, r1
 800394c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003950:	3301      	adds	r3, #1
 8003952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395a:	e00f      	b.n	800397c <HAL_I2C_Init+0x1dc>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1e58      	subs	r0, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	0099      	lsls	r1, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003972:	3301      	adds	r3, #1
 8003974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	6809      	ldr	r1, [r1, #0]
 8003980:	4313      	orrs	r3, r2
 8003982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6911      	ldr	r1, [r2, #16]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68d2      	ldr	r2, [r2, #12]
 80039b6:	4311      	orrs	r1, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	430b      	orrs	r3, r1
 80039be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	000186a0 	.word	0x000186a0
 8003a18:	001e847f 	.word	0x001e847f
 8003a1c:	003d08ff 	.word	0x003d08ff
 8003a20:	431bde83 	.word	0x431bde83
 8003a24:	10624dd3 	.word	0x10624dd3

08003a28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e128      	b.n	8003c8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a90      	ldr	r2, [pc, #576]	; (8003c94 <HAL_I2S_Init+0x26c>)
 8003a52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fd f905 	bl	8000c64 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a70:	f023 030f 	bic.w	r3, r3, #15
 8003a74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d060      	beq.n	8003b48 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a8e:	2310      	movs	r3, #16
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e001      	b.n	8003a98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a94:	2320      	movs	r3, #32
 8003a96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d802      	bhi.n	8003aa6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	f001 f9d0 	bl	8004e4c <HAL_RCCEx_GetPeriphCLKFreq>
 8003aac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab6:	d125      	bne.n	8003b04 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	3305      	adds	r3, #5
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	e01f      	b.n	8003b22 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	461a      	mov	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	3305      	adds	r3, #5
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	e00e      	b.n	8003b22 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	461a      	mov	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	3305      	adds	r3, #5
 8003b20:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4a5c      	ldr	r2, [pc, #368]	; (8003c98 <HAL_I2S_Init+0x270>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	08db      	lsrs	r3, r3, #3
 8003b2c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e003      	b.n	8003b50 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d902      	bls.n	8003b5c <HAL_I2S_Init+0x134>
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	2bff      	cmp	r3, #255	; 0xff
 8003b5a:	d907      	bls.n	8003b6c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	f043 0210 	orr.w	r2, r3, #16
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e08f      	b.n	8003c8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	ea42 0103 	orr.w	r1, r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b8a:	f023 030f 	bic.w	r3, r3, #15
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6851      	ldr	r1, [r2, #4]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6892      	ldr	r2, [r2, #8]
 8003b96:	4311      	orrs	r1, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68d2      	ldr	r2, [r2, #12]
 8003b9c:	4311      	orrs	r1, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6992      	ldr	r2, [r2, #24]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d161      	bne.n	8003c7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a38      	ldr	r2, [pc, #224]	; (8003c9c <HAL_I2S_Init+0x274>)
 8003bbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a37      	ldr	r2, [pc, #220]	; (8003ca0 <HAL_I2S_Init+0x278>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2S_Init+0x1a4>
 8003bc8:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <HAL_I2S_Init+0x27c>)
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_Init+0x1a8>
 8003bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	4932      	ldr	r1, [pc, #200]	; (8003ca0 <HAL_I2S_Init+0x278>)
 8003bd8:	428a      	cmp	r2, r1
 8003bda:	d101      	bne.n	8003be0 <HAL_I2S_Init+0x1b8>
 8003bdc:	4a31      	ldr	r2, [pc, #196]	; (8003ca4 <HAL_I2S_Init+0x27c>)
 8003bde:	e001      	b.n	8003be4 <HAL_I2S_Init+0x1bc>
 8003be0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003be4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003be8:	f023 030f 	bic.w	r3, r3, #15
 8003bec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2b      	ldr	r2, [pc, #172]	; (8003ca0 <HAL_I2S_Init+0x278>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_I2S_Init+0x1d4>
 8003bf8:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <HAL_I2S_Init+0x27c>)
 8003bfa:	e001      	b.n	8003c00 <HAL_I2S_Init+0x1d8>
 8003bfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c00:	2202      	movs	r2, #2
 8003c02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a25      	ldr	r2, [pc, #148]	; (8003ca0 <HAL_I2S_Init+0x278>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d101      	bne.n	8003c12 <HAL_I2S_Init+0x1ea>
 8003c0e:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <HAL_I2S_Init+0x27c>)
 8003c10:	e001      	b.n	8003c16 <HAL_I2S_Init+0x1ee>
 8003c12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c22:	d003      	beq.n	8003c2c <HAL_I2S_Init+0x204>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	e001      	b.n	8003c38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c42:	4313      	orrs	r3, r2
 8003c44:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c56:	4313      	orrs	r3, r2
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	897b      	ldrh	r3, [r7, #10]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <HAL_I2S_Init+0x278>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d101      	bne.n	8003c74 <HAL_I2S_Init+0x24c>
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_I2S_Init+0x27c>)
 8003c72:	e001      	b.n	8003c78 <HAL_I2S_Init+0x250>
 8003c74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c78:	897a      	ldrh	r2, [r7, #10]
 8003c7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	08003d9f 	.word	0x08003d9f
 8003c98:	cccccccd 	.word	0xcccccccd
 8003c9c:	08003eb5 	.word	0x08003eb5
 8003ca0:	40003800 	.word	0x40003800
 8003ca4:	40003400 	.word	0x40003400

08003ca8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	881a      	ldrh	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	1c9a      	adds	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10e      	bne.n	8003d38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ffb8 	bl	8003ca8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	b292      	uxth	r2, r2
 8003d54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	1c9a      	adds	r2, r3, #2
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10e      	bne.n	8003d96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff93 	bl	8003cbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d13a      	bne.n	8003e30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d109      	bne.n	8003dd8 <I2S_IRQHandler+0x3a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d102      	bne.n	8003dd8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ffb4 	bl	8003d40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d126      	bne.n	8003e30 <I2S_IRQHandler+0x92>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d11f      	bne.n	8003e30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dfe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f043 0202 	orr.w	r2, r3, #2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ff50 	bl	8003cd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d136      	bne.n	8003eaa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d109      	bne.n	8003e5a <I2S_IRQHandler+0xbc>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d102      	bne.n	8003e5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff45 	bl	8003ce4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d122      	bne.n	8003eaa <I2S_IRQHandler+0x10c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d11b      	bne.n	8003eaa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	f043 0204 	orr.w	r2, r3, #4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff ff13 	bl	8003cd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eaa:	bf00      	nop
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a92      	ldr	r2, [pc, #584]	; (8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ece:	4b92      	ldr	r3, [pc, #584]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed0:	e001      	b.n	8003ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ed2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a8b      	ldr	r2, [pc, #556]	; (8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d101      	bne.n	8003ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003eec:	4b8a      	ldr	r3, [pc, #552]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eee:	e001      	b.n	8003ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ef0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f00:	d004      	beq.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 8099 	bne.w	800403e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d107      	bne.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f925 	bl	8004170 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d107      	bne.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f9c8 	bl	80042d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b40      	cmp	r3, #64	; 0x40
 8003f48:	d13a      	bne.n	8003fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d035      	beq.n	8003fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a6e      	ldr	r2, [pc, #440]	; (8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f5e:	4b6e      	ldr	r3, [pc, #440]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4969      	ldr	r1, [pc, #420]	; (8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f6e:	428b      	cmp	r3, r1
 8003f70:	d101      	bne.n	8003f76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f72:	4b69      	ldr	r3, [pc, #420]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f74:	e001      	b.n	8003f7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	f043 0202 	orr.w	r2, r3, #2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fe88 	bl	8003cd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	f040 80c3 	bne.w	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80bd 	beq.w	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fe6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a49      	ldr	r2, [pc, #292]	; (8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ff2:	4b49      	ldr	r3, [pc, #292]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff4:	e001      	b.n	8003ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ff6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4944      	ldr	r1, [pc, #272]	; (8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004002:	428b      	cmp	r3, r1
 8004004:	d101      	bne.n	800400a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004006:	4b44      	ldr	r3, [pc, #272]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004008:	e001      	b.n	800400e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800400a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800400e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004012:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004014:	2300      	movs	r3, #0
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f043 0204 	orr.w	r2, r3, #4
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fe4a 	bl	8003cd0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800403c:	e089      	b.n	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d107      	bne.n	8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f8be 	bl	80041d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d107      	bne.n	8004072 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f8fd 	bl	800426c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	d12f      	bne.n	80040dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d02a      	beq.n	80040dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004094:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80040a0:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040a2:	e001      	b.n	80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80040a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4919      	ldr	r1, [pc, #100]	; (8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b0:	428b      	cmp	r3, r1
 80040b2:	d101      	bne.n	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040b4:	4b18      	ldr	r3, [pc, #96]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040b6:	e001      	b.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	f043 0202 	orr.w	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fdfa 	bl	8003cd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d136      	bne.n	8004154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d031      	beq.n	8004154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a07      	ldr	r2, [pc, #28]	; (8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040fc:	e001      	b.n	8004102 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4902      	ldr	r1, [pc, #8]	; (8004114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800410a:	428b      	cmp	r3, r1
 800410c:	d106      	bne.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800410e:	4b02      	ldr	r3, [pc, #8]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004110:	e006      	b.n	8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004112:	bf00      	nop
 8004114:	40003800 	.word	0x40003800
 8004118:	40003400 	.word	0x40003400
 800411c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004120:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004124:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004134:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	f043 0204 	orr.w	r2, r3, #4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fdc0 	bl	8003cd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004150:	e000      	b.n	8004154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004152:	bf00      	nop
}
 8004154:	bf00      	nop
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	1c99      	adds	r1, r3, #2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6251      	str	r1, [r2, #36]	; 0x24
 8004182:	881a      	ldrh	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d113      	bne.n	80041ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ffc9 	bl	800415c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	1c99      	adds	r1, r3, #2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6251      	str	r1, [r2, #36]	; 0x24
 80041e6:	8819      	ldrh	r1, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <I2SEx_TxISR_I2SExt+0x90>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <I2SEx_TxISR_I2SExt+0x22>
 80041f2:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <I2SEx_TxISR_I2SExt+0x94>)
 80041f4:	e001      	b.n	80041fa <I2SEx_TxISR_I2SExt+0x26>
 80041f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041fa:	460a      	mov	r2, r1
 80041fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d121      	bne.n	800425a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a12      	ldr	r2, [pc, #72]	; (8004264 <I2SEx_TxISR_I2SExt+0x90>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d101      	bne.n	8004224 <I2SEx_TxISR_I2SExt+0x50>
 8004220:	4b11      	ldr	r3, [pc, #68]	; (8004268 <I2SEx_TxISR_I2SExt+0x94>)
 8004222:	e001      	b.n	8004228 <I2SEx_TxISR_I2SExt+0x54>
 8004224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	490d      	ldr	r1, [pc, #52]	; (8004264 <I2SEx_TxISR_I2SExt+0x90>)
 8004230:	428b      	cmp	r3, r1
 8004232:	d101      	bne.n	8004238 <I2SEx_TxISR_I2SExt+0x64>
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <I2SEx_TxISR_I2SExt+0x94>)
 8004236:	e001      	b.n	800423c <I2SEx_TxISR_I2SExt+0x68>
 8004238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800423c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004240:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d106      	bne.n	800425a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff81 	bl	800415c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40003800 	.word	0x40003800
 8004268:	40003400 	.word	0x40003400

0800426c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68d8      	ldr	r0, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	1c99      	adds	r1, r3, #2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004284:	b282      	uxth	r2, r0
 8004286:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d113      	bne.n	80042c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ff4a 	bl	800415c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a20      	ldr	r2, [pc, #128]	; (8004360 <I2SEx_RxISR_I2SExt+0x90>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d101      	bne.n	80042e6 <I2SEx_RxISR_I2SExt+0x16>
 80042e2:	4b20      	ldr	r3, [pc, #128]	; (8004364 <I2SEx_RxISR_I2SExt+0x94>)
 80042e4:	e001      	b.n	80042ea <I2SEx_RxISR_I2SExt+0x1a>
 80042e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ea:	68d8      	ldr	r0, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	1c99      	adds	r1, r3, #2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80042f6:	b282      	uxth	r2, r0
 80042f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d121      	bne.n	8004356 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <I2SEx_RxISR_I2SExt+0x90>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d101      	bne.n	8004320 <I2SEx_RxISR_I2SExt+0x50>
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <I2SEx_RxISR_I2SExt+0x94>)
 800431e:	e001      	b.n	8004324 <I2SEx_RxISR_I2SExt+0x54>
 8004320:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	490d      	ldr	r1, [pc, #52]	; (8004360 <I2SEx_RxISR_I2SExt+0x90>)
 800432c:	428b      	cmp	r3, r1
 800432e:	d101      	bne.n	8004334 <I2SEx_RxISR_I2SExt+0x64>
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <I2SEx_RxISR_I2SExt+0x94>)
 8004332:	e001      	b.n	8004338 <I2SEx_RxISR_I2SExt+0x68>
 8004334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004338:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800433c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ff03 	bl	800415c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40003800 	.word	0x40003800
 8004364:	40003400 	.word	0x40003400

08004368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e267      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d075      	beq.n	8004472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004386:	4b88      	ldr	r3, [pc, #544]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b04      	cmp	r3, #4
 8004390:	d00c      	beq.n	80043ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004392:	4b85      	ldr	r3, [pc, #532]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800439a:	2b08      	cmp	r3, #8
 800439c:	d112      	bne.n	80043c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439e:	4b82      	ldr	r3, [pc, #520]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043aa:	d10b      	bne.n	80043c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	4b7e      	ldr	r3, [pc, #504]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d05b      	beq.n	8004470 <HAL_RCC_OscConfig+0x108>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d157      	bne.n	8004470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e242      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d106      	bne.n	80043dc <HAL_RCC_OscConfig+0x74>
 80043ce:	4b76      	ldr	r3, [pc, #472]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a75      	ldr	r2, [pc, #468]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e01d      	b.n	8004418 <HAL_RCC_OscConfig+0xb0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x98>
 80043e6:	4b70      	ldr	r3, [pc, #448]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6f      	ldr	r2, [pc, #444]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b6d      	ldr	r3, [pc, #436]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6c      	ldr	r2, [pc, #432]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0xb0>
 8004400:	4b69      	ldr	r3, [pc, #420]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a68      	ldr	r2, [pc, #416]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a65      	ldr	r2, [pc, #404]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fc fe5e 	bl	80010e0 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004428:	f7fc fe5a 	bl	80010e0 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e207      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443a:	4b5b      	ldr	r3, [pc, #364]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0xc0>
 8004446:	e014      	b.n	8004472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7fc fe4a 	bl	80010e0 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004450:	f7fc fe46 	bl	80010e0 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	; 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e1f3      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004462:	4b51      	ldr	r3, [pc, #324]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0xe8>
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d063      	beq.n	8004546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800447e:	4b4a      	ldr	r3, [pc, #296]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448a:	4b47      	ldr	r3, [pc, #284]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004492:	2b08      	cmp	r3, #8
 8004494:	d11c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004496:	4b44      	ldr	r3, [pc, #272]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d116      	bne.n	80044d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_RCC_OscConfig+0x152>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d001      	beq.n	80044ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e1c7      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ba:	4b3b      	ldr	r3, [pc, #236]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4937      	ldr	r1, [pc, #220]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ce:	e03a      	b.n	8004546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d020      	beq.n	800451a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d8:	4b34      	ldr	r3, [pc, #208]	; (80045ac <HAL_RCC_OscConfig+0x244>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fc fdff 	bl	80010e0 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e6:	f7fc fdfb 	bl	80010e0 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e1a8      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f8:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004504:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4925      	ldr	r1, [pc, #148]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004514:	4313      	orrs	r3, r2
 8004516:	600b      	str	r3, [r1, #0]
 8004518:	e015      	b.n	8004546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451a:	4b24      	ldr	r3, [pc, #144]	; (80045ac <HAL_RCC_OscConfig+0x244>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fc fdde 	bl	80010e0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004528:	f7fc fdda 	bl	80010e0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e187      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453a:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d036      	beq.n	80045c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <HAL_RCC_OscConfig+0x248>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004560:	f7fc fdbe 	bl	80010e0 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004568:	f7fc fdba 	bl	80010e0 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e167      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 800457c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x200>
 8004586:	e01b      	b.n	80045c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <HAL_RCC_OscConfig+0x248>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7fc fda7 	bl	80010e0 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004594:	e00e      	b.n	80045b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004596:	f7fc fda3 	bl	80010e0 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d907      	bls.n	80045b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e150      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
 80045a8:	40023800 	.word	0x40023800
 80045ac:	42470000 	.word	0x42470000
 80045b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b4:	4b88      	ldr	r3, [pc, #544]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80045b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1ea      	bne.n	8004596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8097 	beq.w	80046fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d2:	4b81      	ldr	r3, [pc, #516]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10f      	bne.n	80045fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	4b7d      	ldr	r3, [pc, #500]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	4a7c      	ldr	r2, [pc, #496]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80045e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ec:	6413      	str	r3, [r2, #64]	; 0x40
 80045ee:	4b7a      	ldr	r3, [pc, #488]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fe:	4b77      	ldr	r3, [pc, #476]	; (80047dc <HAL_RCC_OscConfig+0x474>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d118      	bne.n	800463c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800460a:	4b74      	ldr	r3, [pc, #464]	; (80047dc <HAL_RCC_OscConfig+0x474>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a73      	ldr	r2, [pc, #460]	; (80047dc <HAL_RCC_OscConfig+0x474>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004616:	f7fc fd63 	bl	80010e0 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461e:	f7fc fd5f 	bl	80010e0 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e10c      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	4b6a      	ldr	r3, [pc, #424]	; (80047dc <HAL_RCC_OscConfig+0x474>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d106      	bne.n	8004652 <HAL_RCC_OscConfig+0x2ea>
 8004644:	4b64      	ldr	r3, [pc, #400]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	4a63      	ldr	r2, [pc, #396]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6713      	str	r3, [r2, #112]	; 0x70
 8004650:	e01c      	b.n	800468c <HAL_RCC_OscConfig+0x324>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b05      	cmp	r3, #5
 8004658:	d10c      	bne.n	8004674 <HAL_RCC_OscConfig+0x30c>
 800465a:	4b5f      	ldr	r3, [pc, #380]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a5e      	ldr	r2, [pc, #376]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
 8004666:	4b5c      	ldr	r3, [pc, #368]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a5b      	ldr	r2, [pc, #364]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
 8004672:	e00b      	b.n	800468c <HAL_RCC_OscConfig+0x324>
 8004674:	4b58      	ldr	r3, [pc, #352]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a57      	ldr	r2, [pc, #348]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	4b55      	ldr	r3, [pc, #340]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a54      	ldr	r2, [pc, #336]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004686:	f023 0304 	bic.w	r3, r3, #4
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d015      	beq.n	80046c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fc fd24 	bl	80010e0 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800469c:	f7fc fd20 	bl	80010e0 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e0cb      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b2:	4b49      	ldr	r3, [pc, #292]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0ee      	beq.n	800469c <HAL_RCC_OscConfig+0x334>
 80046be:	e014      	b.n	80046ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c0:	f7fc fd0e 	bl	80010e0 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c6:	e00a      	b.n	80046de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c8:	f7fc fd0a 	bl	80010e0 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e0b5      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046de:	4b3e      	ldr	r3, [pc, #248]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1ee      	bne.n	80046c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d105      	bne.n	80046fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f0:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	4a38      	ldr	r2, [pc, #224]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80046f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80a1 	beq.w	8004848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004706:	4b34      	ldr	r3, [pc, #208]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b08      	cmp	r3, #8
 8004710:	d05c      	beq.n	80047cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d141      	bne.n	800479e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471a:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <HAL_RCC_OscConfig+0x478>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fc fcde 	bl	80010e0 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004728:	f7fc fcda 	bl	80010e0 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e087      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473a:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69da      	ldr	r2, [r3, #28]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	019b      	lsls	r3, r3, #6
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	3b01      	subs	r3, #1
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	491b      	ldr	r1, [pc, #108]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800476c:	4313      	orrs	r3, r2
 800476e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004770:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <HAL_RCC_OscConfig+0x478>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004776:	f7fc fcb3 	bl	80010e0 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800477e:	f7fc fcaf 	bl	80010e0 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e05c      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f0      	beq.n	800477e <HAL_RCC_OscConfig+0x416>
 800479c:	e054      	b.n	8004848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479e:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <HAL_RCC_OscConfig+0x478>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fc fc9c 	bl	80010e0 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ac:	f7fc fc98 	bl	80010e0 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e045      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x444>
 80047ca:	e03d      	b.n	8004848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d107      	bne.n	80047e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e038      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40007000 	.word	0x40007000
 80047e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_RCC_OscConfig+0x4ec>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d028      	beq.n	8004844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d121      	bne.n	8004844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d11a      	bne.n	8004844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004814:	4013      	ands	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800481a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800481c:	4293      	cmp	r3, r2
 800481e:	d111      	bne.n	8004844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	3b01      	subs	r3, #1
 800482e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d107      	bne.n	8004844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800

08004858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0cc      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800486c:	4b68      	ldr	r3, [pc, #416]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d90c      	bls.n	8004894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b65      	ldr	r3, [pc, #404]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b63      	ldr	r3, [pc, #396]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0b8      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d020      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ac:	4b59      	ldr	r3, [pc, #356]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4a58      	ldr	r2, [pc, #352]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c4:	4b53      	ldr	r3, [pc, #332]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a52      	ldr	r2, [pc, #328]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d0:	4b50      	ldr	r3, [pc, #320]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	494d      	ldr	r1, [pc, #308]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d044      	beq.n	8004978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	4b47      	ldr	r3, [pc, #284]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d119      	bne.n	8004936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e07f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d003      	beq.n	8004916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004912:	2b03      	cmp	r3, #3
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004916:	4b3f      	ldr	r3, [pc, #252]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e06f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004926:	4b3b      	ldr	r3, [pc, #236]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e067      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004936:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f023 0203 	bic.w	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	4934      	ldr	r1, [pc, #208]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	4313      	orrs	r3, r2
 8004946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004948:	f7fc fbca 	bl	80010e0 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494e:	e00a      	b.n	8004966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004950:	f7fc fbc6 	bl	80010e0 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e04f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004966:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 020c 	and.w	r2, r3, #12
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	429a      	cmp	r2, r3
 8004976:	d1eb      	bne.n	8004950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d20c      	bcs.n	80049a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e032      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ac:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4916      	ldr	r1, [pc, #88]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	490e      	ldr	r1, [pc, #56]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049de:	f000 f821 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80049e2:	4602      	mov	r2, r0
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	490a      	ldr	r1, [pc, #40]	; (8004a18 <HAL_RCC_ClockConfig+0x1c0>)
 80049f0:	5ccb      	ldrb	r3, [r1, r3]
 80049f2:	fa22 f303 	lsr.w	r3, r2, r3
 80049f6:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fc fb2a 	bl	8001058 <HAL_InitTick>

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023c00 	.word	0x40023c00
 8004a14:	40023800 	.word	0x40023800
 8004a18:	08008e60 	.word	0x08008e60
 8004a1c:	20000000 	.word	0x20000000
 8004a20:	20000004 	.word	0x20000004

08004a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a28:	b094      	sub	sp, #80	; 0x50
 8004a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a30:	2300      	movs	r3, #0
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	2300      	movs	r3, #0
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a3c:	4b79      	ldr	r3, [pc, #484]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d00d      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x40>
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	f200 80e1 	bhi.w	8004c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x34>
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d003      	beq.n	8004a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a56:	e0db      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a58:	4b73      	ldr	r3, [pc, #460]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a5c:	e0db      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a5e:	4b73      	ldr	r3, [pc, #460]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8004a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a62:	e0d8      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a64:	4b6f      	ldr	r3, [pc, #444]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a6e:	4b6d      	ldr	r3, [pc, #436]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d063      	beq.n	8004b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7a:	4b6a      	ldr	r3, [pc, #424]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	099b      	lsrs	r3, r3, #6
 8004a80:	2200      	movs	r2, #0
 8004a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a8e:	2300      	movs	r3, #0
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
 8004a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	f04f 0000 	mov.w	r0, #0
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	0159      	lsls	r1, r3, #5
 8004aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa8:	0150      	lsls	r0, r2, #5
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4621      	mov	r1, r4
 8004ab0:	1a51      	subs	r1, r2, r1
 8004ab2:	6139      	str	r1, [r7, #16]
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ac8:	4659      	mov	r1, fp
 8004aca:	018b      	lsls	r3, r1, #6
 8004acc:	4651      	mov	r1, sl
 8004ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ad2:	4651      	mov	r1, sl
 8004ad4:	018a      	lsls	r2, r1, #6
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8004adc:	4659      	mov	r1, fp
 8004ade:	eb63 0901 	sbc.w	r9, r3, r1
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004af6:	4690      	mov	r8, r2
 8004af8:	4699      	mov	r9, r3
 8004afa:	4623      	mov	r3, r4
 8004afc:	eb18 0303 	adds.w	r3, r8, r3
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	462b      	mov	r3, r5
 8004b04:	eb49 0303 	adc.w	r3, r9, r3
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b16:	4629      	mov	r1, r5
 8004b18:	024b      	lsls	r3, r1, #9
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b20:	4621      	mov	r1, r4
 8004b22:	024a      	lsls	r2, r1, #9
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b34:	f7fb fb4e 	bl	80001d4 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b40:	e058      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b42:	4b38      	ldr	r3, [pc, #224]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	2200      	movs	r2, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	2300      	movs	r3, #0
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
 8004b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	464b      	mov	r3, r9
 8004b60:	f04f 0000 	mov.w	r0, #0
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	0159      	lsls	r1, r3, #5
 8004b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b6e:	0150      	lsls	r0, r2, #5
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4641      	mov	r1, r8
 8004b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b94:	ebb2 040a 	subs.w	r4, r2, sl
 8004b98:	eb63 050b 	sbc.w	r5, r3, fp
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	00eb      	lsls	r3, r5, #3
 8004ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004baa:	00e2      	lsls	r2, r4, #3
 8004bac:	4614      	mov	r4, r2
 8004bae:	461d      	mov	r5, r3
 8004bb0:	4643      	mov	r3, r8
 8004bb2:	18e3      	adds	r3, r4, r3
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	eb45 0303 	adc.w	r3, r5, r3
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bca:	4629      	mov	r1, r5
 8004bcc:	028b      	lsls	r3, r1, #10
 8004bce:	4621      	mov	r1, r4
 8004bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	028a      	lsls	r2, r1, #10
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bde:	2200      	movs	r2, #0
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	61fa      	str	r2, [r7, #28]
 8004be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be8:	f7fb faf4 	bl	80001d4 <__aeabi_uldivmod>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	3301      	adds	r3, #1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0e:	e002      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3750      	adds	r7, #80	; 0x50
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800
 8004c28:	00f42400 	.word	0x00f42400
 8004c2c:	007a1200 	.word	0x007a1200

08004c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c36:	681b      	ldr	r3, [r3, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20000000 	.word	0x20000000

08004c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c4c:	f7ff fff0 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	0a9b      	lsrs	r3, r3, #10
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4903      	ldr	r1, [pc, #12]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	08008e70 	.word	0x08008e70

08004c70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d035      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c98:	4b67      	ldr	r3, [pc, #412]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c9e:	f7fc fa1f 	bl	80010e0 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ca6:	f7fc fa1b 	bl	80010e0 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e0ba      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cb8:	4b60      	ldr	r3, [pc, #384]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f0      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	019a      	lsls	r2, r3, #6
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	071b      	lsls	r3, r3, #28
 8004cd0:	495a      	ldr	r1, [pc, #360]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cd8:	4b57      	ldr	r3, [pc, #348]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cde:	f7fc f9ff 	bl	80010e0 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ce6:	f7fc f9fb 	bl	80010e0 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e09a      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf8:	4b50      	ldr	r3, [pc, #320]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8083 	beq.w	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	4b49      	ldr	r3, [pc, #292]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a48      	ldr	r2, [pc, #288]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
 8004d22:	4b46      	ldr	r3, [pc, #280]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d2e:	4b44      	ldr	r3, [pc, #272]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a43      	ldr	r2, [pc, #268]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d3a:	f7fc f9d1 	bl	80010e0 <HAL_GetTick>
 8004d3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d42:	f7fc f9cd 	bl	80010e0 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e06c      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d54:	4b3a      	ldr	r3, [pc, #232]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d60:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d02f      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d028      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d7e:	4b2f      	ldr	r3, [pc, #188]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d88:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d8e:	4b2d      	ldr	r3, [pc, #180]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d94:	4a29      	ldr	r2, [pc, #164]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d9a:	4b28      	ldr	r3, [pc, #160]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d114      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004da6:	f7fc f99b 	bl	80010e0 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dac:	e00a      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dae:	f7fc f997 	bl	80010e0 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e034      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc4:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ee      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ddc:	d10d      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dde:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df2:	4912      	ldr	r1, [pc, #72]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	608b      	str	r3, [r1, #8]
 8004df8:	e005      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	4a0f      	ldr	r2, [pc, #60]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e04:	6093      	str	r3, [r2, #8]
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e12:	490a      	ldr	r1, [pc, #40]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	7c1a      	ldrb	r2, [r3, #16]
 8004e28:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e2a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	42470068 	.word	0x42470068
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	40007000 	.word	0x40007000
 8004e44:	42470e40 	.word	0x42470e40
 8004e48:	424711e0 	.word	0x424711e0

08004e4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d13e      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e6a:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d12f      	bne.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e80:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e82:	617b      	str	r3, [r7, #20]
          break;
 8004e84:	e02f      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e92:	d108      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e94:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e9c:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	e007      	b.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eae:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ebc:	099b      	lsrs	r3, r3, #6
 8004ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed0:	0f1b      	lsrs	r3, r3, #28
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	617b      	str	r3, [r7, #20]
          break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
          break;
 8004ee4:	bf00      	nop
        }
      }
      break;
 8004ee6:	bf00      	nop
    }
  }
  return frequency;
 8004ee8:	697b      	ldr	r3, [r7, #20]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	00bb8000 	.word	0x00bb8000
 8004f00:	007a1200 	.word	0x007a1200
 8004f04:	00f42400 	.word	0x00f42400

08004f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e07b      	b.n	8005012 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d108      	bne.n	8004f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f2a:	d009      	beq.n	8004f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	61da      	str	r2, [r3, #28]
 8004f32:	e005      	b.n	8004f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fb ff40 	bl	8000de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc4:	ea42 0103 	orr.w	r1, r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	0c1b      	lsrs	r3, r3, #16
 8004fde:	f003 0104 	and.w	r1, r3, #4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	f003 0210 	and.w	r2, r3, #16
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e041      	b.n	80050b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fb ff15 	bl	8000e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3304      	adds	r3, #4
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f000 f94f 	bl	80052fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d001      	beq.n	80050d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e03c      	b.n	800514a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <HAL_TIM_Base_Start+0xa0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d018      	beq.n	8005114 <HAL_TIM_Base_Start+0x5c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ea:	d013      	beq.n	8005114 <HAL_TIM_Base_Start+0x5c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1a      	ldr	r2, [pc, #104]	; (800515c <HAL_TIM_Base_Start+0xa4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_TIM_Base_Start+0x5c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a19      	ldr	r2, [pc, #100]	; (8005160 <HAL_TIM_Base_Start+0xa8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_TIM_Base_Start+0x5c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a17      	ldr	r2, [pc, #92]	; (8005164 <HAL_TIM_Base_Start+0xac>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_TIM_Base_Start+0x5c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a16      	ldr	r2, [pc, #88]	; (8005168 <HAL_TIM_Base_Start+0xb0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d111      	bne.n	8005138 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b06      	cmp	r3, #6
 8005124:	d010      	beq.n	8005148 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005136:	e007      	b.n	8005148 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40010000 	.word	0x40010000
 800515c:	40000400 	.word	0x40000400
 8005160:	40000800 	.word	0x40000800
 8005164:	40000c00 	.word	0x40000c00
 8005168:	40014000 	.word	0x40014000

0800516c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_TIM_ConfigClockSource+0x1c>
 8005184:	2302      	movs	r3, #2
 8005186:	e0b4      	b.n	80052f2 <HAL_TIM_ConfigClockSource+0x186>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c0:	d03e      	beq.n	8005240 <HAL_TIM_ConfigClockSource+0xd4>
 80051c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c6:	f200 8087 	bhi.w	80052d8 <HAL_TIM_ConfigClockSource+0x16c>
 80051ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ce:	f000 8086 	beq.w	80052de <HAL_TIM_ConfigClockSource+0x172>
 80051d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d6:	d87f      	bhi.n	80052d8 <HAL_TIM_ConfigClockSource+0x16c>
 80051d8:	2b70      	cmp	r3, #112	; 0x70
 80051da:	d01a      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0xa6>
 80051dc:	2b70      	cmp	r3, #112	; 0x70
 80051de:	d87b      	bhi.n	80052d8 <HAL_TIM_ConfigClockSource+0x16c>
 80051e0:	2b60      	cmp	r3, #96	; 0x60
 80051e2:	d050      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x11a>
 80051e4:	2b60      	cmp	r3, #96	; 0x60
 80051e6:	d877      	bhi.n	80052d8 <HAL_TIM_ConfigClockSource+0x16c>
 80051e8:	2b50      	cmp	r3, #80	; 0x50
 80051ea:	d03c      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0xfa>
 80051ec:	2b50      	cmp	r3, #80	; 0x50
 80051ee:	d873      	bhi.n	80052d8 <HAL_TIM_ConfigClockSource+0x16c>
 80051f0:	2b40      	cmp	r3, #64	; 0x40
 80051f2:	d058      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x13a>
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d86f      	bhi.n	80052d8 <HAL_TIM_ConfigClockSource+0x16c>
 80051f8:	2b30      	cmp	r3, #48	; 0x30
 80051fa:	d064      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x15a>
 80051fc:	2b30      	cmp	r3, #48	; 0x30
 80051fe:	d86b      	bhi.n	80052d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005200:	2b20      	cmp	r3, #32
 8005202:	d060      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005204:	2b20      	cmp	r3, #32
 8005206:	d867      	bhi.n	80052d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d05c      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x15a>
 800520c:	2b10      	cmp	r3, #16
 800520e:	d05a      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005210:	e062      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6899      	ldr	r1, [r3, #8]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f000 f965 	bl	80054f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005234:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	609a      	str	r2, [r3, #8]
      break;
 800523e:	e04f      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	6899      	ldr	r1, [r3, #8]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f000 f94e 	bl	80054f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005262:	609a      	str	r2, [r3, #8]
      break;
 8005264:	e03c      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6859      	ldr	r1, [r3, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	461a      	mov	r2, r3
 8005274:	f000 f8c2 	bl	80053fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2150      	movs	r1, #80	; 0x50
 800527e:	4618      	mov	r0, r3
 8005280:	f000 f91b 	bl	80054ba <TIM_ITRx_SetConfig>
      break;
 8005284:	e02c      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6859      	ldr	r1, [r3, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	461a      	mov	r2, r3
 8005294:	f000 f8e1 	bl	800545a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2160      	movs	r1, #96	; 0x60
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 f90b 	bl	80054ba <TIM_ITRx_SetConfig>
      break;
 80052a4:	e01c      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6859      	ldr	r1, [r3, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f000 f8a2 	bl	80053fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2140      	movs	r1, #64	; 0x40
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f8fb 	bl	80054ba <TIM_ITRx_SetConfig>
      break;
 80052c4:	e00c      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f000 f8f2 	bl	80054ba <TIM_ITRx_SetConfig>
      break;
 80052d6:	e003      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]
      break;
 80052dc:	e000      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a34      	ldr	r2, [pc, #208]	; (80053e0 <TIM_Base_SetConfig+0xe4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00f      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531a:	d00b      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a31      	ldr	r2, [pc, #196]	; (80053e4 <TIM_Base_SetConfig+0xe8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d007      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <TIM_Base_SetConfig+0xec>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d003      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a2f      	ldr	r2, [pc, #188]	; (80053ec <TIM_Base_SetConfig+0xf0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d108      	bne.n	8005346 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <TIM_Base_SetConfig+0xe4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01b      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005354:	d017      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a22      	ldr	r2, [pc, #136]	; (80053e4 <TIM_Base_SetConfig+0xe8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a21      	ldr	r2, [pc, #132]	; (80053e8 <TIM_Base_SetConfig+0xec>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00f      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a20      	ldr	r2, [pc, #128]	; (80053ec <TIM_Base_SetConfig+0xf0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00b      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1f      	ldr	r2, [pc, #124]	; (80053f0 <TIM_Base_SetConfig+0xf4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <TIM_Base_SetConfig+0xf8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1d      	ldr	r2, [pc, #116]	; (80053f8 <TIM_Base_SetConfig+0xfc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a08      	ldr	r2, [pc, #32]	; (80053e0 <TIM_Base_SetConfig+0xe4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d103      	bne.n	80053cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	615a      	str	r2, [r3, #20]
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40000800 	.word	0x40000800
 80053ec:	40000c00 	.word	0x40000c00
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800

080053fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f023 0201 	bic.w	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f023 030a 	bic.w	r3, r3, #10
 8005438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800545a:	b480      	push	{r7}
 800545c:	b087      	sub	sp, #28
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0210 	bic.w	r2, r3, #16
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	031b      	lsls	r3, r3, #12
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005496:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f043 0307 	orr.w	r3, r3, #7
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	609a      	str	r2, [r3, #8]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800550a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	431a      	orrs	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4313      	orrs	r3, r2
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	609a      	str	r2, [r3, #8]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005544:	2302      	movs	r3, #2
 8005546:	e050      	b.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1c      	ldr	r2, [pc, #112]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d018      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d013      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a18      	ldr	r2, [pc, #96]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a16      	ldr	r2, [pc, #88]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a15      	ldr	r2, [pc, #84]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a13      	ldr	r2, [pc, #76]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d10c      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40014000 	.word	0x40014000

0800560c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800560c:	b084      	sub	sp, #16
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	f107 001c 	add.w	r0, r7, #28
 800561a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	2b01      	cmp	r3, #1
 8005622:	d122      	bne.n	800566a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800564c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800564e:	2b01      	cmp	r3, #1
 8005650:	d105      	bne.n	800565e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f9c0 	bl	80059e4 <USB_CoreReset>
 8005664:	4603      	mov	r3, r0
 8005666:	73fb      	strb	r3, [r7, #15]
 8005668:	e01a      	b.n	80056a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9b4 	bl	80059e4 <USB_CoreReset>
 800567c:	4603      	mov	r3, r0
 800567e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	639a      	str	r2, [r3, #56]	; 0x38
 8005692:	e005      	b.n	80056a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d10b      	bne.n	80056be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f043 0206 	orr.w	r2, r3, #6
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056be:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056ca:	b004      	add	sp, #16
 80056cc:	4770      	bx	lr

080056ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f043 0201 	orr.w	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f023 0201 	bic.w	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d115      	bne.n	8005760 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005740:	2001      	movs	r0, #1
 8005742:	f7fb fcd9 	bl	80010f8 <HAL_Delay>
      ms++;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3301      	adds	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f93a 	bl	80059c6 <USB_GetMode>
 8005752:	4603      	mov	r3, r0
 8005754:	2b01      	cmp	r3, #1
 8005756:	d01e      	beq.n	8005796 <USB_SetCurrentMode+0x84>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b31      	cmp	r3, #49	; 0x31
 800575c:	d9f0      	bls.n	8005740 <USB_SetCurrentMode+0x2e>
 800575e:	e01a      	b.n	8005796 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d115      	bne.n	8005792 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005772:	2001      	movs	r0, #1
 8005774:	f7fb fcc0 	bl	80010f8 <HAL_Delay>
      ms++;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3301      	adds	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f921 	bl	80059c6 <USB_GetMode>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <USB_SetCurrentMode+0x84>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b31      	cmp	r3, #49	; 0x31
 800578e:	d9f0      	bls.n	8005772 <USB_SetCurrentMode+0x60>
 8005790:	e001      	b.n	8005796 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e005      	b.n	80057a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b32      	cmp	r3, #50	; 0x32
 800579a:	d101      	bne.n	80057a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3301      	adds	r3, #1
 80057be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a13      	ldr	r2, [pc, #76]	; (8005810 <USB_FlushTxFifo+0x64>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d901      	bls.n	80057cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e01b      	b.n	8005804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	daf2      	bge.n	80057ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	019b      	lsls	r3, r3, #6
 80057dc:	f043 0220 	orr.w	r2, r3, #32
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a08      	ldr	r2, [pc, #32]	; (8005810 <USB_FlushTxFifo+0x64>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e006      	b.n	8005804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d0f0      	beq.n	80057e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	00030d40 	.word	0x00030d40

08005814 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3301      	adds	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4a11      	ldr	r2, [pc, #68]	; (8005870 <USB_FlushRxFifo+0x5c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e018      	b.n	8005864 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	daf2      	bge.n	8005820 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2210      	movs	r2, #16
 8005842:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a08      	ldr	r2, [pc, #32]	; (8005870 <USB_FlushRxFifo+0x5c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e006      	b.n	8005864 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b10      	cmp	r3, #16
 8005860:	d0f0      	beq.n	8005844 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	00030d40 	.word	0x00030d40

08005874 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005874:	b480      	push	{r7}
 8005876:	b089      	sub	sp, #36	; 0x24
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	4611      	mov	r1, r2
 8005880:	461a      	mov	r2, r3
 8005882:	460b      	mov	r3, r1
 8005884:	71fb      	strb	r3, [r7, #7]
 8005886:	4613      	mov	r3, r2
 8005888:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005892:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005896:	2b00      	cmp	r3, #0
 8005898:	d123      	bne.n	80058e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800589a:	88bb      	ldrh	r3, [r7, #4]
 800589c:	3303      	adds	r3, #3
 800589e:	089b      	lsrs	r3, r3, #2
 80058a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058a2:	2300      	movs	r3, #0
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	e018      	b.n	80058da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	031a      	lsls	r2, r3, #12
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b4:	461a      	mov	r2, r3
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	3301      	adds	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	3301      	adds	r3, #1
 80058cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	3301      	adds	r3, #1
 80058d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	3301      	adds	r3, #1
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d3e2      	bcc.n	80058a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3724      	adds	r7, #36	; 0x24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b08b      	sub	sp, #44	; 0x2c
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	089b      	lsrs	r3, r3, #2
 800590a:	b29b      	uxth	r3, r3
 800590c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005916:	2300      	movs	r3, #0
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	e014      	b.n	8005946 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	601a      	str	r2, [r3, #0]
    pDest++;
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	3301      	adds	r3, #1
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	3301      	adds	r3, #1
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	3301      	adds	r3, #1
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	3301      	adds	r3, #1
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	3301      	adds	r3, #1
 8005944:	623b      	str	r3, [r7, #32]
 8005946:	6a3a      	ldr	r2, [r7, #32]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	429a      	cmp	r2, r3
 800594c:	d3e6      	bcc.n	800591c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800594e:	8bfb      	ldrh	r3, [r7, #30]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01e      	beq.n	8005992 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800595e:	461a      	mov	r2, r3
 8005960:	f107 0310 	add.w	r3, r7, #16
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	fa22 f303 	lsr.w	r3, r2, r3
 8005974:	b2da      	uxtb	r2, r3
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	701a      	strb	r2, [r3, #0]
      i++;
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	3301      	adds	r3, #1
 800597e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	3301      	adds	r3, #1
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005986:	8bfb      	ldrh	r3, [r7, #30]
 8005988:	3b01      	subs	r3, #1
 800598a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800598c:	8bfb      	ldrh	r3, [r7, #30]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1ea      	bne.n	8005968 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005994:	4618      	mov	r0, r3
 8005996:	372c      	adds	r7, #44	; 0x2c
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4013      	ands	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059b8:	68fb      	ldr	r3, [r7, #12]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0301 	and.w	r3, r3, #1
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <USB_CoreReset+0x64>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e01b      	b.n	8005a3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	daf2      	bge.n	80059f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f043 0201 	orr.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <USB_CoreReset+0x64>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d901      	bls.n	8005a2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e006      	b.n	8005a3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d0f0      	beq.n	8005a1a <USB_CoreReset+0x36>

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	00030d40 	.word	0x00030d40

08005a4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b086      	sub	sp, #24
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d018      	beq.n	8005ad4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10a      	bne.n	8005abe <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ab6:	f043 0304 	orr.w	r3, r3, #4
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	e014      	b.n	8005ae8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005acc:	f023 0304 	bic.w	r3, r3, #4
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e009      	b.n	8005ae8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ae2:	f023 0304 	bic.w	r3, r3, #4
 8005ae6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ae8:	2110      	movs	r1, #16
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff fe5e 	bl	80057ac <USB_FlushTxFifo>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff fe8a 	bl	8005814 <USB_FlushRxFifo>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	e015      	b.n	8005b3c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b22:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b30:	461a      	mov	r2, r3
 8005b32:	2300      	movs	r3, #0
 8005b34:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d3e5      	bcc.n	8005b10 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b50:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <USB_HostInit+0x16c>)
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a13      	ldr	r2, [pc, #76]	; (8005bbc <USB_HostInit+0x170>)
 8005b70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b74:	e009      	b.n	8005b8a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2280      	movs	r2, #128	; 0x80
 8005b7a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <USB_HostInit+0x174>)
 8005b80:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a0f      	ldr	r2, [pc, #60]	; (8005bc4 <USB_HostInit+0x178>)
 8005b86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	f043 0210 	orr.w	r2, r3, #16
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <USB_HostInit+0x17c>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bb4:	b004      	add	sp, #16
 8005bb6:	4770      	bx	lr
 8005bb8:	01000200 	.word	0x01000200
 8005bbc:	00e00300 	.word	0x00e00300
 8005bc0:	00600080 	.word	0x00600080
 8005bc4:	004000e0 	.word	0x004000e0
 8005bc8:	a3200008 	.word	0xa3200008

08005bcc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bea:	f023 0303 	bic.w	r3, r3, #3
 8005bee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	68f9      	ldr	r1, [r7, #12]
 8005c00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c04:	4313      	orrs	r3, r2
 8005c06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d107      	bne.n	8005c1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c14:	461a      	mov	r2, r3
 8005c16:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c1a:	6053      	str	r3, [r2, #4]
 8005c1c:	e009      	b.n	8005c32 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d106      	bne.n	8005c32 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c30:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c70:	2064      	movs	r0, #100	; 0x64
 8005c72:	f7fb fa41 	bl	80010f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c82:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c84:	200a      	movs	r0, #10
 8005c86:	f7fb fa37 	bl	80010f8 <HAL_Delay>

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cb8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d109      	bne.n	8005cd8 <USB_DriveVbus+0x44>
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d106      	bne.n	8005cd8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cd6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce2:	d109      	bne.n	8005cf8 <USB_DriveVbus+0x64>
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cf6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	0c5b      	lsrs	r3, r3, #17
 8005d24:	f003 0303 	and.w	r3, r3, #3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	b29b      	uxth	r3, r3
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	4608      	mov	r0, r1
 8005d62:	4611      	mov	r1, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	4603      	mov	r3, r0
 8005d68:	70fb      	strb	r3, [r7, #3]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70bb      	strb	r3, [r7, #2]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d86:	461a      	mov	r2, r3
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d87e      	bhi.n	8005e94 <USB_HC_Init+0x13c>
 8005d96:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <USB_HC_Init+0x44>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005dad 	.word	0x08005dad
 8005da0:	08005e57 	.word	0x08005e57
 8005da4:	08005dad 	.word	0x08005dad
 8005da8:	08005e19 	.word	0x08005e19
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	461a      	mov	r2, r3
 8005dba:	f240 439d 	movw	r3, #1181	; 0x49d
 8005dbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005dc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da10      	bge.n	8005dea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005de8:	e057      	b.n	8005e9a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d051      	beq.n	8005e9a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e14:	60d3      	str	r3, [r2, #12]
      break;
 8005e16:	e040      	b.n	8005e9a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e24:	461a      	mov	r2, r3
 8005e26:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	da34      	bge.n	8005e9e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	78fa      	ldrb	r2, [r7, #3]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e52:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e54:	e023      	b.n	8005e9e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e62:	461a      	mov	r2, r3
 8005e64:	f240 2325 	movw	r3, #549	; 0x225
 8005e68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	da17      	bge.n	8005ea2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e8c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e90:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e92:	e006      	b.n	8005ea2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	77fb      	strb	r3, [r7, #31]
      break;
 8005e98:	e004      	b.n	8005ea4 <USB_HC_Init+0x14c>
      break;
 8005e9a:	bf00      	nop
 8005e9c:	e002      	b.n	8005ea4 <USB_HC_Init+0x14c>
      break;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <USB_HC_Init+0x14c>
      break;
 8005ea2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ebe:	f043 0302 	orr.w	r3, r3, #2
 8005ec2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eca:	699a      	ldr	r2, [r3, #24]
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed8:	6939      	ldr	r1, [r7, #16]
 8005eda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005eee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da03      	bge.n	8005efe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	e001      	b.n	8005f02 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff feff 	bl	8005d06 <USB_GetHostSpeed>
 8005f08:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d106      	bne.n	8005f20 <USB_HC_Init+0x1c8>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d003      	beq.n	8005f20 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e001      	b.n	8005f24 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f24:	787b      	ldrb	r3, [r7, #1]
 8005f26:	059b      	lsls	r3, r3, #22
 8005f28:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f2c:	78bb      	ldrb	r3, [r7, #2]
 8005f2e:	02db      	lsls	r3, r3, #11
 8005f30:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f34:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f3a:	049b      	lsls	r3, r3, #18
 8005f3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f44:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f48:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f4e:	78fb      	ldrb	r3, [r7, #3]
 8005f50:	0159      	lsls	r1, r3, #5
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	440b      	add	r3, r1
 8005f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f60:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d003      	beq.n	8005f72 <USB_HC_Init+0x21a>
 8005f6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d10f      	bne.n	8005f92 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	78fa      	ldrb	r2, [r7, #3]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f90:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08c      	sub	sp, #48	; 0x30
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fb8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d02d      	beq.n	8006022 <USB_HC_StartXfer+0x86>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	791b      	ldrb	r3, [r3, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d129      	bne.n	8006022 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d117      	bne.n	8006004 <USB_HC_StartXfer+0x68>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	79db      	ldrb	r3, [r3, #7]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <USB_HC_StartXfer+0x48>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	79db      	ldrb	r3, [r3, #7]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d10f      	bne.n	8006004 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	6a3a      	ldr	r2, [r7, #32]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006002:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <USB_HC_StartXfer+0x86>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	795b      	ldrb	r3, [r3, #5]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d107      	bne.n	8006022 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	4619      	mov	r1, r3
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fa0f 	bl	800643c <USB_DoPing>
      return HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	e0f8      	b.n	8006214 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d018      	beq.n	800605c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	8912      	ldrh	r2, [r2, #8]
 8006032:	4413      	add	r3, r2
 8006034:	3b01      	subs	r3, #1
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	8912      	ldrh	r2, [r2, #8]
 800603a:	fbb3 f3f2 	udiv	r3, r3, r2
 800603e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006040:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006042:	8b7b      	ldrh	r3, [r7, #26]
 8006044:	429a      	cmp	r2, r3
 8006046:	d90b      	bls.n	8006060 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006048:	8b7b      	ldrh	r3, [r7, #26]
 800604a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800604c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	8912      	ldrh	r2, [r2, #8]
 8006052:	fb03 f202 	mul.w	r2, r3, r2
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	611a      	str	r2, [r3, #16]
 800605a:	e001      	b.n	8006060 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800605c:	2301      	movs	r3, #1
 800605e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	78db      	ldrb	r3, [r3, #3]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006068:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	8912      	ldrh	r2, [r2, #8]
 800606e:	fb03 f202 	mul.w	r2, r3, r2
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	611a      	str	r2, [r3, #16]
 8006076:	e003      	b.n	8006080 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	695a      	ldr	r2, [r3, #20]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006088:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800608a:	04d9      	lsls	r1, r3, #19
 800608c:	4b63      	ldr	r3, [pc, #396]	; (800621c <USB_HC_StartXfer+0x280>)
 800608e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006090:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	7a9b      	ldrb	r3, [r3, #10]
 8006096:	075b      	lsls	r3, r3, #29
 8006098:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800609c:	69f9      	ldr	r1, [r7, #28]
 800609e:	0148      	lsls	r0, r1, #5
 80060a0:	6a39      	ldr	r1, [r7, #32]
 80060a2:	4401      	add	r1, r0
 80060a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d009      	beq.n	80060c6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	68d9      	ldr	r1, [r3, #12]
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c2:	460a      	mov	r2, r1
 80060c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	bf0c      	ite	eq
 80060d6:	2301      	moveq	r3, #1
 80060d8:	2300      	movne	r3, #0
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	6a3a      	ldr	r2, [r7, #32]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	4413      	add	r3, r2
 8006106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	7e7b      	ldrb	r3, [r7, #25]
 800610e:	075b      	lsls	r3, r3, #29
 8006110:	69f9      	ldr	r1, [r7, #28]
 8006112:	0148      	lsls	r0, r1, #5
 8006114:	6a39      	ldr	r1, [r7, #32]
 8006116:	4401      	add	r1, r0
 8006118:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800611c:	4313      	orrs	r3, r2
 800611e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	4413      	add	r3, r2
 8006128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006136:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	78db      	ldrb	r3, [r3, #3]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	e003      	b.n	8006152 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006150:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006158:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	4413      	add	r3, r2
 8006162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006166:	461a      	mov	r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	e04e      	b.n	8006214 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	78db      	ldrb	r3, [r3, #3]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d149      	bne.n	8006212 <USB_HC_StartXfer+0x276>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d045      	beq.n	8006212 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	79db      	ldrb	r3, [r3, #7]
 800618a:	2b03      	cmp	r3, #3
 800618c:	d830      	bhi.n	80061f0 <USB_HC_StartXfer+0x254>
 800618e:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <USB_HC_StartXfer+0x1f8>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061a5 	.word	0x080061a5
 8006198:	080061c9 	.word	0x080061c9
 800619c:	080061a5 	.word	0x080061a5
 80061a0:	080061c9 	.word	0x080061c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	3303      	adds	r3, #3
 80061aa:	089b      	lsrs	r3, r3, #2
 80061ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061ae:	8afa      	ldrh	r2, [r7, #22]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d91c      	bls.n	80061f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f043 0220 	orr.w	r2, r3, #32
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80061c6:	e015      	b.n	80061f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	3303      	adds	r3, #3
 80061ce:	089b      	lsrs	r3, r3, #2
 80061d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80061d2:	8afa      	ldrh	r2, [r7, #22]
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	429a      	cmp	r2, r3
 80061e0:	d90a      	bls.n	80061f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80061ee:	e003      	b.n	80061f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80061f0:	bf00      	nop
 80061f2:	e002      	b.n	80061fa <USB_HC_StartXfer+0x25e>
        break;
 80061f4:	bf00      	nop
 80061f6:	e000      	b.n	80061fa <USB_HC_StartXfer+0x25e>
        break;
 80061f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	68d9      	ldr	r1, [r3, #12]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	785a      	ldrb	r2, [r3, #1]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	b29b      	uxth	r3, r3
 8006208:	2000      	movs	r0, #0
 800620a:	9000      	str	r0, [sp, #0]
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f7ff fb31 	bl	8005874 <USB_WritePacket>
  }

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3728      	adds	r7, #40	; 0x28
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	1ff80000 	.word	0x1ff80000

08006220 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	b29b      	uxth	r3, r3
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006242:	b480      	push	{r7}
 8006244:	b089      	sub	sp, #36	; 0x24
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	0c9b      	lsrs	r3, r3, #18
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	0fdb      	lsrs	r3, r3, #31
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b20      	cmp	r3, #32
 8006290:	d104      	bne.n	800629c <USB_HC_Halt+0x5a>
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	e0c8      	b.n	800642e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <USB_HC_Halt+0x66>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d163      	bne.n	8006370 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f040 80ab 	bne.w	800642c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d133      	bne.n	800634a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006300:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	0151      	lsls	r1, r2, #5
 8006314:	69fa      	ldr	r2, [r7, #28]
 8006316:	440a      	add	r2, r1
 8006318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800631c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006320:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3301      	adds	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800632e:	d81d      	bhi.n	800636c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006346:	d0ec      	beq.n	8006322 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006348:	e070      	b.n	800642c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	440a      	add	r2, r1
 8006360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006368:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800636a:	e05f      	b.n	800642c <USB_HC_Halt+0x1ea>
            break;
 800636c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800636e:	e05d      	b.n	800642c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	440a      	add	r2, r1
 8006386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800638a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800638e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d133      	bne.n	8006408 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	0151      	lsls	r1, r2, #5
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	440a      	add	r2, r1
 80063d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3301      	adds	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ec:	d81d      	bhi.n	800642a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006404:	d0ec      	beq.n	80063e0 <USB_HC_Halt+0x19e>
 8006406:	e011      	b.n	800642c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	440a      	add	r2, r1
 800641e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006422:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	e000      	b.n	800642c <USB_HC_Halt+0x1ea>
          break;
 800642a:	bf00      	nop
    }
  }

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3724      	adds	r7, #36	; 0x24
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006450:	2301      	movs	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	04da      	lsls	r2, r3, #19
 8006458:	4b15      	ldr	r3, [pc, #84]	; (80064b0 <USB_DoPing+0x74>)
 800645a:	4013      	ands	r3, r2
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	440a      	add	r2, r1
 8006464:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800646c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006484:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800648c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649a:	461a      	mov	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	1ff80000 	.word	0x1ff80000

080064b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff f911 	bl	80056f0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064ce:	2110      	movs	r1, #16
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff f96b 	bl	80057ac <USB_FlushTxFifo>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff f997 	bl	8005814 <USB_FlushRxFifo>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
 80064f4:	e01f      	b.n	8006536 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800650c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006514:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800651c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652a:	461a      	mov	r2, r3
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	3301      	adds	r3, #1
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b0f      	cmp	r3, #15
 800653a:	d9dc      	bls.n	80064f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800653c:	2300      	movs	r3, #0
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	e034      	b.n	80065ac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006558:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006560:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006568:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	4413      	add	r3, r2
 8006572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006576:	461a      	mov	r2, r3
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3301      	adds	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006588:	d80c      	bhi.n	80065a4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800659c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a0:	d0ec      	beq.n	800657c <USB_StopHost+0xc8>
 80065a2:	e000      	b.n	80065a6 <USB_StopHost+0xf2>
        break;
 80065a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	3301      	adds	r3, #1
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b0f      	cmp	r3, #15
 80065b0:	d9c7      	bls.n	8006542 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b8:	461a      	mov	r2, r3
 80065ba:	f04f 33ff 	mov.w	r3, #4294967295
 80065be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f04f 32ff 	mov.w	r2, #4294967295
 80065c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff f880 	bl	80056ce <USB_EnableGlobalInt>

  return ret;
 80065ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3720      	adds	r7, #32
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80065d8:	b590      	push	{r4, r7, lr}
 80065da:	b089      	sub	sp, #36	; 0x24
 80065dc:	af04      	add	r7, sp, #16
 80065de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065e0:	2301      	movs	r3, #1
 80065e2:	2202      	movs	r2, #2
 80065e4:	2102      	movs	r1, #2
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fc66 	bl	8006eb8 <USBH_FindInterface>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	2bff      	cmp	r3, #255	; 0xff
 80065f4:	d002      	beq.n	80065fc <USBH_CDC_InterfaceInit+0x24>
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d901      	bls.n	8006600 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065fc:	2302      	movs	r3, #2
 80065fe:	e13d      	b.n	800687c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fc3b 	bl	8006e80 <USBH_SelectInterface>
 800660a:	4603      	mov	r3, r0
 800660c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006614:	2302      	movs	r3, #2
 8006616:	e131      	b.n	800687c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800661e:	2050      	movs	r0, #80	; 0x50
 8006620:	f002 fafa 	bl	8008c18 <malloc>
 8006624:	4603      	mov	r3, r0
 8006626:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006638:	2302      	movs	r3, #2
 800663a:	e11f      	b.n	800687c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800663c:	2250      	movs	r2, #80	; 0x50
 800663e:	2100      	movs	r1, #0
 8006640:	68b8      	ldr	r0, [r7, #8]
 8006642:	f002 faf9 	bl	8008c38 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	211a      	movs	r1, #26
 800664c:	fb01 f303 	mul.w	r3, r1, r3
 8006650:	4413      	add	r3, r2
 8006652:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b25b      	sxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	da15      	bge.n	800668a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	211a      	movs	r1, #26
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4413      	add	r3, r2
 800666a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800666e:	781a      	ldrb	r2, [r3, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	211a      	movs	r1, #26
 800667a:	fb01 f303 	mul.w	r3, r1, r3
 800667e:	4413      	add	r3, r2
 8006680:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006684:	881a      	ldrh	r2, [r3, #0]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 ff2c 	bl	80084ee <USBH_AllocPipe>
 8006696:	4603      	mov	r3, r0
 8006698:	461a      	mov	r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	7819      	ldrb	r1, [r3, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	7858      	ldrb	r0, [r3, #1]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	8952      	ldrh	r2, [r2, #10]
 80066b6:	9202      	str	r2, [sp, #8]
 80066b8:	2203      	movs	r2, #3
 80066ba:	9201      	str	r2, [sp, #4]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	4623      	mov	r3, r4
 80066c0:	4602      	mov	r2, r0
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 fee4 	bl	8008490 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2200      	movs	r2, #0
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f002 f9f3 	bl	8008abc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80066d6:	2300      	movs	r3, #0
 80066d8:	2200      	movs	r2, #0
 80066da:	210a      	movs	r1, #10
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fbeb 	bl	8006eb8 <USBH_FindInterface>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	2bff      	cmp	r3, #255	; 0xff
 80066ea:	d002      	beq.n	80066f2 <USBH_CDC_InterfaceInit+0x11a>
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d901      	bls.n	80066f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066f2:	2302      	movs	r3, #2
 80066f4:	e0c2      	b.n	800687c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	211a      	movs	r1, #26
 80066fc:	fb01 f303 	mul.w	r3, r1, r3
 8006700:	4413      	add	r3, r2
 8006702:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	b25b      	sxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	da16      	bge.n	800673c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	211a      	movs	r1, #26
 8006714:	fb01 f303 	mul.w	r3, r1, r3
 8006718:	4413      	add	r3, r2
 800671a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800671e:	781a      	ldrb	r2, [r3, #0]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	211a      	movs	r1, #26
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	4413      	add	r3, r2
 8006730:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006734:	881a      	ldrh	r2, [r3, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	835a      	strh	r2, [r3, #26]
 800673a:	e015      	b.n	8006768 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	211a      	movs	r1, #26
 8006742:	fb01 f303 	mul.w	r3, r1, r3
 8006746:	4413      	add	r3, r2
 8006748:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	211a      	movs	r1, #26
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	4413      	add	r3, r2
 800675e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006762:	881a      	ldrh	r2, [r3, #0]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	211a      	movs	r1, #26
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	4413      	add	r3, r2
 8006774:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	b25b      	sxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	da16      	bge.n	80067ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	211a      	movs	r1, #26
 8006786:	fb01 f303 	mul.w	r3, r1, r3
 800678a:	4413      	add	r3, r2
 800678c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006790:	781a      	ldrb	r2, [r3, #0]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	211a      	movs	r1, #26
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067a6:	881a      	ldrh	r2, [r3, #0]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	835a      	strh	r2, [r3, #26]
 80067ac:	e015      	b.n	80067da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	211a      	movs	r1, #26
 80067b4:	fb01 f303 	mul.w	r3, r1, r3
 80067b8:	4413      	add	r3, r2
 80067ba:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067be:	781a      	ldrb	r2, [r3, #0]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	211a      	movs	r1, #26
 80067ca:	fb01 f303 	mul.w	r3, r1, r3
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067d4:	881a      	ldrh	r2, [r3, #0]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	7b9b      	ldrb	r3, [r3, #14]
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 fe84 	bl	80084ee <USBH_AllocPipe>
 80067e6:	4603      	mov	r3, r0
 80067e8:	461a      	mov	r2, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	7bdb      	ldrb	r3, [r3, #15]
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fe7a 	bl	80084ee <USBH_AllocPipe>
 80067fa:	4603      	mov	r3, r0
 80067fc:	461a      	mov	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	7b59      	ldrb	r1, [r3, #13]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	7b98      	ldrb	r0, [r3, #14]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	8b12      	ldrh	r2, [r2, #24]
 800681a:	9202      	str	r2, [sp, #8]
 800681c:	2202      	movs	r2, #2
 800681e:	9201      	str	r2, [sp, #4]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	4623      	mov	r3, r4
 8006824:	4602      	mov	r2, r0
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fe32 	bl	8008490 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	7b19      	ldrb	r1, [r3, #12]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	7bd8      	ldrb	r0, [r3, #15]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	8b52      	ldrh	r2, [r2, #26]
 8006844:	9202      	str	r2, [sp, #8]
 8006846:	2202      	movs	r2, #2
 8006848:	9201      	str	r2, [sp, #4]
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	4623      	mov	r3, r4
 800684e:	4602      	mov	r2, r0
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fe1d 	bl	8008490 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	7b5b      	ldrb	r3, [r3, #13]
 8006862:	2200      	movs	r2, #0
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f002 f928 	bl	8008abc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	7b1b      	ldrb	r3, [r3, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f002 f921 	bl	8008abc <USBH_LL_SetToggle>

  return USBH_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	bd90      	pop	{r4, r7, pc}

08006884 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00e      	beq.n	80068bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 fe12 	bl	80084ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 fe3d 	bl	8008530 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	7b1b      	ldrb	r3, [r3, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00e      	beq.n	80068e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	7b1b      	ldrb	r3, [r3, #12]
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fdff 	bl	80084ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	7b1b      	ldrb	r3, [r3, #12]
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fe2a 	bl	8008530 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	7b5b      	ldrb	r3, [r3, #13]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00e      	beq.n	8006908 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	7b5b      	ldrb	r3, [r3, #13]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fdec 	bl	80084ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	7b5b      	ldrb	r3, [r3, #13]
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f001 fe17 	bl	8008530 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	4618      	mov	r0, r3
 800691e:	f002 f983 	bl	8008c28 <free>
    phost->pActiveClass->pData = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006928:	2200      	movs	r2, #0
 800692a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3340      	adds	r3, #64	; 0x40
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f8b1 	bl	8006ab6 <GetLineCoding>
 8006954:	4603      	mov	r3, r0
 8006956:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006958:	7afb      	ldrb	r3, [r7, #11]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d105      	bne.n	800696a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006964:	2102      	movs	r1, #2
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800696a:	7afb      	ldrb	r3, [r7, #11]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006994:	2b04      	cmp	r3, #4
 8006996:	d877      	bhi.n	8006a88 <USBH_CDC_Process+0x114>
 8006998:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <USBH_CDC_Process+0x2c>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	080069b5 	.word	0x080069b5
 80069a4:	080069bb 	.word	0x080069bb
 80069a8:	080069eb 	.word	0x080069eb
 80069ac:	08006a5f 	.word	0x08006a5f
 80069b0:	08006a6d 	.word	0x08006a6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	73fb      	strb	r3, [r7, #15]
      break;
 80069b8:	e06d      	b.n	8006a96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f897 	bl	8006af4 <SetLineCoding>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d104      	bne.n	80069da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069d8:	e058      	b.n	8006a8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d055      	beq.n	8006a8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2204      	movs	r2, #4
 80069e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80069e8:	e050      	b.n	8006a8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	3340      	adds	r3, #64	; 0x40
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f860 	bl	8006ab6 <GetLineCoding>
 80069f6:	4603      	mov	r3, r0
 80069f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d126      	bne.n	8006a4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a12:	791b      	ldrb	r3, [r3, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d13b      	bne.n	8006a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d133      	bne.n	8006a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d12b      	bne.n	8006a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d124      	bne.n	8006a90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f958 	bl	8006cfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a4c:	e020      	b.n	8006a90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d01d      	beq.n	8006a90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2204      	movs	r2, #4
 8006a58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a5c:	e018      	b.n	8006a90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f867 	bl	8006b32 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f8da 	bl	8006c1e <CDC_ProcessReception>
      break;
 8006a6a:	e014      	b.n	8006a96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 ffef 	bl	8007a52 <USBH_ClrFeature>
 8006a74:	4603      	mov	r3, r0
 8006a76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a86:	e005      	b.n	8006a94 <USBH_CDC_Process+0x120>

    default:
      break;
 8006a88:	bf00      	nop
 8006a8a:	e004      	b.n	8006a96 <USBH_CDC_Process+0x122>
      break;
 8006a8c:	bf00      	nop
 8006a8e:	e002      	b.n	8006a96 <USBH_CDC_Process+0x122>
      break;
 8006a90:	bf00      	nop
 8006a92:	e000      	b.n	8006a96 <USBH_CDC_Process+0x122>
      break;
 8006a94:	bf00      	nop

  }

  return status;
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	22a1      	movs	r2, #161	; 0xa1
 8006ac4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2221      	movs	r2, #33	; 0x21
 8006aca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2207      	movs	r2, #7
 8006adc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 fa81 	bl	8007fec <USBH_CtlReq>
 8006aea:	4603      	mov	r3, r0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2221      	movs	r2, #33	; 0x21
 8006b02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2207      	movs	r2, #7
 8006b1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2207      	movs	r2, #7
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fa62 	bl	8007fec <USBH_CtlReq>
 8006b28:	4603      	mov	r3, r0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af02      	add	r7, sp, #8
 8006b38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d002      	beq.n	8006b58 <CDC_ProcessTransmission+0x26>
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d023      	beq.n	8006b9e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b56:	e05e      	b.n	8006c16 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	8b12      	ldrh	r2, [r2, #24]
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d90b      	bls.n	8006b7c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	69d9      	ldr	r1, [r3, #28]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8b1a      	ldrh	r2, [r3, #24]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	7b5b      	ldrb	r3, [r3, #13]
 8006b70:	2001      	movs	r0, #1
 8006b72:	9000      	str	r0, [sp, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 fc48 	bl	800840a <USBH_BulkSendData>
 8006b7a:	e00b      	b.n	8006b94 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	7b5b      	ldrb	r3, [r3, #13]
 8006b8a:	2001      	movs	r0, #1
 8006b8c:	9000      	str	r0, [sp, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 fc3b 	bl	800840a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b9c:	e03b      	b.n	8006c16 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	7b5b      	ldrb	r3, [r3, #13]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 ff5f 	bl	8008a68 <USBH_LL_GetURBState>
 8006baa:	4603      	mov	r3, r0
 8006bac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006bae:	7afb      	ldrb	r3, [r7, #11]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d128      	bne.n	8006c06 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	8b12      	ldrh	r2, [r2, #24]
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d90e      	bls.n	8006bde <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	8b12      	ldrh	r2, [r2, #24]
 8006bc8:	1a9a      	subs	r2, r3, r2
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	8b12      	ldrh	r2, [r2, #24]
 8006bd6:	441a      	add	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	61da      	str	r2, [r3, #28]
 8006bdc:	e002      	b.n	8006be4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bf4:	e00e      	b.n	8006c14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f868 	bl	8006cd4 <USBH_CDC_TransmitCallback>
      break;
 8006c04:	e006      	b.n	8006c14 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d103      	bne.n	8006c14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c14:	bf00      	nop
  }
}
 8006c16:	bf00      	nop
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b086      	sub	sp, #24
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c30:	2300      	movs	r3, #0
 8006c32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d002      	beq.n	8006c44 <CDC_ProcessReception+0x26>
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d00e      	beq.n	8006c60 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c42:	e043      	b.n	8006ccc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	6a19      	ldr	r1, [r3, #32]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	8b5a      	ldrh	r2, [r3, #26]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	7b1b      	ldrb	r3, [r3, #12]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 fbff 	bl	8008454 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2204      	movs	r2, #4
 8006c5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c5e:	e035      	b.n	8006ccc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	7b1b      	ldrb	r3, [r3, #12]
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 fefe 	bl	8008a68 <USBH_LL_GetURBState>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c70:	7cfb      	ldrb	r3, [r7, #19]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d129      	bne.n	8006cca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	7b1b      	ldrb	r3, [r3, #12]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 fe61 	bl	8008944 <USBH_LL_GetLastXferSize>
 8006c82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d016      	beq.n	8006cbc <CDC_ProcessReception+0x9e>
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	8b5b      	ldrh	r3, [r3, #26]
 8006c92:	461a      	mov	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d910      	bls.n	8006cbc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	1ad2      	subs	r2, r2, r3
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6a1a      	ldr	r2, [r3, #32]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	441a      	add	r2, r3
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cba:	e006      	b.n	8006cca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f80f 	bl	8006ce8 <USBH_CDC_ReceiveCallback>
      break;
 8006cca:	bf00      	nop
  }
}
 8006ccc:	bf00      	nop
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d24:	2302      	movs	r3, #2
 8006d26:	e029      	b.n	8006d7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	79fa      	ldrb	r2, [r7, #7]
 8006d2c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f81f 	bl	8006d84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f001 fd31 	bl	80087dc <USBH_LL_Init>

  return USBH_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e009      	b.n	8006daa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	33e0      	adds	r3, #224	; 0xe0
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	2200      	movs	r2, #0
 8006da2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3301      	adds	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b0f      	cmp	r3, #15
 8006dae:	d9f2      	bls.n	8006d96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e009      	b.n	8006dca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd0:	d3f1      	bcc.n	8006db6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2240      	movs	r2, #64	; 0x40
 8006df6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d016      	beq.n	8006e6e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10e      	bne.n	8006e68 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e50:	1c59      	adds	r1, r3, #1
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	33de      	adds	r3, #222	; 0xde
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
 8006e66:	e004      	b.n	8006e72 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	73fb      	strb	r3, [r7, #15]
 8006e6c:	e001      	b.n	8006e72 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e6e:	2302      	movs	r3, #2
 8006e70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d204      	bcs.n	8006ea6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ea4:	e001      	b.n	8006eaa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	70fb      	strb	r3, [r7, #3]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70bb      	strb	r3, [r7, #2]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ee0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ee2:	e025      	b.n	8006f30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	221a      	movs	r2, #26
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	3308      	adds	r3, #8
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	3302      	adds	r3, #2
 8006ef4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	795b      	ldrb	r3, [r3, #5]
 8006efa:	78fa      	ldrb	r2, [r7, #3]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d002      	beq.n	8006f06 <USBH_FindInterface+0x4e>
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	2bff      	cmp	r3, #255	; 0xff
 8006f04:	d111      	bne.n	8006f2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f0a:	78ba      	ldrb	r2, [r7, #2]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d002      	beq.n	8006f16 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f10:	78bb      	ldrb	r3, [r7, #2]
 8006f12:	2bff      	cmp	r3, #255	; 0xff
 8006f14:	d109      	bne.n	8006f2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f1a:	787a      	ldrb	r2, [r7, #1]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d002      	beq.n	8006f26 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f20:	787b      	ldrb	r3, [r7, #1]
 8006f22:	2bff      	cmp	r3, #255	; 0xff
 8006f24:	d101      	bne.n	8006f2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
 8006f28:	e006      	b.n	8006f38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d9d6      	bls.n	8006ee4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f36:	23ff      	movs	r3, #255	; 0xff
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fc81 	bl	8008854 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f52:	2101      	movs	r1, #1
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fd9a 	bl	8008a8e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af04      	add	r7, sp, #16
 8006f6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d102      	bne.n	8006f86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2203      	movs	r2, #3
 8006f84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b0b      	cmp	r3, #11
 8006f8e:	f200 81be 	bhi.w	800730e <USBH_Process+0x3aa>
 8006f92:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <USBH_Process+0x34>)
 8006f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f98:	08006fc9 	.word	0x08006fc9
 8006f9c:	08006ffb 	.word	0x08006ffb
 8006fa0:	08007063 	.word	0x08007063
 8006fa4:	080072a9 	.word	0x080072a9
 8006fa8:	0800730f 	.word	0x0800730f
 8006fac:	08007107 	.word	0x08007107
 8006fb0:	0800724f 	.word	0x0800724f
 8006fb4:	0800713d 	.word	0x0800713d
 8006fb8:	0800715d 	.word	0x0800715d
 8006fbc:	0800717d 	.word	0x0800717d
 8006fc0:	080071c1 	.word	0x080071c1
 8006fc4:	08007291 	.word	0x08007291
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 819e 	beq.w	8007312 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006fdc:	20c8      	movs	r0, #200	; 0xc8
 8006fde:	f001 fd9d 	bl	8008b1c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 fc93 	bl	800890e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ff8:	e18b      	b.n	8007312 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007000:	2b01      	cmp	r3, #1
 8007002:	d107      	bne.n	8007014 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007012:	e18d      	b.n	8007330 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800701a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800701e:	d914      	bls.n	800704a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007026:	3301      	adds	r3, #1
 8007028:	b2da      	uxtb	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007036:	2b03      	cmp	r3, #3
 8007038:	d903      	bls.n	8007042 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	220d      	movs	r2, #13
 800703e:	701a      	strb	r2, [r3, #0]
      break;
 8007040:	e176      	b.n	8007330 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]
      break;
 8007048:	e172      	b.n	8007330 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007050:	f103 020a 	add.w	r2, r3, #10
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800705a:	200a      	movs	r0, #10
 800705c:	f001 fd5e 	bl	8008b1c <USBH_Delay>
      break;
 8007060:	e166      	b.n	8007330 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007072:	2104      	movs	r1, #4
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007078:	2064      	movs	r0, #100	; 0x64
 800707a:	f001 fd4f 	bl	8008b1c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 fc1e 	bl	80088c0 <USBH_LL_GetSpeed>
 8007084:	4603      	mov	r3, r0
 8007086:	461a      	mov	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2205      	movs	r2, #5
 8007092:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007094:	2100      	movs	r1, #0
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fa29 	bl	80084ee <USBH_AllocPipe>
 800709c:	4603      	mov	r3, r0
 800709e:	461a      	mov	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80070a4:	2180      	movs	r1, #128	; 0x80
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f001 fa21 	bl	80084ee <USBH_AllocPipe>
 80070ac:	4603      	mov	r3, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	7919      	ldrb	r1, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070c8:	b292      	uxth	r2, r2
 80070ca:	9202      	str	r2, [sp, #8]
 80070cc:	2200      	movs	r2, #0
 80070ce:	9201      	str	r2, [sp, #4]
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	4603      	mov	r3, r0
 80070d4:	2280      	movs	r2, #128	; 0x80
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 f9da 	bl	8008490 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7959      	ldrb	r1, [r3, #5]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070f0:	b292      	uxth	r2, r2
 80070f2:	9202      	str	r2, [sp, #8]
 80070f4:	2200      	movs	r2, #0
 80070f6:	9201      	str	r2, [sp, #4]
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	4603      	mov	r3, r0
 80070fc:	2200      	movs	r2, #0
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 f9c6 	bl	8008490 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007104:	e114      	b.n	8007330 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f918 	bl	800733c <USBH_HandleEnum>
 800710c:	4603      	mov	r3, r0
 800710e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	f040 80fe 	bne.w	8007316 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007128:	2b01      	cmp	r3, #1
 800712a:	d103      	bne.n	8007134 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2208      	movs	r2, #8
 8007130:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007132:	e0f0      	b.n	8007316 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2207      	movs	r2, #7
 8007138:	701a      	strb	r2, [r3, #0]
      break;
 800713a:	e0ec      	b.n	8007316 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 80e9 	beq.w	800731a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800714e:	2101      	movs	r1, #1
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2208      	movs	r2, #8
 8007158:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800715a:	e0de      	b.n	800731a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007162:	b29b      	uxth	r3, r3
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fc2c 	bl	80079c4 <USBH_SetCfg>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	f040 80d5 	bne.w	800731e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2209      	movs	r2, #9
 8007178:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800717a:	e0d0      	b.n	800731e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d016      	beq.n	80071b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800718a:	2101      	movs	r1, #1
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fc3c 	bl	8007a0a <USBH_SetFeature>
 8007192:	4603      	mov	r3, r0
 8007194:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d103      	bne.n	80071a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	220a      	movs	r2, #10
 80071a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071a4:	e0bd      	b.n	8007322 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	f040 80b9 	bne.w	8007322 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	220a      	movs	r2, #10
 80071b4:	701a      	strb	r2, [r3, #0]
      break;
 80071b6:	e0b4      	b.n	8007322 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	220a      	movs	r2, #10
 80071bc:	701a      	strb	r2, [r3, #0]
      break;
 80071be:	e0b0      	b.n	8007322 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 80ad 	beq.w	8007326 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071d4:	2300      	movs	r3, #0
 80071d6:	73fb      	strb	r3, [r7, #15]
 80071d8:	e016      	b.n	8007208 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80071da:	7bfa      	ldrb	r2, [r7, #15]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	32de      	adds	r2, #222	; 0xde
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	791a      	ldrb	r2, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d108      	bne.n	8007202 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80071f0:	7bfa      	ldrb	r2, [r7, #15]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	32de      	adds	r2, #222	; 0xde
 80071f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007200:	e005      	b.n	800720e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	3301      	adds	r3, #1
 8007206:	73fb      	strb	r3, [r7, #15]
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0e5      	beq.n	80071da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d016      	beq.n	8007246 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d109      	bne.n	800723e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2206      	movs	r2, #6
 800722e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007236:	2103      	movs	r1, #3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800723c:	e073      	b.n	8007326 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	220d      	movs	r2, #13
 8007242:	701a      	strb	r2, [r3, #0]
      break;
 8007244:	e06f      	b.n	8007326 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	220d      	movs	r2, #13
 800724a:	701a      	strb	r2, [r3, #0]
      break;
 800724c:	e06b      	b.n	8007326 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007254:	2b00      	cmp	r3, #0
 8007256:	d017      	beq.n	8007288 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	4798      	blx	r3
 8007264:	4603      	mov	r3, r0
 8007266:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d103      	bne.n	8007278 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	220b      	movs	r2, #11
 8007274:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007276:	e058      	b.n	800732a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d154      	bne.n	800732a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	220d      	movs	r2, #13
 8007284:	701a      	strb	r2, [r3, #0]
      break;
 8007286:	e050      	b.n	800732a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	220d      	movs	r2, #13
 800728c:	701a      	strb	r2, [r3, #0]
      break;
 800728e:	e04c      	b.n	800732a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d049      	beq.n	800732e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
      }
      break;
 80072a6:	e042      	b.n	800732e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff fd67 	bl	8006d84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072e4:	2105      	movs	r1, #5
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d107      	bne.n	8007306 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fe20 	bl	8006f44 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007304:	e014      	b.n	8007330 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 faa4 	bl	8008854 <USBH_LL_Start>
      break;
 800730c:	e010      	b.n	8007330 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800730e:	bf00      	nop
 8007310:	e00e      	b.n	8007330 <USBH_Process+0x3cc>
      break;
 8007312:	bf00      	nop
 8007314:	e00c      	b.n	8007330 <USBH_Process+0x3cc>
      break;
 8007316:	bf00      	nop
 8007318:	e00a      	b.n	8007330 <USBH_Process+0x3cc>
    break;
 800731a:	bf00      	nop
 800731c:	e008      	b.n	8007330 <USBH_Process+0x3cc>
      break;
 800731e:	bf00      	nop
 8007320:	e006      	b.n	8007330 <USBH_Process+0x3cc>
      break;
 8007322:	bf00      	nop
 8007324:	e004      	b.n	8007330 <USBH_Process+0x3cc>
      break;
 8007326:	bf00      	nop
 8007328:	e002      	b.n	8007330 <USBH_Process+0x3cc>
      break;
 800732a:	bf00      	nop
 800732c:	e000      	b.n	8007330 <USBH_Process+0x3cc>
      break;
 800732e:	bf00      	nop
  }
  return USBH_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop

0800733c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af04      	add	r7, sp, #16
 8007342:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007348:	2301      	movs	r3, #1
 800734a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b07      	cmp	r3, #7
 8007352:	f200 81c1 	bhi.w	80076d8 <USBH_HandleEnum+0x39c>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <USBH_HandleEnum+0x20>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	0800737d 	.word	0x0800737d
 8007360:	0800743b 	.word	0x0800743b
 8007364:	080074a5 	.word	0x080074a5
 8007368:	08007533 	.word	0x08007533
 800736c:	0800759d 	.word	0x0800759d
 8007370:	0800760d 	.word	0x0800760d
 8007374:	08007653 	.word	0x08007653
 8007378:	08007699 	.word	0x08007699
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800737c:	2108      	movs	r1, #8
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa50 	bl	8007824 <USBH_Get_DevDesc>
 8007384:	4603      	mov	r3, r0
 8007386:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d130      	bne.n	80073f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	7919      	ldrb	r1, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073b2:	b292      	uxth	r2, r2
 80073b4:	9202      	str	r2, [sp, #8]
 80073b6:	2200      	movs	r2, #0
 80073b8:	9201      	str	r2, [sp, #4]
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	4603      	mov	r3, r0
 80073be:	2280      	movs	r2, #128	; 0x80
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 f865 	bl	8008490 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	7959      	ldrb	r1, [r3, #5]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073da:	b292      	uxth	r2, r2
 80073dc:	9202      	str	r2, [sp, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	9201      	str	r2, [sp, #4]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	4603      	mov	r3, r0
 80073e6:	2200      	movs	r2, #0
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 f851 	bl	8008490 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073ee:	e175      	b.n	80076dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	f040 8172 	bne.w	80076dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073fe:	3301      	adds	r3, #1
 8007400:	b2da      	uxtb	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800740e:	2b03      	cmp	r3, #3
 8007410:	d903      	bls.n	800741a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	220d      	movs	r2, #13
 8007416:	701a      	strb	r2, [r3, #0]
      break;
 8007418:	e160      	b.n	80076dc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	795b      	ldrb	r3, [r3, #5]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 f885 	bl	8008530 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	791b      	ldrb	r3, [r3, #4]
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 f87f 	bl	8008530 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	701a      	strb	r2, [r3, #0]
      break;
 8007438:	e150      	b.n	80076dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800743a:	2112      	movs	r1, #18
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f9f1 	bl	8007824 <USBH_Get_DevDesc>
 8007442:	4603      	mov	r3, r0
 8007444:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d103      	bne.n	8007454 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007452:	e145      	b.n	80076e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b03      	cmp	r3, #3
 8007458:	f040 8142 	bne.w	80076e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007462:	3301      	adds	r3, #1
 8007464:	b2da      	uxtb	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007472:	2b03      	cmp	r3, #3
 8007474:	d903      	bls.n	800747e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	220d      	movs	r2, #13
 800747a:	701a      	strb	r2, [r3, #0]
      break;
 800747c:	e130      	b.n	80076e0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	795b      	ldrb	r3, [r3, #5]
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 f853 	bl	8008530 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	791b      	ldrb	r3, [r3, #4]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 f84d 	bl	8008530 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
      break;
 80074a2:	e11d      	b.n	80076e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80074a4:	2101      	movs	r1, #1
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa68 	bl	800797c <USBH_SetAddress>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d132      	bne.n	800751c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80074b6:	2002      	movs	r0, #2
 80074b8:	f001 fb30 	bl	8008b1c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2203      	movs	r2, #3
 80074c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	7919      	ldrb	r1, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074de:	b292      	uxth	r2, r2
 80074e0:	9202      	str	r2, [sp, #8]
 80074e2:	2200      	movs	r2, #0
 80074e4:	9201      	str	r2, [sp, #4]
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	4603      	mov	r3, r0
 80074ea:	2280      	movs	r2, #128	; 0x80
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 ffcf 	bl	8008490 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	7959      	ldrb	r1, [r3, #5]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007506:	b292      	uxth	r2, r2
 8007508:	9202      	str	r2, [sp, #8]
 800750a:	2200      	movs	r2, #0
 800750c:	9201      	str	r2, [sp, #4]
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	4603      	mov	r3, r0
 8007512:	2200      	movs	r2, #0
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 ffbb 	bl	8008490 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800751a:	e0e3      	b.n	80076e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	2b03      	cmp	r3, #3
 8007520:	f040 80e0 	bne.w	80076e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	220d      	movs	r2, #13
 8007528:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	705a      	strb	r2, [r3, #1]
      break;
 8007530:	e0d8      	b.n	80076e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007532:	2109      	movs	r1, #9
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f99d 	bl	8007874 <USBH_Get_CfgDesc>
 800753a:	4603      	mov	r3, r0
 800753c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d103      	bne.n	800754c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2204      	movs	r2, #4
 8007548:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800754a:	e0cd      	b.n	80076e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b03      	cmp	r3, #3
 8007550:	f040 80ca 	bne.w	80076e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800755a:	3301      	adds	r3, #1
 800755c:	b2da      	uxtb	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800756a:	2b03      	cmp	r3, #3
 800756c:	d903      	bls.n	8007576 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	220d      	movs	r2, #13
 8007572:	701a      	strb	r2, [r3, #0]
      break;
 8007574:	e0b8      	b.n	80076e8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	795b      	ldrb	r3, [r3, #5]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 ffd7 	bl	8008530 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	791b      	ldrb	r3, [r3, #4]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 ffd1 	bl	8008530 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
      break;
 800759a:	e0a5      	b.n	80076e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f965 	bl	8007874 <USBH_Get_CfgDesc>
 80075aa:	4603      	mov	r3, r0
 80075ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075ae:	7bbb      	ldrb	r3, [r7, #14]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d103      	bne.n	80075bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2205      	movs	r2, #5
 80075b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075ba:	e097      	b.n	80076ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	2b03      	cmp	r3, #3
 80075c0:	f040 8094 	bne.w	80076ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ca:	3301      	adds	r3, #1
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d903      	bls.n	80075e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	220d      	movs	r2, #13
 80075e2:	701a      	strb	r2, [r3, #0]
      break;
 80075e4:	e082      	b.n	80076ec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	795b      	ldrb	r3, [r3, #5]
 80075ea:	4619      	mov	r1, r3
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 ff9f 	bl	8008530 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	791b      	ldrb	r3, [r3, #4]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 ff99 	bl	8008530 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	701a      	strb	r2, [r3, #0]
      break;
 800760a:	e06f      	b.n	80076ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007612:	2b00      	cmp	r3, #0
 8007614:	d019      	beq.n	800764a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007622:	23ff      	movs	r3, #255	; 0xff
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f949 	bl	80078bc <USBH_Get_StringDesc>
 800762a:	4603      	mov	r3, r0
 800762c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d103      	bne.n	800763c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2206      	movs	r2, #6
 8007638:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800763a:	e059      	b.n	80076f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	2b03      	cmp	r3, #3
 8007640:	d156      	bne.n	80076f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2206      	movs	r2, #6
 8007646:	705a      	strb	r2, [r3, #1]
      break;
 8007648:	e052      	b.n	80076f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2206      	movs	r2, #6
 800764e:	705a      	strb	r2, [r3, #1]
      break;
 8007650:	e04e      	b.n	80076f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007658:	2b00      	cmp	r3, #0
 800765a:	d019      	beq.n	8007690 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007668:	23ff      	movs	r3, #255	; 0xff
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f926 	bl	80078bc <USBH_Get_StringDesc>
 8007670:	4603      	mov	r3, r0
 8007672:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2207      	movs	r2, #7
 800767e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007680:	e038      	b.n	80076f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	2b03      	cmp	r3, #3
 8007686:	d135      	bne.n	80076f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2207      	movs	r2, #7
 800768c:	705a      	strb	r2, [r3, #1]
      break;
 800768e:	e031      	b.n	80076f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2207      	movs	r2, #7
 8007694:	705a      	strb	r2, [r3, #1]
      break;
 8007696:	e02d      	b.n	80076f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d017      	beq.n	80076d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076ae:	23ff      	movs	r3, #255	; 0xff
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f903 	bl	80078bc <USBH_Get_StringDesc>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076c4:	e018      	b.n	80076f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d115      	bne.n	80076f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73fb      	strb	r3, [r7, #15]
      break;
 80076d0:	e012      	b.n	80076f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]
      break;
 80076d6:	e00f      	b.n	80076f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80076d8:	bf00      	nop
 80076da:	e00e      	b.n	80076fa <USBH_HandleEnum+0x3be>
      break;
 80076dc:	bf00      	nop
 80076de:	e00c      	b.n	80076fa <USBH_HandleEnum+0x3be>
      break;
 80076e0:	bf00      	nop
 80076e2:	e00a      	b.n	80076fa <USBH_HandleEnum+0x3be>
      break;
 80076e4:	bf00      	nop
 80076e6:	e008      	b.n	80076fa <USBH_HandleEnum+0x3be>
      break;
 80076e8:	bf00      	nop
 80076ea:	e006      	b.n	80076fa <USBH_HandleEnum+0x3be>
      break;
 80076ec:	bf00      	nop
 80076ee:	e004      	b.n	80076fa <USBH_HandleEnum+0x3be>
      break;
 80076f0:	bf00      	nop
 80076f2:	e002      	b.n	80076fa <USBH_HandleEnum+0x3be>
      break;
 80076f4:	bf00      	nop
 80076f6:	e000      	b.n	80076fa <USBH_HandleEnum+0x3be>
      break;
 80076f8:	bf00      	nop
  }
  return Status;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f804 	bl	8007746 <USBH_HandleSof>
}
 800773e:	bf00      	nop
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b0b      	cmp	r3, #11
 8007756:	d10a      	bne.n	800776e <USBH_HandleSof+0x28>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
  }
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007786:	bf00      	nop
}
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80077a2:	bf00      	nop
}
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 f844 	bl	800888a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	791b      	ldrb	r3, [r3, #4]
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fe91 	bl	8008530 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	795b      	ldrb	r3, [r3, #5]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fe8b 	bl	8008530 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af02      	add	r7, sp, #8
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007836:	78fb      	ldrb	r3, [r7, #3]
 8007838:	b29b      	uxth	r3, r3
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007842:	2100      	movs	r1, #0
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f864 	bl	8007912 <USBH_GetDescriptor>
 800784a:	4603      	mov	r3, r0
 800784c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10a      	bne.n	800786a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f203 3026 	addw	r0, r3, #806	; 0x326
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007860:	78fa      	ldrb	r2, [r7, #3]
 8007862:	b292      	uxth	r2, r2
 8007864:	4619      	mov	r1, r3
 8007866:	f000 f918 	bl	8007a9a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af02      	add	r7, sp, #8
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	331c      	adds	r3, #28
 8007884:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007886:	887b      	ldrh	r3, [r7, #2]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007890:	2100      	movs	r1, #0
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f83d 	bl	8007912 <USBH_GetDescriptor>
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d107      	bne.n	80078b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80078a2:	887b      	ldrh	r3, [r7, #2]
 80078a4:	461a      	mov	r2, r3
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f987 	bl	8007bbc <USBH_ParseCfgDesc>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	607a      	str	r2, [r7, #4]
 80078c6:	461a      	mov	r2, r3
 80078c8:	460b      	mov	r3, r1
 80078ca:	72fb      	strb	r3, [r7, #11]
 80078cc:	4613      	mov	r3, r2
 80078ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80078d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80078e0:	893b      	ldrh	r3, [r7, #8]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	460b      	mov	r3, r1
 80078e6:	2100      	movs	r1, #0
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 f812 	bl	8007912 <USBH_GetDescriptor>
 80078ee:	4603      	mov	r3, r0
 80078f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d107      	bne.n	8007908 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078fe:	893a      	ldrh	r2, [r7, #8]
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fb24 	bl	8007f50 <USBH_ParseStringDesc>
  }

  return status;
 8007908:	7dfb      	ldrb	r3, [r7, #23]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	607b      	str	r3, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	72fb      	strb	r3, [r7, #11]
 8007920:	4613      	mov	r3, r2
 8007922:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	789b      	ldrb	r3, [r3, #2]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d11c      	bne.n	8007966 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007932:	b2da      	uxtb	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2206      	movs	r2, #6
 800793c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	893a      	ldrh	r2, [r7, #8]
 8007942:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007944:	893b      	ldrh	r3, [r7, #8]
 8007946:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800794a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800794e:	d104      	bne.n	800795a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f240 4209 	movw	r2, #1033	; 0x409
 8007956:	829a      	strh	r2, [r3, #20]
 8007958:	e002      	b.n	8007960 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8b3a      	ldrh	r2, [r7, #24]
 8007964:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007966:	8b3b      	ldrh	r3, [r7, #24]
 8007968:	461a      	mov	r2, r3
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 fb3d 	bl	8007fec <USBH_CtlReq>
 8007972:	4603      	mov	r3, r0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	789b      	ldrb	r3, [r3, #2]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d10f      	bne.n	80079b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2205      	movs	r2, #5
 800799a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	b29a      	uxth	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079b0:	2200      	movs	r2, #0
 80079b2:	2100      	movs	r1, #0
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fb19 	bl	8007fec <USBH_CtlReq>
 80079ba:	4603      	mov	r3, r0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	789b      	ldrb	r3, [r3, #2]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d10e      	bne.n	80079f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2209      	movs	r2, #9
 80079e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	887a      	ldrh	r2, [r7, #2]
 80079e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079f6:	2200      	movs	r2, #0
 80079f8:	2100      	movs	r1, #0
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 faf6 	bl	8007fec <USBH_CtlReq>
 8007a00:	4603      	mov	r3, r0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	789b      	ldrb	r3, [r3, #2]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d10f      	bne.n	8007a3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2203      	movs	r2, #3
 8007a28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2100      	movs	r1, #0
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fad2 	bl	8007fec <USBH_CtlReq>
 8007a48:	4603      	mov	r3, r0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	789b      	ldrb	r3, [r3, #2]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d10f      	bne.n	8007a86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007a86:	2200      	movs	r2, #0
 8007a88:	2100      	movs	r1, #0
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 faae 	bl	8007fec <USBH_CtlReq>
 8007a90:	4603      	mov	r3, r0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	781a      	ldrb	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	785a      	ldrb	r2, [r3, #1]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	3302      	adds	r3, #2
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	3303      	adds	r3, #3
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	4313      	orrs	r3, r2
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	791a      	ldrb	r2, [r3, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	795a      	ldrb	r2, [r3, #5]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	799a      	ldrb	r2, [r3, #6]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	79da      	ldrb	r2, [r3, #7]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	79db      	ldrb	r3, [r3, #7]
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	dc11      	bgt.n	8007b20 <USBH_ParseDevDesc+0x86>
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	db16      	blt.n	8007b2e <USBH_ParseDevDesc+0x94>
 8007b00:	3b08      	subs	r3, #8
 8007b02:	2201      	movs	r2, #1
 8007b04:	fa02 f303 	lsl.w	r3, r2, r3
 8007b08:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	bf14      	ite	ne
 8007b14:	2301      	movne	r3, #1
 8007b16:	2300      	moveq	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d102      	bne.n	8007b24 <USBH_ParseDevDesc+0x8a>
 8007b1e:	e006      	b.n	8007b2e <USBH_ParseDevDesc+0x94>
 8007b20:	2b40      	cmp	r3, #64	; 0x40
 8007b22:	d104      	bne.n	8007b2e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	79da      	ldrb	r2, [r3, #7]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	71da      	strb	r2, [r3, #7]
      break;
 8007b2c:	e003      	b.n	8007b36 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2240      	movs	r2, #64	; 0x40
 8007b32:	71da      	strb	r2, [r3, #7]
      break;
 8007b34:	bf00      	nop
  }

  if (length > 8U)
 8007b36:	88fb      	ldrh	r3, [r7, #6]
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d939      	bls.n	8007bb0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	3309      	adds	r3, #9
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	4313      	orrs	r3, r2
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	330a      	adds	r3, #10
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	330b      	adds	r3, #11
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	021b      	lsls	r3, r3, #8
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	330c      	adds	r3, #12
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	330d      	adds	r3, #13
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	7b9a      	ldrb	r2, [r3, #14]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	7bda      	ldrb	r2, [r3, #15]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	7c1a      	ldrb	r2, [r3, #16]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	7c5a      	ldrb	r2, [r3, #17]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	745a      	strb	r2, [r3, #17]
  }
}
 8007bb0:	bf00      	nop
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08c      	sub	sp, #48	; 0x30
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007bd0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	781a      	ldrb	r2, [r3, #0]
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	785a      	ldrb	r2, [r3, #1]
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	3302      	adds	r3, #2
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	3303      	adds	r3, #3
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	021b      	lsls	r3, r3, #8
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	4313      	orrs	r3, r2
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c18:	bf28      	it	cs
 8007c1a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	791a      	ldrb	r2, [r3, #4]
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	795a      	ldrb	r2, [r3, #5]
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	799a      	ldrb	r2, [r3, #6]
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	79da      	ldrb	r2, [r3, #7]
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	7a1a      	ldrb	r2, [r3, #8]
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b09      	cmp	r3, #9
 8007c52:	d002      	beq.n	8007c5a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	2209      	movs	r2, #9
 8007c58:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c5a:	88fb      	ldrh	r3, [r7, #6]
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	f240 809d 	bls.w	8007d9c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c62:	2309      	movs	r3, #9
 8007c64:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c6a:	e081      	b.n	8007d70 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c6c:	f107 0316 	add.w	r3, r7, #22
 8007c70:	4619      	mov	r1, r3
 8007c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c74:	f000 f99f 	bl	8007fb6 <USBH_GetNextDesc>
 8007c78:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d176      	bne.n	8007d70 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b09      	cmp	r3, #9
 8007c88:	d002      	beq.n	8007c90 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	2209      	movs	r2, #9
 8007c8e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c94:	221a      	movs	r2, #26
 8007c96:	fb02 f303 	mul.w	r3, r2, r3
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	6a3a      	ldr	r2, [r7, #32]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	3302      	adds	r3, #2
 8007ca2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ca6:	69f8      	ldr	r0, [r7, #28]
 8007ca8:	f000 f87e 	bl	8007da8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007cb6:	e043      	b.n	8007d40 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007cb8:	f107 0316 	add.w	r3, r7, #22
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc0:	f000 f979 	bl	8007fb6 <USBH_GetNextDesc>
 8007cc4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	785b      	ldrb	r3, [r3, #1]
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	d138      	bne.n	8007d40 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	795b      	ldrb	r3, [r3, #5]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d10f      	bne.n	8007cf6 <USBH_ParseCfgDesc+0x13a>
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	799b      	ldrb	r3, [r3, #6]
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d10b      	bne.n	8007cf6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	79db      	ldrb	r3, [r3, #7]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10f      	bne.n	8007d06 <USBH_ParseCfgDesc+0x14a>
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b09      	cmp	r3, #9
 8007cec:	d00b      	beq.n	8007d06 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	2209      	movs	r2, #9
 8007cf2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cf4:	e007      	b.n	8007d06 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2b07      	cmp	r3, #7
 8007cfc:	d004      	beq.n	8007d08 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	2207      	movs	r2, #7
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	e000      	b.n	8007d08 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d06:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d10:	3201      	adds	r2, #1
 8007d12:	00d2      	lsls	r2, r2, #3
 8007d14:	211a      	movs	r1, #26
 8007d16:	fb01 f303 	mul.w	r3, r1, r3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	6a3a      	ldr	r2, [r7, #32]
 8007d20:	4413      	add	r3, r2
 8007d22:	3304      	adds	r3, #4
 8007d24:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d28:	69b9      	ldr	r1, [r7, #24]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f86b 	bl	8007e06 <USBH_ParseEPDesc>
 8007d30:	4603      	mov	r3, r0
 8007d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007d36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	791b      	ldrb	r3, [r3, #4]
 8007d44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d204      	bcs.n	8007d56 <USBH_ParseCfgDesc+0x19a>
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	885a      	ldrh	r2, [r3, #2]
 8007d50:	8afb      	ldrh	r3, [r7, #22]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d8b0      	bhi.n	8007cb8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	791b      	ldrb	r3, [r3, #4]
 8007d5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d201      	bcs.n	8007d66 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e01c      	b.n	8007da0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d805      	bhi.n	8007d84 <USBH_ParseCfgDesc+0x1c8>
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	885a      	ldrh	r2, [r3, #2]
 8007d7c:	8afb      	ldrh	r3, [r7, #22]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	f63f af74 	bhi.w	8007c6c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	791b      	ldrb	r3, [r3, #4]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	bf28      	it	cs
 8007d8c:	2302      	movcs	r3, #2
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d201      	bcs.n	8007d9c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e001      	b.n	8007da0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3730      	adds	r7, #48	; 0x30
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781a      	ldrb	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	785a      	ldrb	r2, [r3, #1]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	789a      	ldrb	r2, [r3, #2]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	78da      	ldrb	r2, [r3, #3]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	791a      	ldrb	r2, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	795a      	ldrb	r2, [r3, #5]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	799a      	ldrb	r2, [r3, #6]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	79da      	ldrb	r2, [r3, #7]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	7a1a      	ldrb	r2, [r3, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	721a      	strb	r2, [r3, #8]
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b087      	sub	sp, #28
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	60f8      	str	r0, [r7, #12]
 8007e0e:	60b9      	str	r1, [r7, #8]
 8007e10:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	781a      	ldrb	r2, [r3, #0]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	785a      	ldrb	r2, [r3, #1]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	789a      	ldrb	r2, [r3, #2]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	78da      	ldrb	r2, [r3, #3]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3305      	adds	r3, #5
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	021b      	lsls	r3, r3, #8
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	799a      	ldrb	r2, [r3, #6]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	889b      	ldrh	r3, [r3, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d102      	bne.n	8007e68 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007e62:	2303      	movs	r3, #3
 8007e64:	75fb      	strb	r3, [r7, #23]
 8007e66:	e033      	b.n	8007ed0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	889b      	ldrh	r3, [r3, #4]
 8007e6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e70:	f023 0307 	bic.w	r3, r3, #7
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	889b      	ldrh	r3, [r3, #4]
 8007e7e:	b21a      	sxth	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3304      	adds	r3, #4
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	b299      	uxth	r1, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3305      	adds	r3, #5
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	430b      	orrs	r3, r1
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d110      	bne.n	8007ec2 <USBH_ParseEPDesc+0xbc>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	b299      	uxth	r1, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3305      	adds	r3, #5
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	021b      	lsls	r3, r3, #8
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	b21b      	sxth	r3, r3
 8007eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ebe:	b21b      	sxth	r3, r3
 8007ec0:	e001      	b.n	8007ec6 <USBH_ParseEPDesc+0xc0>
 8007ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	b21b      	sxth	r3, r3
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d116      	bne.n	8007f08 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	78db      	ldrb	r3, [r3, #3]
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d005      	beq.n	8007ef2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	78db      	ldrb	r3, [r3, #3]
 8007eea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d127      	bne.n	8007f42 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	799b      	ldrb	r3, [r3, #6]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <USBH_ParseEPDesc+0xfc>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	799b      	ldrb	r3, [r3, #6]
 8007efe:	2b10      	cmp	r3, #16
 8007f00:	d91f      	bls.n	8007f42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f02:	2303      	movs	r3, #3
 8007f04:	75fb      	strb	r3, [r7, #23]
 8007f06:	e01c      	b.n	8007f42 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	78db      	ldrb	r3, [r3, #3]
 8007f0c:	f003 0303 	and.w	r3, r3, #3
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d10a      	bne.n	8007f2a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	799b      	ldrb	r3, [r3, #6]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <USBH_ParseEPDesc+0x11e>
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	799b      	ldrb	r3, [r3, #6]
 8007f20:	2b10      	cmp	r3, #16
 8007f22:	d90e      	bls.n	8007f42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f24:	2303      	movs	r3, #3
 8007f26:	75fb      	strb	r3, [r7, #23]
 8007f28:	e00b      	b.n	8007f42 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	78db      	ldrb	r3, [r3, #3]
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d105      	bne.n	8007f42 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	799b      	ldrb	r3, [r3, #6]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d120      	bne.n	8007faa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	1e9a      	subs	r2, r3, #2
 8007f6e:	88fb      	ldrh	r3, [r7, #6]
 8007f70:	4293      	cmp	r3, r2
 8007f72:	bf28      	it	cs
 8007f74:	4613      	movcs	r3, r2
 8007f76:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3302      	adds	r3, #2
 8007f7c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007f7e:	2300      	movs	r3, #0
 8007f80:	82fb      	strh	r3, [r7, #22]
 8007f82:	e00b      	b.n	8007f9c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007f84:	8afb      	ldrh	r3, [r7, #22]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4413      	add	r3, r2
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	3301      	adds	r3, #1
 8007f94:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007f96:	8afb      	ldrh	r3, [r7, #22]
 8007f98:	3302      	adds	r3, #2
 8007f9a:	82fb      	strh	r3, [r7, #22]
 8007f9c:	8afa      	ldrh	r2, [r7, #22]
 8007f9e:	8abb      	ldrh	r3, [r7, #20]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d3ef      	bcc.n	8007f84 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]
  }
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	881a      	ldrh	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	4413      	add	r3, r2
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4413      	add	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fde:	68fb      	ldr	r3, [r7, #12]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	789b      	ldrb	r3, [r3, #2]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d002      	beq.n	800800c <USBH_CtlReq+0x20>
 8008006:	2b02      	cmp	r3, #2
 8008008:	d00f      	beq.n	800802a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800800a:	e027      	b.n	800805c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	88fa      	ldrh	r2, [r7, #6]
 8008016:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2202      	movs	r2, #2
 8008022:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008024:	2301      	movs	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]
      break;
 8008028:	e018      	b.n	800805c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 f81c 	bl	8008068 <USBH_HandleControl>
 8008030:	4603      	mov	r3, r0
 8008032:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <USBH_CtlReq+0x54>
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	2b03      	cmp	r3, #3
 800803e:	d106      	bne.n	800804e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2201      	movs	r2, #1
 8008044:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	761a      	strb	r2, [r3, #24]
      break;
 800804c:	e005      	b.n	800805a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d102      	bne.n	800805a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2201      	movs	r2, #1
 8008058:	709a      	strb	r2, [r3, #2]
      break;
 800805a:	bf00      	nop
  }
  return status;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af02      	add	r7, sp, #8
 800806e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008070:	2301      	movs	r3, #1
 8008072:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7e1b      	ldrb	r3, [r3, #24]
 800807c:	3b01      	subs	r3, #1
 800807e:	2b0a      	cmp	r3, #10
 8008080:	f200 8156 	bhi.w	8008330 <USBH_HandleControl+0x2c8>
 8008084:	a201      	add	r2, pc, #4	; (adr r2, 800808c <USBH_HandleControl+0x24>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	080080b9 	.word	0x080080b9
 8008090:	080080d3 	.word	0x080080d3
 8008094:	0800813d 	.word	0x0800813d
 8008098:	08008163 	.word	0x08008163
 800809c:	0800819b 	.word	0x0800819b
 80080a0:	080081c5 	.word	0x080081c5
 80080a4:	08008217 	.word	0x08008217
 80080a8:	08008239 	.word	0x08008239
 80080ac:	08008275 	.word	0x08008275
 80080b0:	0800829b 	.word	0x0800829b
 80080b4:	080082d9 	.word	0x080082d9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f103 0110 	add.w	r1, r3, #16
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	795b      	ldrb	r3, [r3, #5]
 80080c2:	461a      	mov	r2, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f943 	bl	8008350 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2202      	movs	r2, #2
 80080ce:	761a      	strb	r2, [r3, #24]
      break;
 80080d0:	e139      	b.n	8008346 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	795b      	ldrb	r3, [r3, #5]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fcc5 	bl	8008a68 <USBH_LL_GetURBState>
 80080de:	4603      	mov	r3, r0
 80080e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d11e      	bne.n	8008126 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	7c1b      	ldrb	r3, [r3, #16]
 80080ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	8adb      	ldrh	r3, [r3, #22]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80080fa:	7b7b      	ldrb	r3, [r7, #13]
 80080fc:	2b80      	cmp	r3, #128	; 0x80
 80080fe:	d103      	bne.n	8008108 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2203      	movs	r2, #3
 8008104:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008106:	e115      	b.n	8008334 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2205      	movs	r2, #5
 800810c:	761a      	strb	r2, [r3, #24]
      break;
 800810e:	e111      	b.n	8008334 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008110:	7b7b      	ldrb	r3, [r7, #13]
 8008112:	2b80      	cmp	r3, #128	; 0x80
 8008114:	d103      	bne.n	800811e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2209      	movs	r2, #9
 800811a:	761a      	strb	r2, [r3, #24]
      break;
 800811c:	e10a      	b.n	8008334 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2207      	movs	r2, #7
 8008122:	761a      	strb	r2, [r3, #24]
      break;
 8008124:	e106      	b.n	8008334 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b04      	cmp	r3, #4
 800812a:	d003      	beq.n	8008134 <USBH_HandleControl+0xcc>
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	2b02      	cmp	r3, #2
 8008130:	f040 8100 	bne.w	8008334 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	220b      	movs	r2, #11
 8008138:	761a      	strb	r2, [r3, #24]
      break;
 800813a:	e0fb      	b.n	8008334 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008142:	b29a      	uxth	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6899      	ldr	r1, [r3, #8]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	899a      	ldrh	r2, [r3, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	791b      	ldrb	r3, [r3, #4]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f93a 	bl	80083ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2204      	movs	r2, #4
 800815e:	761a      	strb	r2, [r3, #24]
      break;
 8008160:	e0f1      	b.n	8008346 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	791b      	ldrb	r3, [r3, #4]
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fc7d 	bl	8008a68 <USBH_LL_GetURBState>
 800816e:	4603      	mov	r3, r0
 8008170:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d102      	bne.n	800817e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2209      	movs	r2, #9
 800817c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b05      	cmp	r3, #5
 8008182:	d102      	bne.n	800818a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008184:	2303      	movs	r3, #3
 8008186:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008188:	e0d6      	b.n	8008338 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b04      	cmp	r3, #4
 800818e:	f040 80d3 	bne.w	8008338 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	220b      	movs	r2, #11
 8008196:	761a      	strb	r2, [r3, #24]
      break;
 8008198:	e0ce      	b.n	8008338 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6899      	ldr	r1, [r3, #8]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	899a      	ldrh	r2, [r3, #12]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	795b      	ldrb	r3, [r3, #5]
 80081a6:	2001      	movs	r0, #1
 80081a8:	9000      	str	r0, [sp, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f8ea 	bl	8008384 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2206      	movs	r2, #6
 80081c0:	761a      	strb	r2, [r3, #24]
      break;
 80081c2:	e0c0      	b.n	8008346 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	795b      	ldrb	r3, [r3, #5]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fc4c 	bl	8008a68 <USBH_LL_GetURBState>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d103      	bne.n	80081e2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2207      	movs	r2, #7
 80081de:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081e0:	e0ac      	b.n	800833c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	2b05      	cmp	r3, #5
 80081e6:	d105      	bne.n	80081f4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	220c      	movs	r2, #12
 80081ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80081ee:	2303      	movs	r3, #3
 80081f0:	73fb      	strb	r3, [r7, #15]
      break;
 80081f2:	e0a3      	b.n	800833c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d103      	bne.n	8008202 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2205      	movs	r2, #5
 80081fe:	761a      	strb	r2, [r3, #24]
      break;
 8008200:	e09c      	b.n	800833c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	2b04      	cmp	r3, #4
 8008206:	f040 8099 	bne.w	800833c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	220b      	movs	r2, #11
 800820e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008210:	2302      	movs	r3, #2
 8008212:	73fb      	strb	r3, [r7, #15]
      break;
 8008214:	e092      	b.n	800833c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	791b      	ldrb	r3, [r3, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	2100      	movs	r1, #0
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f8d5 	bl	80083ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800822a:	b29a      	uxth	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2208      	movs	r2, #8
 8008234:	761a      	strb	r2, [r3, #24]

      break;
 8008236:	e086      	b.n	8008346 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	791b      	ldrb	r3, [r3, #4]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc12 	bl	8008a68 <USBH_LL_GetURBState>
 8008244:	4603      	mov	r3, r0
 8008246:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d105      	bne.n	800825a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	220d      	movs	r2, #13
 8008252:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008258:	e072      	b.n	8008340 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	2b04      	cmp	r3, #4
 800825e:	d103      	bne.n	8008268 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	220b      	movs	r2, #11
 8008264:	761a      	strb	r2, [r3, #24]
      break;
 8008266:	e06b      	b.n	8008340 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b05      	cmp	r3, #5
 800826c:	d168      	bne.n	8008340 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800826e:	2303      	movs	r3, #3
 8008270:	73fb      	strb	r3, [r7, #15]
      break;
 8008272:	e065      	b.n	8008340 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	795b      	ldrb	r3, [r3, #5]
 8008278:	2201      	movs	r2, #1
 800827a:	9200      	str	r2, [sp, #0]
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f87f 	bl	8008384 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800828c:	b29a      	uxth	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	220a      	movs	r2, #10
 8008296:	761a      	strb	r2, [r3, #24]
      break;
 8008298:	e055      	b.n	8008346 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	795b      	ldrb	r3, [r3, #5]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fbe1 	bl	8008a68 <USBH_LL_GetURBState>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d105      	bne.n	80082bc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	220d      	movs	r2, #13
 80082b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082ba:	e043      	b.n	8008344 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d103      	bne.n	80082ca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2209      	movs	r2, #9
 80082c6:	761a      	strb	r2, [r3, #24]
      break;
 80082c8:	e03c      	b.n	8008344 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d139      	bne.n	8008344 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	220b      	movs	r2, #11
 80082d4:	761a      	strb	r2, [r3, #24]
      break;
 80082d6:	e035      	b.n	8008344 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7e5b      	ldrb	r3, [r3, #25]
 80082dc:	3301      	adds	r3, #1
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	765a      	strb	r2, [r3, #25]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	7e5b      	ldrb	r3, [r3, #25]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d806      	bhi.n	80082fa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80082f8:	e025      	b.n	8008346 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008300:	2106      	movs	r1, #6
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	795b      	ldrb	r3, [r3, #5]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f90c 	bl	8008530 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	791b      	ldrb	r3, [r3, #4]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f906 	bl	8008530 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800832a:	2302      	movs	r3, #2
 800832c:	73fb      	strb	r3, [r7, #15]
      break;
 800832e:	e00a      	b.n	8008346 <USBH_HandleControl+0x2de>

    default:
      break;
 8008330:	bf00      	nop
 8008332:	e008      	b.n	8008346 <USBH_HandleControl+0x2de>
      break;
 8008334:	bf00      	nop
 8008336:	e006      	b.n	8008346 <USBH_HandleControl+0x2de>
      break;
 8008338:	bf00      	nop
 800833a:	e004      	b.n	8008346 <USBH_HandleControl+0x2de>
      break;
 800833c:	bf00      	nop
 800833e:	e002      	b.n	8008346 <USBH_HandleControl+0x2de>
      break;
 8008340:	bf00      	nop
 8008342:	e000      	b.n	8008346 <USBH_HandleControl+0x2de>
      break;
 8008344:	bf00      	nop
  }

  return status;
 8008346:	7bfb      	ldrb	r3, [r7, #15]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af04      	add	r7, sp, #16
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800835e:	79f9      	ldrb	r1, [r7, #7]
 8008360:	2300      	movs	r3, #0
 8008362:	9303      	str	r3, [sp, #12]
 8008364:	2308      	movs	r3, #8
 8008366:	9302      	str	r3, [sp, #8]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	2300      	movs	r3, #0
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	2300      	movs	r3, #0
 8008372:	2200      	movs	r2, #0
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 fb46 	bl	8008a06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af04      	add	r7, sp, #16
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4611      	mov	r1, r2
 8008390:	461a      	mov	r2, r3
 8008392:	460b      	mov	r3, r1
 8008394:	80fb      	strh	r3, [r7, #6]
 8008396:	4613      	mov	r3, r2
 8008398:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083a8:	7979      	ldrb	r1, [r7, #5]
 80083aa:	7e3b      	ldrb	r3, [r7, #24]
 80083ac:	9303      	str	r3, [sp, #12]
 80083ae:	88fb      	ldrh	r3, [r7, #6]
 80083b0:	9302      	str	r3, [sp, #8]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	2301      	movs	r3, #1
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	2300      	movs	r3, #0
 80083bc:	2200      	movs	r2, #0
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fb21 	bl	8008a06 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b088      	sub	sp, #32
 80083d2:	af04      	add	r7, sp, #16
 80083d4:	60f8      	str	r0, [r7, #12]
 80083d6:	60b9      	str	r1, [r7, #8]
 80083d8:	4611      	mov	r1, r2
 80083da:	461a      	mov	r2, r3
 80083dc:	460b      	mov	r3, r1
 80083de:	80fb      	strh	r3, [r7, #6]
 80083e0:	4613      	mov	r3, r2
 80083e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083e4:	7979      	ldrb	r1, [r7, #5]
 80083e6:	2300      	movs	r3, #0
 80083e8:	9303      	str	r3, [sp, #12]
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	9302      	str	r3, [sp, #8]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	2301      	movs	r3, #1
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	2300      	movs	r3, #0
 80083f8:	2201      	movs	r2, #1
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 fb03 	bl	8008a06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008400:	2300      	movs	r3, #0

}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b088      	sub	sp, #32
 800840e:	af04      	add	r7, sp, #16
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	4611      	mov	r1, r2
 8008416:	461a      	mov	r2, r3
 8008418:	460b      	mov	r3, r1
 800841a:	80fb      	strh	r3, [r7, #6]
 800841c:	4613      	mov	r3, r2
 800841e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800842e:	7979      	ldrb	r1, [r7, #5]
 8008430:	7e3b      	ldrb	r3, [r7, #24]
 8008432:	9303      	str	r3, [sp, #12]
 8008434:	88fb      	ldrh	r3, [r7, #6]
 8008436:	9302      	str	r3, [sp, #8]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	2301      	movs	r3, #1
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	2302      	movs	r3, #2
 8008442:	2200      	movs	r2, #0
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 fade 	bl	8008a06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af04      	add	r7, sp, #16
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	4611      	mov	r1, r2
 8008460:	461a      	mov	r2, r3
 8008462:	460b      	mov	r3, r1
 8008464:	80fb      	strh	r3, [r7, #6]
 8008466:	4613      	mov	r3, r2
 8008468:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800846a:	7979      	ldrb	r1, [r7, #5]
 800846c:	2300      	movs	r3, #0
 800846e:	9303      	str	r3, [sp, #12]
 8008470:	88fb      	ldrh	r3, [r7, #6]
 8008472:	9302      	str	r3, [sp, #8]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	2301      	movs	r3, #1
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	2302      	movs	r3, #2
 800847e:	2201      	movs	r2, #1
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 fac0 	bl	8008a06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af04      	add	r7, sp, #16
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	4608      	mov	r0, r1
 800849a:	4611      	mov	r1, r2
 800849c:	461a      	mov	r2, r3
 800849e:	4603      	mov	r3, r0
 80084a0:	70fb      	strb	r3, [r7, #3]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70bb      	strb	r3, [r7, #2]
 80084a6:	4613      	mov	r3, r2
 80084a8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80084aa:	7878      	ldrb	r0, [r7, #1]
 80084ac:	78ba      	ldrb	r2, [r7, #2]
 80084ae:	78f9      	ldrb	r1, [r7, #3]
 80084b0:	8b3b      	ldrh	r3, [r7, #24]
 80084b2:	9302      	str	r3, [sp, #8]
 80084b4:	7d3b      	ldrb	r3, [r7, #20]
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	7c3b      	ldrb	r3, [r7, #16]
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	4603      	mov	r3, r0
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fa53 	bl	800896a <USBH_LL_OpenPipe>

  return USBH_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	460b      	mov	r3, r1
 80084d8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa72 	bl	80089c8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	460b      	mov	r3, r1
 80084f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f836 	bl	800856c <USBH_GetFreePipe>
 8008500:	4603      	mov	r3, r0
 8008502:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008504:	89fb      	ldrh	r3, [r7, #14]
 8008506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800850a:	4293      	cmp	r3, r2
 800850c:	d00a      	beq.n	8008524 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800850e:	78fa      	ldrb	r2, [r7, #3]
 8008510:	89fb      	ldrh	r3, [r7, #14]
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800851a:	6879      	ldr	r1, [r7, #4]
 800851c:	33e0      	adds	r3, #224	; 0xe0
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008524:	89fb      	ldrh	r3, [r7, #14]
 8008526:	b2db      	uxtb	r3, r3
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	2b0f      	cmp	r3, #15
 8008540:	d80d      	bhi.n	800855e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	33e0      	adds	r3, #224	; 0xe0
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	33e0      	adds	r3, #224	; 0xe0
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
 800857c:	e00f      	b.n	800859e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	33e0      	adds	r3, #224	; 0xe0
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d102      	bne.n	8008598 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	b29b      	uxth	r3, r3
 8008596:	e007      	b.n	80085a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	3301      	adds	r3, #1
 800859c:	73fb      	strb	r3, [r7, #15]
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	2b0f      	cmp	r3, #15
 80085a2:	d9ec      	bls.n	800857e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80085a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085b8:	2201      	movs	r2, #1
 80085ba:	490e      	ldr	r1, [pc, #56]	; (80085f4 <MX_USB_HOST_Init+0x40>)
 80085bc:	480e      	ldr	r0, [pc, #56]	; (80085f8 <MX_USB_HOST_Init+0x44>)
 80085be:	f7fe fba7 	bl	8006d10 <USBH_Init>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085c8:	f7f8 fa8a 	bl	8000ae0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80085cc:	490b      	ldr	r1, [pc, #44]	; (80085fc <MX_USB_HOST_Init+0x48>)
 80085ce:	480a      	ldr	r0, [pc, #40]	; (80085f8 <MX_USB_HOST_Init+0x44>)
 80085d0:	f7fe fc2c 	bl	8006e2c <USBH_RegisterClass>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80085da:	f7f8 fa81 	bl	8000ae0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80085de:	4806      	ldr	r0, [pc, #24]	; (80085f8 <MX_USB_HOST_Init+0x44>)
 80085e0:	f7fe fcb0 	bl	8006f44 <USBH_Start>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80085ea:	f7f8 fa79 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80085ee:	bf00      	nop
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	08008615 	.word	0x08008615
 80085f8:	20000284 	.word	0x20000284
 80085fc:	2000000c 	.word	0x2000000c

08008600 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008604:	4802      	ldr	r0, [pc, #8]	; (8008610 <MX_USB_HOST_Process+0x10>)
 8008606:	f7fe fcad 	bl	8006f64 <USBH_Process>
}
 800860a:	bf00      	nop
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20000284 	.word	0x20000284

08008614 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	3b01      	subs	r3, #1
 8008624:	2b04      	cmp	r3, #4
 8008626:	d819      	bhi.n	800865c <USBH_UserProcess+0x48>
 8008628:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <USBH_UserProcess+0x1c>)
 800862a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862e:	bf00      	nop
 8008630:	0800865d 	.word	0x0800865d
 8008634:	0800864d 	.word	0x0800864d
 8008638:	0800865d 	.word	0x0800865d
 800863c:	08008655 	.word	0x08008655
 8008640:	08008645 	.word	0x08008645
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008644:	4b09      	ldr	r3, [pc, #36]	; (800866c <USBH_UserProcess+0x58>)
 8008646:	2203      	movs	r2, #3
 8008648:	701a      	strb	r2, [r3, #0]
  break;
 800864a:	e008      	b.n	800865e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800864c:	4b07      	ldr	r3, [pc, #28]	; (800866c <USBH_UserProcess+0x58>)
 800864e:	2202      	movs	r2, #2
 8008650:	701a      	strb	r2, [r3, #0]
  break;
 8008652:	e004      	b.n	800865e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <USBH_UserProcess+0x58>)
 8008656:	2201      	movs	r2, #1
 8008658:	701a      	strb	r2, [r3, #0]
  break;
 800865a:	e000      	b.n	800865e <USBH_UserProcess+0x4a>

  default:
  break;
 800865c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800865e:	bf00      	nop
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	2000065c 	.word	0x2000065c

08008670 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08a      	sub	sp, #40	; 0x28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008678:	f107 0314 	add.w	r3, r7, #20
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]
 8008680:	605a      	str	r2, [r3, #4]
 8008682:	609a      	str	r2, [r3, #8]
 8008684:	60da      	str	r2, [r3, #12]
 8008686:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008690:	d147      	bne.n	8008722 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008692:	2300      	movs	r3, #0
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	4b25      	ldr	r3, [pc, #148]	; (800872c <HAL_HCD_MspInit+0xbc>)
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	4a24      	ldr	r2, [pc, #144]	; (800872c <HAL_HCD_MspInit+0xbc>)
 800869c:	f043 0301 	orr.w	r3, r3, #1
 80086a0:	6313      	str	r3, [r2, #48]	; 0x30
 80086a2:	4b22      	ldr	r3, [pc, #136]	; (800872c <HAL_HCD_MspInit+0xbc>)
 80086a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	613b      	str	r3, [r7, #16]
 80086ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80086ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086b4:	2300      	movs	r3, #0
 80086b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80086bc:	f107 0314 	add.w	r3, r7, #20
 80086c0:	4619      	mov	r1, r3
 80086c2:	481b      	ldr	r0, [pc, #108]	; (8008730 <HAL_HCD_MspInit+0xc0>)
 80086c4:	f7f9 faaa 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80086c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80086cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086ce:	2302      	movs	r3, #2
 80086d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086d6:	2303      	movs	r3, #3
 80086d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086da:	230a      	movs	r3, #10
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086de:	f107 0314 	add.w	r3, r7, #20
 80086e2:	4619      	mov	r1, r3
 80086e4:	4812      	ldr	r0, [pc, #72]	; (8008730 <HAL_HCD_MspInit+0xc0>)
 80086e6:	f7f9 fa99 	bl	8001c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086ea:	4b10      	ldr	r3, [pc, #64]	; (800872c <HAL_HCD_MspInit+0xbc>)
 80086ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ee:	4a0f      	ldr	r2, [pc, #60]	; (800872c <HAL_HCD_MspInit+0xbc>)
 80086f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f4:	6353      	str	r3, [r2, #52]	; 0x34
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	4b0c      	ldr	r3, [pc, #48]	; (800872c <HAL_HCD_MspInit+0xbc>)
 80086fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fe:	4a0b      	ldr	r2, [pc, #44]	; (800872c <HAL_HCD_MspInit+0xbc>)
 8008700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008704:	6453      	str	r3, [r2, #68]	; 0x44
 8008706:	4b09      	ldr	r3, [pc, #36]	; (800872c <HAL_HCD_MspInit+0xbc>)
 8008708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008712:	2200      	movs	r2, #0
 8008714:	2100      	movs	r1, #0
 8008716:	2043      	movs	r0, #67	; 0x43
 8008718:	f7f9 fa49 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800871c:	2043      	movs	r0, #67	; 0x43
 800871e:	f7f9 fa62 	bl	8001be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008722:	bf00      	nop
 8008724:	3728      	adds	r7, #40	; 0x28
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	40023800 	.word	0x40023800
 8008730:	40020000 	.word	0x40020000

08008734 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe ffed 	bl	8007722 <USBH_LL_IncTimer>
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff f825 	bl	80077ae <USBH_LL_Connect>
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800877a:	4618      	mov	r0, r3
 800877c:	f7ff f82e 	bl	80077dc <USBH_LL_Disconnect>
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
 8008794:	4613      	mov	r3, r2
 8008796:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe ffdf 	bl	8007776 <USBH_LL_PortEnabled>
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe ffdf 	bl	8007792 <USBH_LL_PortDisabled>
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d12a      	bne.n	8008844 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80087ee:	4a18      	ldr	r2, [pc, #96]	; (8008850 <USBH_LL_Init+0x74>)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a15      	ldr	r2, [pc, #84]	; (8008850 <USBH_LL_Init+0x74>)
 80087fa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087fe:	4b14      	ldr	r3, [pc, #80]	; (8008850 <USBH_LL_Init+0x74>)
 8008800:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008804:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008806:	4b12      	ldr	r3, [pc, #72]	; (8008850 <USBH_LL_Init+0x74>)
 8008808:	2208      	movs	r2, #8
 800880a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800880c:	4b10      	ldr	r3, [pc, #64]	; (8008850 <USBH_LL_Init+0x74>)
 800880e:	2201      	movs	r2, #1
 8008810:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008812:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <USBH_LL_Init+0x74>)
 8008814:	2200      	movs	r2, #0
 8008816:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008818:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <USBH_LL_Init+0x74>)
 800881a:	2202      	movs	r2, #2
 800881c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800881e:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <USBH_LL_Init+0x74>)
 8008820:	2200      	movs	r2, #0
 8008822:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008824:	480a      	ldr	r0, [pc, #40]	; (8008850 <USBH_LL_Init+0x74>)
 8008826:	f7f9 fbb0 	bl	8001f8a <HAL_HCD_Init>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008830:	f7f8 f956 	bl	8000ae0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008834:	4806      	ldr	r0, [pc, #24]	; (8008850 <USBH_LL_Init+0x74>)
 8008836:	f7f9 ff94 	bl	8002762 <HAL_HCD_GetCurrentFrame>
 800883a:	4603      	mov	r3, r0
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7fe ff60 	bl	8007704 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20000660 	.word	0x20000660

08008854 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800886a:	4618      	mov	r0, r3
 800886c:	f7f9 ff03 	bl	8002676 <HAL_HCD_Start>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	4618      	mov	r0, r3
 8008878:	f000 f95c 	bl	8008b34 <USBH_Get_USB_Status>
 800887c:	4603      	mov	r3, r0
 800887e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008880:	7bbb      	ldrb	r3, [r7, #14]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7f9 ff0b 	bl	80026bc <HAL_HCD_Stop>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f941 	bl	8008b34 <USBH_Get_USB_Status>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7f9 ff53 	bl	800277e <HAL_HCD_GetCurrentSpeed>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d00c      	beq.n	80088f8 <USBH_LL_GetSpeed+0x38>
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d80d      	bhi.n	80088fe <USBH_LL_GetSpeed+0x3e>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <USBH_LL_GetSpeed+0x2c>
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d003      	beq.n	80088f2 <USBH_LL_GetSpeed+0x32>
 80088ea:	e008      	b.n	80088fe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
    break;
 80088f0:	e008      	b.n	8008904 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80088f2:	2301      	movs	r3, #1
 80088f4:	73fb      	strb	r3, [r7, #15]
    break;
 80088f6:	e005      	b.n	8008904 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80088f8:	2302      	movs	r3, #2
 80088fa:	73fb      	strb	r3, [r7, #15]
    break;
 80088fc:	e002      	b.n	8008904 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80088fe:	2301      	movs	r3, #1
 8008900:	73fb      	strb	r3, [r7, #15]
    break;
 8008902:	bf00      	nop
  }
  return  speed;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008924:	4618      	mov	r0, r3
 8008926:	f7f9 fee6 	bl	80026f6 <HAL_HCD_ResetPort>
 800892a:	4603      	mov	r3, r0
 800892c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	4618      	mov	r0, r3
 8008932:	f000 f8ff 	bl	8008b34 <USBH_Get_USB_Status>
 8008936:	4603      	mov	r3, r0
 8008938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800893a:	7bbb      	ldrb	r3, [r7, #14]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008956:	78fa      	ldrb	r2, [r7, #3]
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f7f9 feed 	bl	800273a <HAL_HCD_HC_GetXferCount>
 8008960:	4603      	mov	r3, r0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800896a:	b590      	push	{r4, r7, lr}
 800896c:	b089      	sub	sp, #36	; 0x24
 800896e:	af04      	add	r7, sp, #16
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	4608      	mov	r0, r1
 8008974:	4611      	mov	r1, r2
 8008976:	461a      	mov	r2, r3
 8008978:	4603      	mov	r3, r0
 800897a:	70fb      	strb	r3, [r7, #3]
 800897c:	460b      	mov	r3, r1
 800897e:	70bb      	strb	r3, [r7, #2]
 8008980:	4613      	mov	r3, r2
 8008982:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008992:	787c      	ldrb	r4, [r7, #1]
 8008994:	78ba      	ldrb	r2, [r7, #2]
 8008996:	78f9      	ldrb	r1, [r7, #3]
 8008998:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800899a:	9302      	str	r3, [sp, #8]
 800899c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	4623      	mov	r3, r4
 80089aa:	f7f9 fb50 	bl	800204e <HAL_HCD_HC_Init>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 f8bd 	bl	8008b34 <USBH_Get_USB_Status>
 80089ba:	4603      	mov	r3, r0
 80089bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089be:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd90      	pop	{r4, r7, pc}

080089c8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089e2:	78fa      	ldrb	r2, [r7, #3]
 80089e4:	4611      	mov	r1, r2
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7f9 fbc0 	bl	800216c <HAL_HCD_HC_Halt>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 f89e 	bl	8008b34 <USBH_Get_USB_Status>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a06:	b590      	push	{r4, r7, lr}
 8008a08:	b089      	sub	sp, #36	; 0x24
 8008a0a:	af04      	add	r7, sp, #16
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	4608      	mov	r0, r1
 8008a10:	4611      	mov	r1, r2
 8008a12:	461a      	mov	r2, r3
 8008a14:	4603      	mov	r3, r0
 8008a16:	70fb      	strb	r3, [r7, #3]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70bb      	strb	r3, [r7, #2]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a2e:	787c      	ldrb	r4, [r7, #1]
 8008a30:	78ba      	ldrb	r2, [r7, #2]
 8008a32:	78f9      	ldrb	r1, [r7, #3]
 8008a34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a38:	9303      	str	r3, [sp, #12]
 8008a3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a3c:	9302      	str	r3, [sp, #8]
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	4623      	mov	r3, r4
 8008a4a:	f7f9 fbb3 	bl	80021b4 <HAL_HCD_HC_SubmitRequest>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 f86d 	bl	8008b34 <USBH_Get_USB_Status>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd90      	pop	{r4, r7, pc}

08008a68 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a7a:	78fa      	ldrb	r2, [r7, #3]
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7f9 fe47 	bl	8002712 <HAL_HCD_HC_GetURBState>
 8008a84:	4603      	mov	r3, r0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d103      	bne.n	8008aac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 f870 	bl	8008b8c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008aac:	20c8      	movs	r0, #200	; 0xc8
 8008aae:	f7f8 fb23 	bl	80010f8 <HAL_Delay>
  return USBH_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ad2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	212c      	movs	r1, #44	; 0x2c
 8008ada:	fb01 f303 	mul.w	r3, r1, r3
 8008ade:	4413      	add	r3, r2
 8008ae0:	333b      	adds	r3, #59	; 0x3b
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d009      	beq.n	8008afc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	212c      	movs	r1, #44	; 0x2c
 8008aee:	fb01 f303 	mul.w	r3, r1, r3
 8008af2:	4413      	add	r3, r2
 8008af4:	3354      	adds	r3, #84	; 0x54
 8008af6:	78ba      	ldrb	r2, [r7, #2]
 8008af8:	701a      	strb	r2, [r3, #0]
 8008afa:	e008      	b.n	8008b0e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	212c      	movs	r1, #44	; 0x2c
 8008b02:	fb01 f303 	mul.w	r3, r1, r3
 8008b06:	4413      	add	r3, r2
 8008b08:	3355      	adds	r3, #85	; 0x55
 8008b0a:	78ba      	ldrb	r2, [r7, #2]
 8008b0c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7f8 fae7 	bl	80010f8 <HAL_Delay>
}
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d817      	bhi.n	8008b78 <USBH_Get_USB_Status+0x44>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <USBH_Get_USB_Status+0x1c>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b61 	.word	0x08008b61
 8008b54:	08008b67 	.word	0x08008b67
 8008b58:	08008b6d 	.word	0x08008b6d
 8008b5c:	08008b73 	.word	0x08008b73
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
    break;
 8008b64:	e00b      	b.n	8008b7e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b66:	2302      	movs	r3, #2
 8008b68:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6a:	e008      	b.n	8008b7e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b70:	e005      	b.n	8008b7e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b72:	2302      	movs	r3, #2
 8008b74:	73fb      	strb	r3, [r7, #15]
    break;
 8008b76:	e002      	b.n	8008b7e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7c:	bf00      	nop
  }
  return usb_status;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d102      	bne.n	8008ba6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]
 8008ba4:	e001      	b.n	8008baa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	461a      	mov	r2, r3
 8008bae:	2101      	movs	r1, #1
 8008bb0:	4803      	ldr	r0, [pc, #12]	; (8008bc0 <MX_DriverVbusFS+0x34>)
 8008bb2:	f7f9 f9b7 	bl	8001f24 <HAL_GPIO_WritePin>
}
 8008bb6:	bf00      	nop
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	40020800 	.word	0x40020800

08008bc4 <__errno>:
 8008bc4:	4b01      	ldr	r3, [pc, #4]	; (8008bcc <__errno+0x8>)
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	2000002c 	.word	0x2000002c

08008bd0 <__libc_init_array>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	4d0d      	ldr	r5, [pc, #52]	; (8008c08 <__libc_init_array+0x38>)
 8008bd4:	4c0d      	ldr	r4, [pc, #52]	; (8008c0c <__libc_init_array+0x3c>)
 8008bd6:	1b64      	subs	r4, r4, r5
 8008bd8:	10a4      	asrs	r4, r4, #2
 8008bda:	2600      	movs	r6, #0
 8008bdc:	42a6      	cmp	r6, r4
 8008bde:	d109      	bne.n	8008bf4 <__libc_init_array+0x24>
 8008be0:	4d0b      	ldr	r5, [pc, #44]	; (8008c10 <__libc_init_array+0x40>)
 8008be2:	4c0c      	ldr	r4, [pc, #48]	; (8008c14 <__libc_init_array+0x44>)
 8008be4:	f000 f92e 	bl	8008e44 <_init>
 8008be8:	1b64      	subs	r4, r4, r5
 8008bea:	10a4      	asrs	r4, r4, #2
 8008bec:	2600      	movs	r6, #0
 8008bee:	42a6      	cmp	r6, r4
 8008bf0:	d105      	bne.n	8008bfe <__libc_init_array+0x2e>
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf8:	4798      	blx	r3
 8008bfa:	3601      	adds	r6, #1
 8008bfc:	e7ee      	b.n	8008bdc <__libc_init_array+0xc>
 8008bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c02:	4798      	blx	r3
 8008c04:	3601      	adds	r6, #1
 8008c06:	e7f2      	b.n	8008bee <__libc_init_array+0x1e>
 8008c08:	08008e80 	.word	0x08008e80
 8008c0c:	08008e80 	.word	0x08008e80
 8008c10:	08008e80 	.word	0x08008e80
 8008c14:	08008e84 	.word	0x08008e84

08008c18 <malloc>:
 8008c18:	4b02      	ldr	r3, [pc, #8]	; (8008c24 <malloc+0xc>)
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	6818      	ldr	r0, [r3, #0]
 8008c1e:	f000 b87f 	b.w	8008d20 <_malloc_r>
 8008c22:	bf00      	nop
 8008c24:	2000002c 	.word	0x2000002c

08008c28 <free>:
 8008c28:	4b02      	ldr	r3, [pc, #8]	; (8008c34 <free+0xc>)
 8008c2a:	4601      	mov	r1, r0
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	f000 b80b 	b.w	8008c48 <_free_r>
 8008c32:	bf00      	nop
 8008c34:	2000002c 	.word	0x2000002c

08008c38 <memset>:
 8008c38:	4402      	add	r2, r0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d100      	bne.n	8008c42 <memset+0xa>
 8008c40:	4770      	bx	lr
 8008c42:	f803 1b01 	strb.w	r1, [r3], #1
 8008c46:	e7f9      	b.n	8008c3c <memset+0x4>

08008c48 <_free_r>:
 8008c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	d044      	beq.n	8008cd8 <_free_r+0x90>
 8008c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c52:	9001      	str	r0, [sp, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f1a1 0404 	sub.w	r4, r1, #4
 8008c5a:	bfb8      	it	lt
 8008c5c:	18e4      	addlt	r4, r4, r3
 8008c5e:	f000 f8e3 	bl	8008e28 <__malloc_lock>
 8008c62:	4a1e      	ldr	r2, [pc, #120]	; (8008cdc <_free_r+0x94>)
 8008c64:	9801      	ldr	r0, [sp, #4]
 8008c66:	6813      	ldr	r3, [r2, #0]
 8008c68:	b933      	cbnz	r3, 8008c78 <_free_r+0x30>
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	6014      	str	r4, [r2, #0]
 8008c6e:	b003      	add	sp, #12
 8008c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c74:	f000 b8de 	b.w	8008e34 <__malloc_unlock>
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	d908      	bls.n	8008c8e <_free_r+0x46>
 8008c7c:	6825      	ldr	r5, [r4, #0]
 8008c7e:	1961      	adds	r1, r4, r5
 8008c80:	428b      	cmp	r3, r1
 8008c82:	bf01      	itttt	eq
 8008c84:	6819      	ldreq	r1, [r3, #0]
 8008c86:	685b      	ldreq	r3, [r3, #4]
 8008c88:	1949      	addeq	r1, r1, r5
 8008c8a:	6021      	streq	r1, [r4, #0]
 8008c8c:	e7ed      	b.n	8008c6a <_free_r+0x22>
 8008c8e:	461a      	mov	r2, r3
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	b10b      	cbz	r3, 8008c98 <_free_r+0x50>
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	d9fa      	bls.n	8008c8e <_free_r+0x46>
 8008c98:	6811      	ldr	r1, [r2, #0]
 8008c9a:	1855      	adds	r5, r2, r1
 8008c9c:	42a5      	cmp	r5, r4
 8008c9e:	d10b      	bne.n	8008cb8 <_free_r+0x70>
 8008ca0:	6824      	ldr	r4, [r4, #0]
 8008ca2:	4421      	add	r1, r4
 8008ca4:	1854      	adds	r4, r2, r1
 8008ca6:	42a3      	cmp	r3, r4
 8008ca8:	6011      	str	r1, [r2, #0]
 8008caa:	d1e0      	bne.n	8008c6e <_free_r+0x26>
 8008cac:	681c      	ldr	r4, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	6053      	str	r3, [r2, #4]
 8008cb2:	4421      	add	r1, r4
 8008cb4:	6011      	str	r1, [r2, #0]
 8008cb6:	e7da      	b.n	8008c6e <_free_r+0x26>
 8008cb8:	d902      	bls.n	8008cc0 <_free_r+0x78>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	6003      	str	r3, [r0, #0]
 8008cbe:	e7d6      	b.n	8008c6e <_free_r+0x26>
 8008cc0:	6825      	ldr	r5, [r4, #0]
 8008cc2:	1961      	adds	r1, r4, r5
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	bf04      	itt	eq
 8008cc8:	6819      	ldreq	r1, [r3, #0]
 8008cca:	685b      	ldreq	r3, [r3, #4]
 8008ccc:	6063      	str	r3, [r4, #4]
 8008cce:	bf04      	itt	eq
 8008cd0:	1949      	addeq	r1, r1, r5
 8008cd2:	6021      	streq	r1, [r4, #0]
 8008cd4:	6054      	str	r4, [r2, #4]
 8008cd6:	e7ca      	b.n	8008c6e <_free_r+0x26>
 8008cd8:	b003      	add	sp, #12
 8008cda:	bd30      	pop	{r4, r5, pc}
 8008cdc:	20000964 	.word	0x20000964

08008ce0 <sbrk_aligned>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	4e0e      	ldr	r6, [pc, #56]	; (8008d1c <sbrk_aligned+0x3c>)
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	6831      	ldr	r1, [r6, #0]
 8008ce8:	4605      	mov	r5, r0
 8008cea:	b911      	cbnz	r1, 8008cf2 <sbrk_aligned+0x12>
 8008cec:	f000 f88c 	bl	8008e08 <_sbrk_r>
 8008cf0:	6030      	str	r0, [r6, #0]
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f000 f887 	bl	8008e08 <_sbrk_r>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	d00a      	beq.n	8008d14 <sbrk_aligned+0x34>
 8008cfe:	1cc4      	adds	r4, r0, #3
 8008d00:	f024 0403 	bic.w	r4, r4, #3
 8008d04:	42a0      	cmp	r0, r4
 8008d06:	d007      	beq.n	8008d18 <sbrk_aligned+0x38>
 8008d08:	1a21      	subs	r1, r4, r0
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f000 f87c 	bl	8008e08 <_sbrk_r>
 8008d10:	3001      	adds	r0, #1
 8008d12:	d101      	bne.n	8008d18 <sbrk_aligned+0x38>
 8008d14:	f04f 34ff 	mov.w	r4, #4294967295
 8008d18:	4620      	mov	r0, r4
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
 8008d1c:	20000968 	.word	0x20000968

08008d20 <_malloc_r>:
 8008d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d24:	1ccd      	adds	r5, r1, #3
 8008d26:	f025 0503 	bic.w	r5, r5, #3
 8008d2a:	3508      	adds	r5, #8
 8008d2c:	2d0c      	cmp	r5, #12
 8008d2e:	bf38      	it	cc
 8008d30:	250c      	movcc	r5, #12
 8008d32:	2d00      	cmp	r5, #0
 8008d34:	4607      	mov	r7, r0
 8008d36:	db01      	blt.n	8008d3c <_malloc_r+0x1c>
 8008d38:	42a9      	cmp	r1, r5
 8008d3a:	d905      	bls.n	8008d48 <_malloc_r+0x28>
 8008d3c:	230c      	movs	r3, #12
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	2600      	movs	r6, #0
 8008d42:	4630      	mov	r0, r6
 8008d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d48:	4e2e      	ldr	r6, [pc, #184]	; (8008e04 <_malloc_r+0xe4>)
 8008d4a:	f000 f86d 	bl	8008e28 <__malloc_lock>
 8008d4e:	6833      	ldr	r3, [r6, #0]
 8008d50:	461c      	mov	r4, r3
 8008d52:	bb34      	cbnz	r4, 8008da2 <_malloc_r+0x82>
 8008d54:	4629      	mov	r1, r5
 8008d56:	4638      	mov	r0, r7
 8008d58:	f7ff ffc2 	bl	8008ce0 <sbrk_aligned>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	4604      	mov	r4, r0
 8008d60:	d14d      	bne.n	8008dfe <_malloc_r+0xde>
 8008d62:	6834      	ldr	r4, [r6, #0]
 8008d64:	4626      	mov	r6, r4
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	d140      	bne.n	8008dec <_malloc_r+0xcc>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4638      	mov	r0, r7
 8008d70:	eb04 0803 	add.w	r8, r4, r3
 8008d74:	f000 f848 	bl	8008e08 <_sbrk_r>
 8008d78:	4580      	cmp	r8, r0
 8008d7a:	d13a      	bne.n	8008df2 <_malloc_r+0xd2>
 8008d7c:	6821      	ldr	r1, [r4, #0]
 8008d7e:	3503      	adds	r5, #3
 8008d80:	1a6d      	subs	r5, r5, r1
 8008d82:	f025 0503 	bic.w	r5, r5, #3
 8008d86:	3508      	adds	r5, #8
 8008d88:	2d0c      	cmp	r5, #12
 8008d8a:	bf38      	it	cc
 8008d8c:	250c      	movcc	r5, #12
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7ff ffa5 	bl	8008ce0 <sbrk_aligned>
 8008d96:	3001      	adds	r0, #1
 8008d98:	d02b      	beq.n	8008df2 <_malloc_r+0xd2>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	442b      	add	r3, r5
 8008d9e:	6023      	str	r3, [r4, #0]
 8008da0:	e00e      	b.n	8008dc0 <_malloc_r+0xa0>
 8008da2:	6822      	ldr	r2, [r4, #0]
 8008da4:	1b52      	subs	r2, r2, r5
 8008da6:	d41e      	bmi.n	8008de6 <_malloc_r+0xc6>
 8008da8:	2a0b      	cmp	r2, #11
 8008daa:	d916      	bls.n	8008dda <_malloc_r+0xba>
 8008dac:	1961      	adds	r1, r4, r5
 8008dae:	42a3      	cmp	r3, r4
 8008db0:	6025      	str	r5, [r4, #0]
 8008db2:	bf18      	it	ne
 8008db4:	6059      	strne	r1, [r3, #4]
 8008db6:	6863      	ldr	r3, [r4, #4]
 8008db8:	bf08      	it	eq
 8008dba:	6031      	streq	r1, [r6, #0]
 8008dbc:	5162      	str	r2, [r4, r5]
 8008dbe:	604b      	str	r3, [r1, #4]
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f104 060b 	add.w	r6, r4, #11
 8008dc6:	f000 f835 	bl	8008e34 <__malloc_unlock>
 8008dca:	f026 0607 	bic.w	r6, r6, #7
 8008dce:	1d23      	adds	r3, r4, #4
 8008dd0:	1af2      	subs	r2, r6, r3
 8008dd2:	d0b6      	beq.n	8008d42 <_malloc_r+0x22>
 8008dd4:	1b9b      	subs	r3, r3, r6
 8008dd6:	50a3      	str	r3, [r4, r2]
 8008dd8:	e7b3      	b.n	8008d42 <_malloc_r+0x22>
 8008dda:	6862      	ldr	r2, [r4, #4]
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	bf0c      	ite	eq
 8008de0:	6032      	streq	r2, [r6, #0]
 8008de2:	605a      	strne	r2, [r3, #4]
 8008de4:	e7ec      	b.n	8008dc0 <_malloc_r+0xa0>
 8008de6:	4623      	mov	r3, r4
 8008de8:	6864      	ldr	r4, [r4, #4]
 8008dea:	e7b2      	b.n	8008d52 <_malloc_r+0x32>
 8008dec:	4634      	mov	r4, r6
 8008dee:	6876      	ldr	r6, [r6, #4]
 8008df0:	e7b9      	b.n	8008d66 <_malloc_r+0x46>
 8008df2:	230c      	movs	r3, #12
 8008df4:	603b      	str	r3, [r7, #0]
 8008df6:	4638      	mov	r0, r7
 8008df8:	f000 f81c 	bl	8008e34 <__malloc_unlock>
 8008dfc:	e7a1      	b.n	8008d42 <_malloc_r+0x22>
 8008dfe:	6025      	str	r5, [r4, #0]
 8008e00:	e7de      	b.n	8008dc0 <_malloc_r+0xa0>
 8008e02:	bf00      	nop
 8008e04:	20000964 	.word	0x20000964

08008e08 <_sbrk_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4d06      	ldr	r5, [pc, #24]	; (8008e24 <_sbrk_r+0x1c>)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4604      	mov	r4, r0
 8008e10:	4608      	mov	r0, r1
 8008e12:	602b      	str	r3, [r5, #0]
 8008e14:	f7f8 f88c 	bl	8000f30 <_sbrk>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_sbrk_r+0x1a>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_sbrk_r+0x1a>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	2000096c 	.word	0x2000096c

08008e28 <__malloc_lock>:
 8008e28:	4801      	ldr	r0, [pc, #4]	; (8008e30 <__malloc_lock+0x8>)
 8008e2a:	f000 b809 	b.w	8008e40 <__retarget_lock_acquire_recursive>
 8008e2e:	bf00      	nop
 8008e30:	20000970 	.word	0x20000970

08008e34 <__malloc_unlock>:
 8008e34:	4801      	ldr	r0, [pc, #4]	; (8008e3c <__malloc_unlock+0x8>)
 8008e36:	f000 b804 	b.w	8008e42 <__retarget_lock_release_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	20000970 	.word	0x20000970

08008e40 <__retarget_lock_acquire_recursive>:
 8008e40:	4770      	bx	lr

08008e42 <__retarget_lock_release_recursive>:
 8008e42:	4770      	bx	lr

08008e44 <_init>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	bf00      	nop
 8008e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4a:	bc08      	pop	{r3}
 8008e4c:	469e      	mov	lr, r3
 8008e4e:	4770      	bx	lr

08008e50 <_fini>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr
